
2_HSEMCoreDev_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc4  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08103f5c  08103f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08103f94  08103f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08103f9c  08103f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08103fa0  08103fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  10000000  08103fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  1000001c  08103fc0  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  100000d0  08103fc0  000200d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017bdc  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026f5  00000000  00000000  00037c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000af0  00000000  00000000  0003a320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a48  00000000  00000000  0003ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000388c5  00000000  00000000  0003b858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e55b  00000000  00000000  0007411d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178a47  00000000  00000000  00082678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fb0bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c80  00000000  00000000  001fb114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000001c 	.word	0x1000001c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08103f44 	.word	0x08103f44

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000020 	.word	0x10000020
 81002d4:	08103f44 	.word	0x08103f44

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b96e 	b.w	81005cc <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	468c      	mov	ip, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	f040 8083 	bne.w	810041e <__udivmoddi4+0x116>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d947      	bls.n	81003ae <__udivmoddi4+0xa6>
 810031e:	fab2 f282 	clz	r2, r2
 8100322:	b142      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100324:	f1c2 0020 	rsb	r0, r2, #32
 8100328:	fa24 f000 	lsr.w	r0, r4, r0
 810032c:	4091      	lsls	r1, r2
 810032e:	4097      	lsls	r7, r2
 8100330:	ea40 0c01 	orr.w	ip, r0, r1
 8100334:	4094      	lsls	r4, r2
 8100336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 810033a:	0c23      	lsrs	r3, r4, #16
 810033c:	fbbc f6f8 	udiv	r6, ip, r8
 8100340:	fa1f fe87 	uxth.w	lr, r7
 8100344:	fb08 c116 	mls	r1, r8, r6, ip
 8100348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034c:	fb06 f10e 	mul.w	r1, r6, lr
 8100350:	4299      	cmp	r1, r3
 8100352:	d909      	bls.n	8100368 <__udivmoddi4+0x60>
 8100354:	18fb      	adds	r3, r7, r3
 8100356:	f106 30ff 	add.w	r0, r6, #4294967295
 810035a:	f080 8119 	bcs.w	8100590 <__udivmoddi4+0x288>
 810035e:	4299      	cmp	r1, r3
 8100360:	f240 8116 	bls.w	8100590 <__udivmoddi4+0x288>
 8100364:	3e02      	subs	r6, #2
 8100366:	443b      	add	r3, r7
 8100368:	1a5b      	subs	r3, r3, r1
 810036a:	b2a4      	uxth	r4, r4
 810036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100370:	fb08 3310 	mls	r3, r8, r0, r3
 8100374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100378:	fb00 fe0e 	mul.w	lr, r0, lr
 810037c:	45a6      	cmp	lr, r4
 810037e:	d909      	bls.n	8100394 <__udivmoddi4+0x8c>
 8100380:	193c      	adds	r4, r7, r4
 8100382:	f100 33ff 	add.w	r3, r0, #4294967295
 8100386:	f080 8105 	bcs.w	8100594 <__udivmoddi4+0x28c>
 810038a:	45a6      	cmp	lr, r4
 810038c:	f240 8102 	bls.w	8100594 <__udivmoddi4+0x28c>
 8100390:	3802      	subs	r0, #2
 8100392:	443c      	add	r4, r7
 8100394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100398:	eba4 040e 	sub.w	r4, r4, lr
 810039c:	2600      	movs	r6, #0
 810039e:	b11d      	cbz	r5, 81003a8 <__udivmoddi4+0xa0>
 81003a0:	40d4      	lsrs	r4, r2
 81003a2:	2300      	movs	r3, #0
 81003a4:	e9c5 4300 	strd	r4, r3, [r5]
 81003a8:	4631      	mov	r1, r6
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	b902      	cbnz	r2, 81003b2 <__udivmoddi4+0xaa>
 81003b0:	deff      	udf	#255	; 0xff
 81003b2:	fab2 f282 	clz	r2, r2
 81003b6:	2a00      	cmp	r2, #0
 81003b8:	d150      	bne.n	810045c <__udivmoddi4+0x154>
 81003ba:	1bcb      	subs	r3, r1, r7
 81003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003c0:	fa1f f887 	uxth.w	r8, r7
 81003c4:	2601      	movs	r6, #1
 81003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 81003ca:	0c21      	lsrs	r1, r4, #16
 81003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 81003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81003d4:	fb08 f30c 	mul.w	r3, r8, ip
 81003d8:	428b      	cmp	r3, r1
 81003da:	d907      	bls.n	81003ec <__udivmoddi4+0xe4>
 81003dc:	1879      	adds	r1, r7, r1
 81003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 81003e2:	d202      	bcs.n	81003ea <__udivmoddi4+0xe2>
 81003e4:	428b      	cmp	r3, r1
 81003e6:	f200 80e9 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 81003ea:	4684      	mov	ip, r0
 81003ec:	1ac9      	subs	r1, r1, r3
 81003ee:	b2a3      	uxth	r3, r4
 81003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 81003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 81003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81003fc:	fb08 f800 	mul.w	r8, r8, r0
 8100400:	45a0      	cmp	r8, r4
 8100402:	d907      	bls.n	8100414 <__udivmoddi4+0x10c>
 8100404:	193c      	adds	r4, r7, r4
 8100406:	f100 33ff 	add.w	r3, r0, #4294967295
 810040a:	d202      	bcs.n	8100412 <__udivmoddi4+0x10a>
 810040c:	45a0      	cmp	r8, r4
 810040e:	f200 80d9 	bhi.w	81005c4 <__udivmoddi4+0x2bc>
 8100412:	4618      	mov	r0, r3
 8100414:	eba4 0408 	sub.w	r4, r4, r8
 8100418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 810041c:	e7bf      	b.n	810039e <__udivmoddi4+0x96>
 810041e:	428b      	cmp	r3, r1
 8100420:	d909      	bls.n	8100436 <__udivmoddi4+0x12e>
 8100422:	2d00      	cmp	r5, #0
 8100424:	f000 80b1 	beq.w	810058a <__udivmoddi4+0x282>
 8100428:	2600      	movs	r6, #0
 810042a:	e9c5 0100 	strd	r0, r1, [r5]
 810042e:	4630      	mov	r0, r6
 8100430:	4631      	mov	r1, r6
 8100432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100436:	fab3 f683 	clz	r6, r3
 810043a:	2e00      	cmp	r6, #0
 810043c:	d14a      	bne.n	81004d4 <__udivmoddi4+0x1cc>
 810043e:	428b      	cmp	r3, r1
 8100440:	d302      	bcc.n	8100448 <__udivmoddi4+0x140>
 8100442:	4282      	cmp	r2, r0
 8100444:	f200 80b8 	bhi.w	81005b8 <__udivmoddi4+0x2b0>
 8100448:	1a84      	subs	r4, r0, r2
 810044a:	eb61 0103 	sbc.w	r1, r1, r3
 810044e:	2001      	movs	r0, #1
 8100450:	468c      	mov	ip, r1
 8100452:	2d00      	cmp	r5, #0
 8100454:	d0a8      	beq.n	81003a8 <__udivmoddi4+0xa0>
 8100456:	e9c5 4c00 	strd	r4, ip, [r5]
 810045a:	e7a5      	b.n	81003a8 <__udivmoddi4+0xa0>
 810045c:	f1c2 0320 	rsb	r3, r2, #32
 8100460:	fa20 f603 	lsr.w	r6, r0, r3
 8100464:	4097      	lsls	r7, r2
 8100466:	fa01 f002 	lsl.w	r0, r1, r2
 810046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810046e:	40d9      	lsrs	r1, r3
 8100470:	4330      	orrs	r0, r6
 8100472:	0c03      	lsrs	r3, r0, #16
 8100474:	fbb1 f6fe 	udiv	r6, r1, lr
 8100478:	fa1f f887 	uxth.w	r8, r7
 810047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8100480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100484:	fb06 f108 	mul.w	r1, r6, r8
 8100488:	4299      	cmp	r1, r3
 810048a:	fa04 f402 	lsl.w	r4, r4, r2
 810048e:	d909      	bls.n	81004a4 <__udivmoddi4+0x19c>
 8100490:	18fb      	adds	r3, r7, r3
 8100492:	f106 3cff 	add.w	ip, r6, #4294967295
 8100496:	f080 808d 	bcs.w	81005b4 <__udivmoddi4+0x2ac>
 810049a:	4299      	cmp	r1, r3
 810049c:	f240 808a 	bls.w	81005b4 <__udivmoddi4+0x2ac>
 81004a0:	3e02      	subs	r6, #2
 81004a2:	443b      	add	r3, r7
 81004a4:	1a5b      	subs	r3, r3, r1
 81004a6:	b281      	uxth	r1, r0
 81004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 81004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 81004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81004b4:	fb00 f308 	mul.w	r3, r0, r8
 81004b8:	428b      	cmp	r3, r1
 81004ba:	d907      	bls.n	81004cc <__udivmoddi4+0x1c4>
 81004bc:	1879      	adds	r1, r7, r1
 81004be:	f100 3cff 	add.w	ip, r0, #4294967295
 81004c2:	d273      	bcs.n	81005ac <__udivmoddi4+0x2a4>
 81004c4:	428b      	cmp	r3, r1
 81004c6:	d971      	bls.n	81005ac <__udivmoddi4+0x2a4>
 81004c8:	3802      	subs	r0, #2
 81004ca:	4439      	add	r1, r7
 81004cc:	1acb      	subs	r3, r1, r3
 81004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 81004d2:	e778      	b.n	81003c6 <__udivmoddi4+0xbe>
 81004d4:	f1c6 0c20 	rsb	ip, r6, #32
 81004d8:	fa03 f406 	lsl.w	r4, r3, r6
 81004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 81004e0:	431c      	orrs	r4, r3
 81004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 81004e6:	fa01 f306 	lsl.w	r3, r1, r6
 81004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 81004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 81004f2:	431f      	orrs	r7, r3
 81004f4:	0c3b      	lsrs	r3, r7, #16
 81004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81004fa:	fa1f f884 	uxth.w	r8, r4
 81004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8100502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100506:	fb09 fa08 	mul.w	sl, r9, r8
 810050a:	458a      	cmp	sl, r1
 810050c:	fa02 f206 	lsl.w	r2, r2, r6
 8100510:	fa00 f306 	lsl.w	r3, r0, r6
 8100514:	d908      	bls.n	8100528 <__udivmoddi4+0x220>
 8100516:	1861      	adds	r1, r4, r1
 8100518:	f109 30ff 	add.w	r0, r9, #4294967295
 810051c:	d248      	bcs.n	81005b0 <__udivmoddi4+0x2a8>
 810051e:	458a      	cmp	sl, r1
 8100520:	d946      	bls.n	81005b0 <__udivmoddi4+0x2a8>
 8100522:	f1a9 0902 	sub.w	r9, r9, #2
 8100526:	4421      	add	r1, r4
 8100528:	eba1 010a 	sub.w	r1, r1, sl
 810052c:	b2bf      	uxth	r7, r7
 810052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8100532:	fb0e 1110 	mls	r1, lr, r0, r1
 8100536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810053a:	fb00 f808 	mul.w	r8, r0, r8
 810053e:	45b8      	cmp	r8, r7
 8100540:	d907      	bls.n	8100552 <__udivmoddi4+0x24a>
 8100542:	19e7      	adds	r7, r4, r7
 8100544:	f100 31ff 	add.w	r1, r0, #4294967295
 8100548:	d22e      	bcs.n	81005a8 <__udivmoddi4+0x2a0>
 810054a:	45b8      	cmp	r8, r7
 810054c:	d92c      	bls.n	81005a8 <__udivmoddi4+0x2a0>
 810054e:	3802      	subs	r0, #2
 8100550:	4427      	add	r7, r4
 8100552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100556:	eba7 0708 	sub.w	r7, r7, r8
 810055a:	fba0 8902 	umull	r8, r9, r0, r2
 810055e:	454f      	cmp	r7, r9
 8100560:	46c6      	mov	lr, r8
 8100562:	4649      	mov	r1, r9
 8100564:	d31a      	bcc.n	810059c <__udivmoddi4+0x294>
 8100566:	d017      	beq.n	8100598 <__udivmoddi4+0x290>
 8100568:	b15d      	cbz	r5, 8100582 <__udivmoddi4+0x27a>
 810056a:	ebb3 020e 	subs.w	r2, r3, lr
 810056e:	eb67 0701 	sbc.w	r7, r7, r1
 8100572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100576:	40f2      	lsrs	r2, r6
 8100578:	ea4c 0202 	orr.w	r2, ip, r2
 810057c:	40f7      	lsrs	r7, r6
 810057e:	e9c5 2700 	strd	r2, r7, [r5]
 8100582:	2600      	movs	r6, #0
 8100584:	4631      	mov	r1, r6
 8100586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810058a:	462e      	mov	r6, r5
 810058c:	4628      	mov	r0, r5
 810058e:	e70b      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100590:	4606      	mov	r6, r0
 8100592:	e6e9      	b.n	8100368 <__udivmoddi4+0x60>
 8100594:	4618      	mov	r0, r3
 8100596:	e6fd      	b.n	8100394 <__udivmoddi4+0x8c>
 8100598:	4543      	cmp	r3, r8
 810059a:	d2e5      	bcs.n	8100568 <__udivmoddi4+0x260>
 810059c:	ebb8 0e02 	subs.w	lr, r8, r2
 81005a0:	eb69 0104 	sbc.w	r1, r9, r4
 81005a4:	3801      	subs	r0, #1
 81005a6:	e7df      	b.n	8100568 <__udivmoddi4+0x260>
 81005a8:	4608      	mov	r0, r1
 81005aa:	e7d2      	b.n	8100552 <__udivmoddi4+0x24a>
 81005ac:	4660      	mov	r0, ip
 81005ae:	e78d      	b.n	81004cc <__udivmoddi4+0x1c4>
 81005b0:	4681      	mov	r9, r0
 81005b2:	e7b9      	b.n	8100528 <__udivmoddi4+0x220>
 81005b4:	4666      	mov	r6, ip
 81005b6:	e775      	b.n	81004a4 <__udivmoddi4+0x19c>
 81005b8:	4630      	mov	r0, r6
 81005ba:	e74a      	b.n	8100452 <__udivmoddi4+0x14a>
 81005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 81005c0:	4439      	add	r1, r7
 81005c2:	e713      	b.n	81003ec <__udivmoddi4+0xe4>
 81005c4:	3802      	subs	r0, #2
 81005c6:	443c      	add	r4, r7
 81005c8:	e724      	b.n	8100414 <__udivmoddi4+0x10c>
 81005ca:	bf00      	nop

081005cc <__aeabi_idiv0>:
 81005cc:	4770      	bx	lr
 81005ce:	bf00      	nop

081005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005d0:	b480      	push	{r7}
 81005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005d4:	4b0b      	ldr	r3, [pc, #44]	; (8100604 <SystemInit+0x34>)
 81005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005da:	4a0a      	ldr	r2, [pc, #40]	; (8100604 <SystemInit+0x34>)
 81005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005e4:	4b07      	ldr	r3, [pc, #28]	; (8100604 <SystemInit+0x34>)
 81005e6:	691b      	ldr	r3, [r3, #16]
 81005e8:	4a06      	ldr	r2, [pc, #24]	; (8100604 <SystemInit+0x34>)
 81005ea:	f043 0310 	orr.w	r3, r3, #16
 81005ee:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81005f0:	4b04      	ldr	r3, [pc, #16]	; (8100604 <SystemInit+0x34>)
 81005f2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81005f6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81005f8:	bf00      	nop
 81005fa:	46bd      	mov	sp, r7
 81005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop
 8100604:	e000ed00 	.word	0xe000ed00

08100608 <HAL_HSEM_FreeCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t test_buff[] = "M4_ADI\r\n";
static uint8_t callbackflag_u8 = 0 ;
void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8100608:	b580      	push	{r7, lr}
 810060a:	b082      	sub	sp, #8
 810060c:	af00      	add	r7, sp, #0
 810060e:	6078      	str	r0, [r7, #4]
	callbackflag_u8 = 1;
 8100610:	4b04      	ldr	r3, [pc, #16]	; (8100624 <HAL_HSEM_FreeCallback+0x1c>)
 8100612:	2201      	movs	r2, #1
 8100614:	701a      	strb	r2, [r3, #0]
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100616:	2001      	movs	r0, #1
 8100618:	f000 fd7c 	bl	8101114 <HAL_HSEM_ActivateNotification>
}
 810061c:	bf00      	nop
 810061e:	3708      	adds	r7, #8
 8100620:	46bd      	mov	sp, r7
 8100622:	bd80      	pop	{r7, pc}
 8100624:	10000038 	.word	0x10000038

08100628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100628:	b580      	push	{r7, lr}
 810062a:	b082      	sub	sp, #8
 810062c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810062e:	4b27      	ldr	r3, [pc, #156]	; (81006cc <main+0xa4>)
 8100630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100634:	4a25      	ldr	r2, [pc, #148]	; (81006cc <main+0xa4>)
 8100636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810063a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810063e:	4b23      	ldr	r3, [pc, #140]	; (81006cc <main+0xa4>)
 8100640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100648:	607b      	str	r3, [r7, #4]
 810064a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810064c:	2001      	movs	r0, #1
 810064e:	f000 fd61 	bl	8101114 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100652:	f000 fe05 	bl	8101260 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100656:	2201      	movs	r2, #1
 8100658:	2102      	movs	r1, #2
 810065a:	2000      	movs	r0, #0
 810065c:	f000 fd86 	bl	810116c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100660:	4b1b      	ldr	r3, [pc, #108]	; (81006d0 <main+0xa8>)
 8100662:	681b      	ldr	r3, [r3, #0]
 8100664:	091b      	lsrs	r3, r3, #4
 8100666:	f003 030f 	and.w	r3, r3, #15
 810066a:	2b07      	cmp	r3, #7
 810066c:	d108      	bne.n	8100680 <main+0x58>
 810066e:	4b19      	ldr	r3, [pc, #100]	; (81006d4 <main+0xac>)
 8100670:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100674:	4a17      	ldr	r2, [pc, #92]	; (81006d4 <main+0xac>)
 8100676:	f043 0301 	orr.w	r3, r3, #1
 810067a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810067e:	e007      	b.n	8100690 <main+0x68>
 8100680:	4b14      	ldr	r3, [pc, #80]	; (81006d4 <main+0xac>)
 8100682:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100686:	4a13      	ldr	r2, [pc, #76]	; (81006d4 <main+0xac>)
 8100688:	f043 0301 	orr.w	r3, r3, #1
 810068c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100690:	f000 f960 	bl	8100954 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USART3_UART_Init();
 8100694:	f000 f828 	bl	81006e8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100698:	f000 f872 	bl	8100780 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(1 == callbackflag_u8)
 810069c:	4b0e      	ldr	r3, [pc, #56]	; (81006d8 <main+0xb0>)
 810069e:	781b      	ldrb	r3, [r3, #0]
 81006a0:	2b01      	cmp	r3, #1
 81006a2:	d1fb      	bne.n	810069c <main+0x74>
	  {
		  callbackflag_u8 = 0;
 81006a4:	4b0c      	ldr	r3, [pc, #48]	; (81006d8 <main+0xb0>)
 81006a6:	2200      	movs	r2, #0
 81006a8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3,(uint8_t*)test_buff,10,100);
 81006aa:	2364      	movs	r3, #100	; 0x64
 81006ac:	220a      	movs	r2, #10
 81006ae:	490b      	ldr	r1, [pc, #44]	; (81006dc <main+0xb4>)
 81006b0:	480b      	ldr	r0, [pc, #44]	; (81006e0 <main+0xb8>)
 81006b2:	f002 fb6d 	bl	8102d90 <HAL_UART_Transmit>
		  HAL_Delay(200);
 81006b6:	20c8      	movs	r0, #200	; 0xc8
 81006b8:	f000 fa00 	bl	8100abc <HAL_Delay>
		  HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 81006bc:	2101      	movs	r1, #1
 81006be:	4809      	ldr	r0, [pc, #36]	; (81006e4 <main+0xbc>)
 81006c0:	f000 fd0d 	bl	81010de <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 81006c4:	20c8      	movs	r0, #200	; 0xc8
 81006c6:	f000 f9f9 	bl	8100abc <HAL_Delay>
	  if(1 == callbackflag_u8)
 81006ca:	e7e7      	b.n	810069c <main+0x74>
 81006cc:	58024400 	.word	0x58024400
 81006d0:	e000ed00 	.word	0xe000ed00
 81006d4:	58026400 	.word	0x58026400
 81006d8:	10000038 	.word	0x10000038
 81006dc:	10000008 	.word	0x10000008
 81006e0:	1000003c 	.word	0x1000003c
 81006e4:	58020400 	.word	0x58020400

081006e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 81006e8:	b580      	push	{r7, lr}
 81006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81006ec:	4b22      	ldr	r3, [pc, #136]	; (8100778 <MX_USART3_UART_Init+0x90>)
 81006ee:	4a23      	ldr	r2, [pc, #140]	; (810077c <MX_USART3_UART_Init+0x94>)
 81006f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81006f2:	4b21      	ldr	r3, [pc, #132]	; (8100778 <MX_USART3_UART_Init+0x90>)
 81006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81006f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81006fa:	4b1f      	ldr	r3, [pc, #124]	; (8100778 <MX_USART3_UART_Init+0x90>)
 81006fc:	2200      	movs	r2, #0
 81006fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100700:	4b1d      	ldr	r3, [pc, #116]	; (8100778 <MX_USART3_UART_Init+0x90>)
 8100702:	2200      	movs	r2, #0
 8100704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100706:	4b1c      	ldr	r3, [pc, #112]	; (8100778 <MX_USART3_UART_Init+0x90>)
 8100708:	2200      	movs	r2, #0
 810070a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810070c:	4b1a      	ldr	r3, [pc, #104]	; (8100778 <MX_USART3_UART_Init+0x90>)
 810070e:	220c      	movs	r2, #12
 8100710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100712:	4b19      	ldr	r3, [pc, #100]	; (8100778 <MX_USART3_UART_Init+0x90>)
 8100714:	2200      	movs	r2, #0
 8100716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100718:	4b17      	ldr	r3, [pc, #92]	; (8100778 <MX_USART3_UART_Init+0x90>)
 810071a:	2200      	movs	r2, #0
 810071c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810071e:	4b16      	ldr	r3, [pc, #88]	; (8100778 <MX_USART3_UART_Init+0x90>)
 8100720:	2200      	movs	r2, #0
 8100722:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100724:	4b14      	ldr	r3, [pc, #80]	; (8100778 <MX_USART3_UART_Init+0x90>)
 8100726:	2200      	movs	r2, #0
 8100728:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810072a:	4b13      	ldr	r3, [pc, #76]	; (8100778 <MX_USART3_UART_Init+0x90>)
 810072c:	2200      	movs	r2, #0
 810072e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100730:	4811      	ldr	r0, [pc, #68]	; (8100778 <MX_USART3_UART_Init+0x90>)
 8100732:	f002 fadd 	bl	8102cf0 <HAL_UART_Init>
 8100736:	4603      	mov	r3, r0
 8100738:	2b00      	cmp	r3, #0
 810073a:	d001      	beq.n	8100740 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810073c:	f000 f854 	bl	81007e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100740:	2100      	movs	r1, #0
 8100742:	480d      	ldr	r0, [pc, #52]	; (8100778 <MX_USART3_UART_Init+0x90>)
 8100744:	f003 fb08 	bl	8103d58 <HAL_UARTEx_SetTxFifoThreshold>
 8100748:	4603      	mov	r3, r0
 810074a:	2b00      	cmp	r3, #0
 810074c:	d001      	beq.n	8100752 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810074e:	f000 f84b 	bl	81007e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100752:	2100      	movs	r1, #0
 8100754:	4808      	ldr	r0, [pc, #32]	; (8100778 <MX_USART3_UART_Init+0x90>)
 8100756:	f003 fb3d 	bl	8103dd4 <HAL_UARTEx_SetRxFifoThreshold>
 810075a:	4603      	mov	r3, r0
 810075c:	2b00      	cmp	r3, #0
 810075e:	d001      	beq.n	8100764 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100760:	f000 f842 	bl	81007e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100764:	4804      	ldr	r0, [pc, #16]	; (8100778 <MX_USART3_UART_Init+0x90>)
 8100766:	f003 fabe 	bl	8103ce6 <HAL_UARTEx_DisableFifoMode>
 810076a:	4603      	mov	r3, r0
 810076c:	2b00      	cmp	r3, #0
 810076e:	d001      	beq.n	8100774 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100770:	f000 f83a 	bl	81007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100774:	bf00      	nop
 8100776:	bd80      	pop	{r7, pc}
 8100778:	1000003c 	.word	0x1000003c
 810077c:	40004800 	.word	0x40004800

08100780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100780:	b580      	push	{r7, lr}
 8100782:	b086      	sub	sp, #24
 8100784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100786:	1d3b      	adds	r3, r7, #4
 8100788:	2200      	movs	r2, #0
 810078a:	601a      	str	r2, [r3, #0]
 810078c:	605a      	str	r2, [r3, #4]
 810078e:	609a      	str	r2, [r3, #8]
 8100790:	60da      	str	r2, [r3, #12]
 8100792:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100794:	4b12      	ldr	r3, [pc, #72]	; (81007e0 <MX_GPIO_Init+0x60>)
 8100796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810079a:	4a11      	ldr	r2, [pc, #68]	; (81007e0 <MX_GPIO_Init+0x60>)
 810079c:	f043 0302 	orr.w	r3, r3, #2
 81007a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007a4:	4b0e      	ldr	r3, [pc, #56]	; (81007e0 <MX_GPIO_Init+0x60>)
 81007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007aa:	f003 0302 	and.w	r3, r3, #2
 81007ae:	603b      	str	r3, [r7, #0]
 81007b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 81007b2:	2200      	movs	r2, #0
 81007b4:	2101      	movs	r1, #1
 81007b6:	480b      	ldr	r0, [pc, #44]	; (81007e4 <MX_GPIO_Init+0x64>)
 81007b8:	f000 fc78 	bl	81010ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 81007bc:	2301      	movs	r3, #1
 81007be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81007c0:	2301      	movs	r3, #1
 81007c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81007c4:	2300      	movs	r3, #0
 81007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81007c8:	2300      	movs	r3, #0
 81007ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 81007cc:	1d3b      	adds	r3, r7, #4
 81007ce:	4619      	mov	r1, r3
 81007d0:	4804      	ldr	r0, [pc, #16]	; (81007e4 <MX_GPIO_Init+0x64>)
 81007d2:	f000 fabb 	bl	8100d4c <HAL_GPIO_Init>

}
 81007d6:	bf00      	nop
 81007d8:	3718      	adds	r7, #24
 81007da:	46bd      	mov	sp, r7
 81007dc:	bd80      	pop	{r7, pc}
 81007de:	bf00      	nop
 81007e0:	58024400 	.word	0x58024400
 81007e4:	58020400 	.word	0x58020400

081007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81007e8:	b480      	push	{r7}
 81007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81007ec:	b672      	cpsid	i
}
 81007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81007f0:	e7fe      	b.n	81007f0 <Error_Handler+0x8>
	...

081007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81007f4:	b580      	push	{r7, lr}
 81007f6:	b082      	sub	sp, #8
 81007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81007fa:	4b0d      	ldr	r3, [pc, #52]	; (8100830 <HAL_MspInit+0x3c>)
 81007fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100800:	4a0b      	ldr	r2, [pc, #44]	; (8100830 <HAL_MspInit+0x3c>)
 8100802:	f043 0302 	orr.w	r3, r3, #2
 8100806:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810080a:	4b09      	ldr	r3, [pc, #36]	; (8100830 <HAL_MspInit+0x3c>)
 810080c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100810:	f003 0302 	and.w	r3, r3, #2
 8100814:	607b      	str	r3, [r7, #4]
 8100816:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8100818:	2200      	movs	r2, #0
 810081a:	2100      	movs	r1, #0
 810081c:	207e      	movs	r0, #126	; 0x7e
 810081e:	f000 fa4c 	bl	8100cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100822:	207e      	movs	r0, #126	; 0x7e
 8100824:	f000 fa63 	bl	8100cee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100828:	bf00      	nop
 810082a:	3708      	adds	r7, #8
 810082c:	46bd      	mov	sp, r7
 810082e:	bd80      	pop	{r7, pc}
 8100830:	58024400 	.word	0x58024400

08100834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100834:	b580      	push	{r7, lr}
 8100836:	b0b2      	sub	sp, #200	; 0xc8
 8100838:	af00      	add	r7, sp, #0
 810083a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810083c:	f107 030c 	add.w	r3, r7, #12
 8100840:	22bc      	movs	r2, #188	; 0xbc
 8100842:	2100      	movs	r1, #0
 8100844:	4618      	mov	r0, r3
 8100846:	f003 fb75 	bl	8103f34 <memset>
  if(huart->Instance==USART3)
 810084a:	687b      	ldr	r3, [r7, #4]
 810084c:	681b      	ldr	r3, [r3, #0]
 810084e:	4a12      	ldr	r2, [pc, #72]	; (8100898 <HAL_UART_MspInit+0x64>)
 8100850:	4293      	cmp	r3, r2
 8100852:	d11d      	bne.n	8100890 <HAL_UART_MspInit+0x5c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100854:	2302      	movs	r3, #2
 8100856:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100858:	2300      	movs	r3, #0
 810085a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810085e:	f107 030c 	add.w	r3, r7, #12
 8100862:	4618      	mov	r0, r3
 8100864:	f000 fee2 	bl	810162c <HAL_RCCEx_PeriphCLKConfig>
 8100868:	4603      	mov	r3, r0
 810086a:	2b00      	cmp	r3, #0
 810086c:	d001      	beq.n	8100872 <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
 810086e:	f7ff ffbb 	bl	81007e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100872:	4b0a      	ldr	r3, [pc, #40]	; (810089c <HAL_UART_MspInit+0x68>)
 8100874:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100878:	4a08      	ldr	r2, [pc, #32]	; (810089c <HAL_UART_MspInit+0x68>)
 810087a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810087e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100882:	4b06      	ldr	r3, [pc, #24]	; (810089c <HAL_UART_MspInit+0x68>)
 8100884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810088c:	60bb      	str	r3, [r7, #8]
 810088e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8100890:	bf00      	nop
 8100892:	37c8      	adds	r7, #200	; 0xc8
 8100894:	46bd      	mov	sp, r7
 8100896:	bd80      	pop	{r7, pc}
 8100898:	40004800 	.word	0x40004800
 810089c:	58024400 	.word	0x58024400

081008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81008a0:	b480      	push	{r7}
 81008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81008a4:	e7fe      	b.n	81008a4 <NMI_Handler+0x4>

081008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81008a6:	b480      	push	{r7}
 81008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81008aa:	e7fe      	b.n	81008aa <HardFault_Handler+0x4>

081008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81008ac:	b480      	push	{r7}
 81008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81008b0:	e7fe      	b.n	81008b0 <MemManage_Handler+0x4>

081008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81008b2:	b480      	push	{r7}
 81008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81008b6:	e7fe      	b.n	81008b6 <BusFault_Handler+0x4>

081008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81008b8:	b480      	push	{r7}
 81008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81008bc:	e7fe      	b.n	81008bc <UsageFault_Handler+0x4>

081008be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81008be:	b480      	push	{r7}
 81008c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81008c2:	bf00      	nop
 81008c4:	46bd      	mov	sp, r7
 81008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008ca:	4770      	bx	lr

081008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81008cc:	b480      	push	{r7}
 81008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81008d0:	bf00      	nop
 81008d2:	46bd      	mov	sp, r7
 81008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008d8:	4770      	bx	lr

081008da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81008da:	b480      	push	{r7}
 81008dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81008de:	bf00      	nop
 81008e0:	46bd      	mov	sp, r7
 81008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008e6:	4770      	bx	lr

081008e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81008e8:	b580      	push	{r7, lr}
 81008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81008ec:	f000 f8c6 	bl	8100a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81008f0:	bf00      	nop
 81008f2:	bd80      	pop	{r7, pc}

081008f4 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81008f4:	b580      	push	{r7, lr}
 81008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81008f8:	f000 fc1e 	bl	8101138 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81008fc:	bf00      	nop
 81008fe:	bd80      	pop	{r7, pc}

08100900 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100938 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100904:	f7ff fe64 	bl	81005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100908:	480c      	ldr	r0, [pc, #48]	; (810093c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810090a:	490d      	ldr	r1, [pc, #52]	; (8100940 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810090c:	4a0d      	ldr	r2, [pc, #52]	; (8100944 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100910:	e002      	b.n	8100918 <LoopCopyDataInit>

08100912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100916:	3304      	adds	r3, #4

08100918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810091c:	d3f9      	bcc.n	8100912 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810091e:	4a0a      	ldr	r2, [pc, #40]	; (8100948 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100920:	4c0a      	ldr	r4, [pc, #40]	; (810094c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100924:	e001      	b.n	810092a <LoopFillZerobss>

08100926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100928:	3204      	adds	r2, #4

0810092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810092c:	d3fb      	bcc.n	8100926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810092e:	f003 fadd 	bl	8103eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100932:	f7ff fe79 	bl	8100628 <main>
  bx  lr
 8100936:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100938:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810093c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100940:	1000001c 	.word	0x1000001c
  ldr r2, =_sidata
 8100944:	08103fa4 	.word	0x08103fa4
  ldr r2, =_sbss
 8100948:	1000001c 	.word	0x1000001c
  ldr r4, =_ebss
 810094c:	100000d0 	.word	0x100000d0

08100950 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100950:	e7fe      	b.n	8100950 <ADC3_IRQHandler>
	...

08100954 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100954:	b580      	push	{r7, lr}
 8100956:	b082      	sub	sp, #8
 8100958:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810095a:	4b28      	ldr	r3, [pc, #160]	; (81009fc <HAL_Init+0xa8>)
 810095c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100960:	4a26      	ldr	r2, [pc, #152]	; (81009fc <HAL_Init+0xa8>)
 8100962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100966:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810096a:	4b24      	ldr	r3, [pc, #144]	; (81009fc <HAL_Init+0xa8>)
 810096c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100974:	603b      	str	r3, [r7, #0]
 8100976:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100978:	4b21      	ldr	r3, [pc, #132]	; (8100a00 <HAL_Init+0xac>)
 810097a:	681b      	ldr	r3, [r3, #0]
 810097c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100980:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100984:	4a1e      	ldr	r2, [pc, #120]	; (8100a00 <HAL_Init+0xac>)
 8100986:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810098a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810098c:	4b1c      	ldr	r3, [pc, #112]	; (8100a00 <HAL_Init+0xac>)
 810098e:	681b      	ldr	r3, [r3, #0]
 8100990:	4a1b      	ldr	r2, [pc, #108]	; (8100a00 <HAL_Init+0xac>)
 8100992:	f043 0301 	orr.w	r3, r3, #1
 8100996:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100998:	2003      	movs	r0, #3
 810099a:	f000 f983 	bl	8100ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810099e:	f000 fc6d 	bl	810127c <HAL_RCC_GetSysClockFreq>
 81009a2:	4602      	mov	r2, r0
 81009a4:	4b15      	ldr	r3, [pc, #84]	; (81009fc <HAL_Init+0xa8>)
 81009a6:	699b      	ldr	r3, [r3, #24]
 81009a8:	0a1b      	lsrs	r3, r3, #8
 81009aa:	f003 030f 	and.w	r3, r3, #15
 81009ae:	4915      	ldr	r1, [pc, #84]	; (8100a04 <HAL_Init+0xb0>)
 81009b0:	5ccb      	ldrb	r3, [r1, r3]
 81009b2:	f003 031f 	and.w	r3, r3, #31
 81009b6:	fa22 f303 	lsr.w	r3, r2, r3
 81009ba:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81009bc:	4b0f      	ldr	r3, [pc, #60]	; (81009fc <HAL_Init+0xa8>)
 81009be:	699b      	ldr	r3, [r3, #24]
 81009c0:	f003 030f 	and.w	r3, r3, #15
 81009c4:	4a0f      	ldr	r2, [pc, #60]	; (8100a04 <HAL_Init+0xb0>)
 81009c6:	5cd3      	ldrb	r3, [r2, r3]
 81009c8:	f003 031f 	and.w	r3, r3, #31
 81009cc:	687a      	ldr	r2, [r7, #4]
 81009ce:	fa22 f303 	lsr.w	r3, r2, r3
 81009d2:	4a0d      	ldr	r2, [pc, #52]	; (8100a08 <HAL_Init+0xb4>)
 81009d4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81009d6:	4b0c      	ldr	r3, [pc, #48]	; (8100a08 <HAL_Init+0xb4>)
 81009d8:	681b      	ldr	r3, [r3, #0]
 81009da:	4a0c      	ldr	r2, [pc, #48]	; (8100a0c <HAL_Init+0xb8>)
 81009dc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81009de:	200f      	movs	r0, #15
 81009e0:	f000 f816 	bl	8100a10 <HAL_InitTick>
 81009e4:	4603      	mov	r3, r0
 81009e6:	2b00      	cmp	r3, #0
 81009e8:	d001      	beq.n	81009ee <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81009ea:	2301      	movs	r3, #1
 81009ec:	e002      	b.n	81009f4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81009ee:	f7ff ff01 	bl	81007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81009f2:	2300      	movs	r3, #0
}
 81009f4:	4618      	mov	r0, r3
 81009f6:	3708      	adds	r7, #8
 81009f8:	46bd      	mov	sp, r7
 81009fa:	bd80      	pop	{r7, pc}
 81009fc:	58024400 	.word	0x58024400
 8100a00:	40024400 	.word	0x40024400
 8100a04:	08103f5c 	.word	0x08103f5c
 8100a08:	10000004 	.word	0x10000004
 8100a0c:	10000000 	.word	0x10000000

08100a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a10:	b580      	push	{r7, lr}
 8100a12:	b082      	sub	sp, #8
 8100a14:	af00      	add	r7, sp, #0
 8100a16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100a18:	4b15      	ldr	r3, [pc, #84]	; (8100a70 <HAL_InitTick+0x60>)
 8100a1a:	781b      	ldrb	r3, [r3, #0]
 8100a1c:	2b00      	cmp	r3, #0
 8100a1e:	d101      	bne.n	8100a24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100a20:	2301      	movs	r3, #1
 8100a22:	e021      	b.n	8100a68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100a24:	4b13      	ldr	r3, [pc, #76]	; (8100a74 <HAL_InitTick+0x64>)
 8100a26:	681a      	ldr	r2, [r3, #0]
 8100a28:	4b11      	ldr	r3, [pc, #68]	; (8100a70 <HAL_InitTick+0x60>)
 8100a2a:	781b      	ldrb	r3, [r3, #0]
 8100a2c:	4619      	mov	r1, r3
 8100a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a3a:	4618      	mov	r0, r3
 8100a3c:	f000 f965 	bl	8100d0a <HAL_SYSTICK_Config>
 8100a40:	4603      	mov	r3, r0
 8100a42:	2b00      	cmp	r3, #0
 8100a44:	d001      	beq.n	8100a4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100a46:	2301      	movs	r3, #1
 8100a48:	e00e      	b.n	8100a68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100a4a:	687b      	ldr	r3, [r7, #4]
 8100a4c:	2b0f      	cmp	r3, #15
 8100a4e:	d80a      	bhi.n	8100a66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100a50:	2200      	movs	r2, #0
 8100a52:	6879      	ldr	r1, [r7, #4]
 8100a54:	f04f 30ff 	mov.w	r0, #4294967295
 8100a58:	f000 f92f 	bl	8100cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100a5c:	4a06      	ldr	r2, [pc, #24]	; (8100a78 <HAL_InitTick+0x68>)
 8100a5e:	687b      	ldr	r3, [r7, #4]
 8100a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100a62:	2300      	movs	r3, #0
 8100a64:	e000      	b.n	8100a68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100a66:	2301      	movs	r3, #1
}
 8100a68:	4618      	mov	r0, r3
 8100a6a:	3708      	adds	r7, #8
 8100a6c:	46bd      	mov	sp, r7
 8100a6e:	bd80      	pop	{r7, pc}
 8100a70:	10000018 	.word	0x10000018
 8100a74:	10000000 	.word	0x10000000
 8100a78:	10000014 	.word	0x10000014

08100a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100a7c:	b480      	push	{r7}
 8100a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100a80:	4b06      	ldr	r3, [pc, #24]	; (8100a9c <HAL_IncTick+0x20>)
 8100a82:	781b      	ldrb	r3, [r3, #0]
 8100a84:	461a      	mov	r2, r3
 8100a86:	4b06      	ldr	r3, [pc, #24]	; (8100aa0 <HAL_IncTick+0x24>)
 8100a88:	681b      	ldr	r3, [r3, #0]
 8100a8a:	4413      	add	r3, r2
 8100a8c:	4a04      	ldr	r2, [pc, #16]	; (8100aa0 <HAL_IncTick+0x24>)
 8100a8e:	6013      	str	r3, [r2, #0]
}
 8100a90:	bf00      	nop
 8100a92:	46bd      	mov	sp, r7
 8100a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a98:	4770      	bx	lr
 8100a9a:	bf00      	nop
 8100a9c:	10000018 	.word	0x10000018
 8100aa0:	100000cc 	.word	0x100000cc

08100aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100aa4:	b480      	push	{r7}
 8100aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8100aa8:	4b03      	ldr	r3, [pc, #12]	; (8100ab8 <HAL_GetTick+0x14>)
 8100aaa:	681b      	ldr	r3, [r3, #0]
}
 8100aac:	4618      	mov	r0, r3
 8100aae:	46bd      	mov	sp, r7
 8100ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ab4:	4770      	bx	lr
 8100ab6:	bf00      	nop
 8100ab8:	100000cc 	.word	0x100000cc

08100abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100abc:	b580      	push	{r7, lr}
 8100abe:	b084      	sub	sp, #16
 8100ac0:	af00      	add	r7, sp, #0
 8100ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100ac4:	f7ff ffee 	bl	8100aa4 <HAL_GetTick>
 8100ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100aca:	687b      	ldr	r3, [r7, #4]
 8100acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100ace:	68fb      	ldr	r3, [r7, #12]
 8100ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100ad4:	d005      	beq.n	8100ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100ad6:	4b0a      	ldr	r3, [pc, #40]	; (8100b00 <HAL_Delay+0x44>)
 8100ad8:	781b      	ldrb	r3, [r3, #0]
 8100ada:	461a      	mov	r2, r3
 8100adc:	68fb      	ldr	r3, [r7, #12]
 8100ade:	4413      	add	r3, r2
 8100ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100ae2:	bf00      	nop
 8100ae4:	f7ff ffde 	bl	8100aa4 <HAL_GetTick>
 8100ae8:	4602      	mov	r2, r0
 8100aea:	68bb      	ldr	r3, [r7, #8]
 8100aec:	1ad3      	subs	r3, r2, r3
 8100aee:	68fa      	ldr	r2, [r7, #12]
 8100af0:	429a      	cmp	r2, r3
 8100af2:	d8f7      	bhi.n	8100ae4 <HAL_Delay+0x28>
  {
  }
}
 8100af4:	bf00      	nop
 8100af6:	bf00      	nop
 8100af8:	3710      	adds	r7, #16
 8100afa:	46bd      	mov	sp, r7
 8100afc:	bd80      	pop	{r7, pc}
 8100afe:	bf00      	nop
 8100b00:	10000018 	.word	0x10000018

08100b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b04:	b480      	push	{r7}
 8100b06:	b085      	sub	sp, #20
 8100b08:	af00      	add	r7, sp, #0
 8100b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100b0c:	687b      	ldr	r3, [r7, #4]
 8100b0e:	f003 0307 	and.w	r3, r3, #7
 8100b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100b14:	4b0c      	ldr	r3, [pc, #48]	; (8100b48 <__NVIC_SetPriorityGrouping+0x44>)
 8100b16:	68db      	ldr	r3, [r3, #12]
 8100b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100b1a:	68ba      	ldr	r2, [r7, #8]
 8100b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100b20:	4013      	ands	r3, r2
 8100b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100b24:	68fb      	ldr	r3, [r7, #12]
 8100b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100b28:	68bb      	ldr	r3, [r7, #8]
 8100b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100b36:	4a04      	ldr	r2, [pc, #16]	; (8100b48 <__NVIC_SetPriorityGrouping+0x44>)
 8100b38:	68bb      	ldr	r3, [r7, #8]
 8100b3a:	60d3      	str	r3, [r2, #12]
}
 8100b3c:	bf00      	nop
 8100b3e:	3714      	adds	r7, #20
 8100b40:	46bd      	mov	sp, r7
 8100b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b46:	4770      	bx	lr
 8100b48:	e000ed00 	.word	0xe000ed00

08100b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100b4c:	b480      	push	{r7}
 8100b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100b50:	4b04      	ldr	r3, [pc, #16]	; (8100b64 <__NVIC_GetPriorityGrouping+0x18>)
 8100b52:	68db      	ldr	r3, [r3, #12]
 8100b54:	0a1b      	lsrs	r3, r3, #8
 8100b56:	f003 0307 	and.w	r3, r3, #7
}
 8100b5a:	4618      	mov	r0, r3
 8100b5c:	46bd      	mov	sp, r7
 8100b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b62:	4770      	bx	lr
 8100b64:	e000ed00 	.word	0xe000ed00

08100b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100b68:	b480      	push	{r7}
 8100b6a:	b083      	sub	sp, #12
 8100b6c:	af00      	add	r7, sp, #0
 8100b6e:	4603      	mov	r3, r0
 8100b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b76:	2b00      	cmp	r3, #0
 8100b78:	db0b      	blt.n	8100b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100b7a:	88fb      	ldrh	r3, [r7, #6]
 8100b7c:	f003 021f 	and.w	r2, r3, #31
 8100b80:	4907      	ldr	r1, [pc, #28]	; (8100ba0 <__NVIC_EnableIRQ+0x38>)
 8100b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b86:	095b      	lsrs	r3, r3, #5
 8100b88:	2001      	movs	r0, #1
 8100b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8100b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100b92:	bf00      	nop
 8100b94:	370c      	adds	r7, #12
 8100b96:	46bd      	mov	sp, r7
 8100b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b9c:	4770      	bx	lr
 8100b9e:	bf00      	nop
 8100ba0:	e000e100 	.word	0xe000e100

08100ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100ba4:	b480      	push	{r7}
 8100ba6:	b083      	sub	sp, #12
 8100ba8:	af00      	add	r7, sp, #0
 8100baa:	4603      	mov	r3, r0
 8100bac:	6039      	str	r1, [r7, #0]
 8100bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bb4:	2b00      	cmp	r3, #0
 8100bb6:	db0a      	blt.n	8100bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bb8:	683b      	ldr	r3, [r7, #0]
 8100bba:	b2da      	uxtb	r2, r3
 8100bbc:	490c      	ldr	r1, [pc, #48]	; (8100bf0 <__NVIC_SetPriority+0x4c>)
 8100bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bc2:	0112      	lsls	r2, r2, #4
 8100bc4:	b2d2      	uxtb	r2, r2
 8100bc6:	440b      	add	r3, r1
 8100bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100bcc:	e00a      	b.n	8100be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bce:	683b      	ldr	r3, [r7, #0]
 8100bd0:	b2da      	uxtb	r2, r3
 8100bd2:	4908      	ldr	r1, [pc, #32]	; (8100bf4 <__NVIC_SetPriority+0x50>)
 8100bd4:	88fb      	ldrh	r3, [r7, #6]
 8100bd6:	f003 030f 	and.w	r3, r3, #15
 8100bda:	3b04      	subs	r3, #4
 8100bdc:	0112      	lsls	r2, r2, #4
 8100bde:	b2d2      	uxtb	r2, r2
 8100be0:	440b      	add	r3, r1
 8100be2:	761a      	strb	r2, [r3, #24]
}
 8100be4:	bf00      	nop
 8100be6:	370c      	adds	r7, #12
 8100be8:	46bd      	mov	sp, r7
 8100bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bee:	4770      	bx	lr
 8100bf0:	e000e100 	.word	0xe000e100
 8100bf4:	e000ed00 	.word	0xe000ed00

08100bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100bf8:	b480      	push	{r7}
 8100bfa:	b089      	sub	sp, #36	; 0x24
 8100bfc:	af00      	add	r7, sp, #0
 8100bfe:	60f8      	str	r0, [r7, #12]
 8100c00:	60b9      	str	r1, [r7, #8]
 8100c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100c04:	68fb      	ldr	r3, [r7, #12]
 8100c06:	f003 0307 	and.w	r3, r3, #7
 8100c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100c0c:	69fb      	ldr	r3, [r7, #28]
 8100c0e:	f1c3 0307 	rsb	r3, r3, #7
 8100c12:	2b04      	cmp	r3, #4
 8100c14:	bf28      	it	cs
 8100c16:	2304      	movcs	r3, #4
 8100c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100c1a:	69fb      	ldr	r3, [r7, #28]
 8100c1c:	3304      	adds	r3, #4
 8100c1e:	2b06      	cmp	r3, #6
 8100c20:	d902      	bls.n	8100c28 <NVIC_EncodePriority+0x30>
 8100c22:	69fb      	ldr	r3, [r7, #28]
 8100c24:	3b03      	subs	r3, #3
 8100c26:	e000      	b.n	8100c2a <NVIC_EncodePriority+0x32>
 8100c28:	2300      	movs	r3, #0
 8100c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8100c30:	69bb      	ldr	r3, [r7, #24]
 8100c32:	fa02 f303 	lsl.w	r3, r2, r3
 8100c36:	43da      	mvns	r2, r3
 8100c38:	68bb      	ldr	r3, [r7, #8]
 8100c3a:	401a      	ands	r2, r3
 8100c3c:	697b      	ldr	r3, [r7, #20]
 8100c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c40:	f04f 31ff 	mov.w	r1, #4294967295
 8100c44:	697b      	ldr	r3, [r7, #20]
 8100c46:	fa01 f303 	lsl.w	r3, r1, r3
 8100c4a:	43d9      	mvns	r1, r3
 8100c4c:	687b      	ldr	r3, [r7, #4]
 8100c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c50:	4313      	orrs	r3, r2
         );
}
 8100c52:	4618      	mov	r0, r3
 8100c54:	3724      	adds	r7, #36	; 0x24
 8100c56:	46bd      	mov	sp, r7
 8100c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c5c:	4770      	bx	lr
	...

08100c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100c60:	b580      	push	{r7, lr}
 8100c62:	b082      	sub	sp, #8
 8100c64:	af00      	add	r7, sp, #0
 8100c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c68:	687b      	ldr	r3, [r7, #4]
 8100c6a:	3b01      	subs	r3, #1
 8100c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100c70:	d301      	bcc.n	8100c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100c72:	2301      	movs	r3, #1
 8100c74:	e00f      	b.n	8100c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c76:	4a0a      	ldr	r2, [pc, #40]	; (8100ca0 <SysTick_Config+0x40>)
 8100c78:	687b      	ldr	r3, [r7, #4]
 8100c7a:	3b01      	subs	r3, #1
 8100c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100c7e:	210f      	movs	r1, #15
 8100c80:	f04f 30ff 	mov.w	r0, #4294967295
 8100c84:	f7ff ff8e 	bl	8100ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100c88:	4b05      	ldr	r3, [pc, #20]	; (8100ca0 <SysTick_Config+0x40>)
 8100c8a:	2200      	movs	r2, #0
 8100c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100c8e:	4b04      	ldr	r3, [pc, #16]	; (8100ca0 <SysTick_Config+0x40>)
 8100c90:	2207      	movs	r2, #7
 8100c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100c94:	2300      	movs	r3, #0
}
 8100c96:	4618      	mov	r0, r3
 8100c98:	3708      	adds	r7, #8
 8100c9a:	46bd      	mov	sp, r7
 8100c9c:	bd80      	pop	{r7, pc}
 8100c9e:	bf00      	nop
 8100ca0:	e000e010 	.word	0xe000e010

08100ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ca4:	b580      	push	{r7, lr}
 8100ca6:	b082      	sub	sp, #8
 8100ca8:	af00      	add	r7, sp, #0
 8100caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100cac:	6878      	ldr	r0, [r7, #4]
 8100cae:	f7ff ff29 	bl	8100b04 <__NVIC_SetPriorityGrouping>
}
 8100cb2:	bf00      	nop
 8100cb4:	3708      	adds	r7, #8
 8100cb6:	46bd      	mov	sp, r7
 8100cb8:	bd80      	pop	{r7, pc}

08100cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100cba:	b580      	push	{r7, lr}
 8100cbc:	b086      	sub	sp, #24
 8100cbe:	af00      	add	r7, sp, #0
 8100cc0:	4603      	mov	r3, r0
 8100cc2:	60b9      	str	r1, [r7, #8]
 8100cc4:	607a      	str	r2, [r7, #4]
 8100cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100cc8:	f7ff ff40 	bl	8100b4c <__NVIC_GetPriorityGrouping>
 8100ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100cce:	687a      	ldr	r2, [r7, #4]
 8100cd0:	68b9      	ldr	r1, [r7, #8]
 8100cd2:	6978      	ldr	r0, [r7, #20]
 8100cd4:	f7ff ff90 	bl	8100bf8 <NVIC_EncodePriority>
 8100cd8:	4602      	mov	r2, r0
 8100cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100cde:	4611      	mov	r1, r2
 8100ce0:	4618      	mov	r0, r3
 8100ce2:	f7ff ff5f 	bl	8100ba4 <__NVIC_SetPriority>
}
 8100ce6:	bf00      	nop
 8100ce8:	3718      	adds	r7, #24
 8100cea:	46bd      	mov	sp, r7
 8100cec:	bd80      	pop	{r7, pc}

08100cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100cee:	b580      	push	{r7, lr}
 8100cf0:	b082      	sub	sp, #8
 8100cf2:	af00      	add	r7, sp, #0
 8100cf4:	4603      	mov	r3, r0
 8100cf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cfc:	4618      	mov	r0, r3
 8100cfe:	f7ff ff33 	bl	8100b68 <__NVIC_EnableIRQ>
}
 8100d02:	bf00      	nop
 8100d04:	3708      	adds	r7, #8
 8100d06:	46bd      	mov	sp, r7
 8100d08:	bd80      	pop	{r7, pc}

08100d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100d0a:	b580      	push	{r7, lr}
 8100d0c:	b082      	sub	sp, #8
 8100d0e:	af00      	add	r7, sp, #0
 8100d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100d12:	6878      	ldr	r0, [r7, #4]
 8100d14:	f7ff ffa4 	bl	8100c60 <SysTick_Config>
 8100d18:	4603      	mov	r3, r0
}
 8100d1a:	4618      	mov	r0, r3
 8100d1c:	3708      	adds	r7, #8
 8100d1e:	46bd      	mov	sp, r7
 8100d20:	bd80      	pop	{r7, pc}
	...

08100d24 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100d24:	b480      	push	{r7}
 8100d26:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100d28:	4b07      	ldr	r3, [pc, #28]	; (8100d48 <HAL_GetCurrentCPUID+0x24>)
 8100d2a:	681b      	ldr	r3, [r3, #0]
 8100d2c:	091b      	lsrs	r3, r3, #4
 8100d2e:	f003 030f 	and.w	r3, r3, #15
 8100d32:	2b07      	cmp	r3, #7
 8100d34:	d101      	bne.n	8100d3a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100d36:	2303      	movs	r3, #3
 8100d38:	e000      	b.n	8100d3c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100d3a:	2301      	movs	r3, #1
  }
}
 8100d3c:	4618      	mov	r0, r3
 8100d3e:	46bd      	mov	sp, r7
 8100d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d44:	4770      	bx	lr
 8100d46:	bf00      	nop
 8100d48:	e000ed00 	.word	0xe000ed00

08100d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100d4c:	b480      	push	{r7}
 8100d4e:	b089      	sub	sp, #36	; 0x24
 8100d50:	af00      	add	r7, sp, #0
 8100d52:	6078      	str	r0, [r7, #4]
 8100d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100d56:	2300      	movs	r3, #0
 8100d58:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100d5a:	4b89      	ldr	r3, [pc, #548]	; (8100f80 <HAL_GPIO_Init+0x234>)
 8100d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100d5e:	e194      	b.n	810108a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100d60:	683b      	ldr	r3, [r7, #0]
 8100d62:	681a      	ldr	r2, [r3, #0]
 8100d64:	2101      	movs	r1, #1
 8100d66:	69fb      	ldr	r3, [r7, #28]
 8100d68:	fa01 f303 	lsl.w	r3, r1, r3
 8100d6c:	4013      	ands	r3, r2
 8100d6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100d70:	693b      	ldr	r3, [r7, #16]
 8100d72:	2b00      	cmp	r3, #0
 8100d74:	f000 8186 	beq.w	8101084 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100d78:	683b      	ldr	r3, [r7, #0]
 8100d7a:	685b      	ldr	r3, [r3, #4]
 8100d7c:	f003 0303 	and.w	r3, r3, #3
 8100d80:	2b01      	cmp	r3, #1
 8100d82:	d005      	beq.n	8100d90 <HAL_GPIO_Init+0x44>
 8100d84:	683b      	ldr	r3, [r7, #0]
 8100d86:	685b      	ldr	r3, [r3, #4]
 8100d88:	f003 0303 	and.w	r3, r3, #3
 8100d8c:	2b02      	cmp	r3, #2
 8100d8e:	d130      	bne.n	8100df2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100d90:	687b      	ldr	r3, [r7, #4]
 8100d92:	689b      	ldr	r3, [r3, #8]
 8100d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100d96:	69fb      	ldr	r3, [r7, #28]
 8100d98:	005b      	lsls	r3, r3, #1
 8100d9a:	2203      	movs	r2, #3
 8100d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8100da0:	43db      	mvns	r3, r3
 8100da2:	69ba      	ldr	r2, [r7, #24]
 8100da4:	4013      	ands	r3, r2
 8100da6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100da8:	683b      	ldr	r3, [r7, #0]
 8100daa:	68da      	ldr	r2, [r3, #12]
 8100dac:	69fb      	ldr	r3, [r7, #28]
 8100dae:	005b      	lsls	r3, r3, #1
 8100db0:	fa02 f303 	lsl.w	r3, r2, r3
 8100db4:	69ba      	ldr	r2, [r7, #24]
 8100db6:	4313      	orrs	r3, r2
 8100db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100dba:	687b      	ldr	r3, [r7, #4]
 8100dbc:	69ba      	ldr	r2, [r7, #24]
 8100dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100dc0:	687b      	ldr	r3, [r7, #4]
 8100dc2:	685b      	ldr	r3, [r3, #4]
 8100dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100dc6:	2201      	movs	r2, #1
 8100dc8:	69fb      	ldr	r3, [r7, #28]
 8100dca:	fa02 f303 	lsl.w	r3, r2, r3
 8100dce:	43db      	mvns	r3, r3
 8100dd0:	69ba      	ldr	r2, [r7, #24]
 8100dd2:	4013      	ands	r3, r2
 8100dd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100dd6:	683b      	ldr	r3, [r7, #0]
 8100dd8:	685b      	ldr	r3, [r3, #4]
 8100dda:	091b      	lsrs	r3, r3, #4
 8100ddc:	f003 0201 	and.w	r2, r3, #1
 8100de0:	69fb      	ldr	r3, [r7, #28]
 8100de2:	fa02 f303 	lsl.w	r3, r2, r3
 8100de6:	69ba      	ldr	r2, [r7, #24]
 8100de8:	4313      	orrs	r3, r2
 8100dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100dec:	687b      	ldr	r3, [r7, #4]
 8100dee:	69ba      	ldr	r2, [r7, #24]
 8100df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100df2:	683b      	ldr	r3, [r7, #0]
 8100df4:	685b      	ldr	r3, [r3, #4]
 8100df6:	f003 0303 	and.w	r3, r3, #3
 8100dfa:	2b03      	cmp	r3, #3
 8100dfc:	d017      	beq.n	8100e2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100dfe:	687b      	ldr	r3, [r7, #4]
 8100e00:	68db      	ldr	r3, [r3, #12]
 8100e02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100e04:	69fb      	ldr	r3, [r7, #28]
 8100e06:	005b      	lsls	r3, r3, #1
 8100e08:	2203      	movs	r2, #3
 8100e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e0e:	43db      	mvns	r3, r3
 8100e10:	69ba      	ldr	r2, [r7, #24]
 8100e12:	4013      	ands	r3, r2
 8100e14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100e16:	683b      	ldr	r3, [r7, #0]
 8100e18:	689a      	ldr	r2, [r3, #8]
 8100e1a:	69fb      	ldr	r3, [r7, #28]
 8100e1c:	005b      	lsls	r3, r3, #1
 8100e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e22:	69ba      	ldr	r2, [r7, #24]
 8100e24:	4313      	orrs	r3, r2
 8100e26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100e28:	687b      	ldr	r3, [r7, #4]
 8100e2a:	69ba      	ldr	r2, [r7, #24]
 8100e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100e2e:	683b      	ldr	r3, [r7, #0]
 8100e30:	685b      	ldr	r3, [r3, #4]
 8100e32:	f003 0303 	and.w	r3, r3, #3
 8100e36:	2b02      	cmp	r3, #2
 8100e38:	d123      	bne.n	8100e82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100e3a:	69fb      	ldr	r3, [r7, #28]
 8100e3c:	08da      	lsrs	r2, r3, #3
 8100e3e:	687b      	ldr	r3, [r7, #4]
 8100e40:	3208      	adds	r2, #8
 8100e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100e48:	69fb      	ldr	r3, [r7, #28]
 8100e4a:	f003 0307 	and.w	r3, r3, #7
 8100e4e:	009b      	lsls	r3, r3, #2
 8100e50:	220f      	movs	r2, #15
 8100e52:	fa02 f303 	lsl.w	r3, r2, r3
 8100e56:	43db      	mvns	r3, r3
 8100e58:	69ba      	ldr	r2, [r7, #24]
 8100e5a:	4013      	ands	r3, r2
 8100e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100e5e:	683b      	ldr	r3, [r7, #0]
 8100e60:	691a      	ldr	r2, [r3, #16]
 8100e62:	69fb      	ldr	r3, [r7, #28]
 8100e64:	f003 0307 	and.w	r3, r3, #7
 8100e68:	009b      	lsls	r3, r3, #2
 8100e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e6e:	69ba      	ldr	r2, [r7, #24]
 8100e70:	4313      	orrs	r3, r2
 8100e72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100e74:	69fb      	ldr	r3, [r7, #28]
 8100e76:	08da      	lsrs	r2, r3, #3
 8100e78:	687b      	ldr	r3, [r7, #4]
 8100e7a:	3208      	adds	r2, #8
 8100e7c:	69b9      	ldr	r1, [r7, #24]
 8100e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100e82:	687b      	ldr	r3, [r7, #4]
 8100e84:	681b      	ldr	r3, [r3, #0]
 8100e86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100e88:	69fb      	ldr	r3, [r7, #28]
 8100e8a:	005b      	lsls	r3, r3, #1
 8100e8c:	2203      	movs	r2, #3
 8100e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e92:	43db      	mvns	r3, r3
 8100e94:	69ba      	ldr	r2, [r7, #24]
 8100e96:	4013      	ands	r3, r2
 8100e98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100e9a:	683b      	ldr	r3, [r7, #0]
 8100e9c:	685b      	ldr	r3, [r3, #4]
 8100e9e:	f003 0203 	and.w	r2, r3, #3
 8100ea2:	69fb      	ldr	r3, [r7, #28]
 8100ea4:	005b      	lsls	r3, r3, #1
 8100ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8100eaa:	69ba      	ldr	r2, [r7, #24]
 8100eac:	4313      	orrs	r3, r2
 8100eae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100eb0:	687b      	ldr	r3, [r7, #4]
 8100eb2:	69ba      	ldr	r2, [r7, #24]
 8100eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100eb6:	683b      	ldr	r3, [r7, #0]
 8100eb8:	685b      	ldr	r3, [r3, #4]
 8100eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100ebe:	2b00      	cmp	r3, #0
 8100ec0:	f000 80e0 	beq.w	8101084 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100ec4:	4b2f      	ldr	r3, [pc, #188]	; (8100f84 <HAL_GPIO_Init+0x238>)
 8100ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100eca:	4a2e      	ldr	r2, [pc, #184]	; (8100f84 <HAL_GPIO_Init+0x238>)
 8100ecc:	f043 0302 	orr.w	r3, r3, #2
 8100ed0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100ed4:	4b2b      	ldr	r3, [pc, #172]	; (8100f84 <HAL_GPIO_Init+0x238>)
 8100ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100eda:	f003 0302 	and.w	r3, r3, #2
 8100ede:	60fb      	str	r3, [r7, #12]
 8100ee0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100ee2:	4a29      	ldr	r2, [pc, #164]	; (8100f88 <HAL_GPIO_Init+0x23c>)
 8100ee4:	69fb      	ldr	r3, [r7, #28]
 8100ee6:	089b      	lsrs	r3, r3, #2
 8100ee8:	3302      	adds	r3, #2
 8100eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100ef0:	69fb      	ldr	r3, [r7, #28]
 8100ef2:	f003 0303 	and.w	r3, r3, #3
 8100ef6:	009b      	lsls	r3, r3, #2
 8100ef8:	220f      	movs	r2, #15
 8100efa:	fa02 f303 	lsl.w	r3, r2, r3
 8100efe:	43db      	mvns	r3, r3
 8100f00:	69ba      	ldr	r2, [r7, #24]
 8100f02:	4013      	ands	r3, r2
 8100f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100f06:	687b      	ldr	r3, [r7, #4]
 8100f08:	4a20      	ldr	r2, [pc, #128]	; (8100f8c <HAL_GPIO_Init+0x240>)
 8100f0a:	4293      	cmp	r3, r2
 8100f0c:	d052      	beq.n	8100fb4 <HAL_GPIO_Init+0x268>
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	4a1f      	ldr	r2, [pc, #124]	; (8100f90 <HAL_GPIO_Init+0x244>)
 8100f12:	4293      	cmp	r3, r2
 8100f14:	d031      	beq.n	8100f7a <HAL_GPIO_Init+0x22e>
 8100f16:	687b      	ldr	r3, [r7, #4]
 8100f18:	4a1e      	ldr	r2, [pc, #120]	; (8100f94 <HAL_GPIO_Init+0x248>)
 8100f1a:	4293      	cmp	r3, r2
 8100f1c:	d02b      	beq.n	8100f76 <HAL_GPIO_Init+0x22a>
 8100f1e:	687b      	ldr	r3, [r7, #4]
 8100f20:	4a1d      	ldr	r2, [pc, #116]	; (8100f98 <HAL_GPIO_Init+0x24c>)
 8100f22:	4293      	cmp	r3, r2
 8100f24:	d025      	beq.n	8100f72 <HAL_GPIO_Init+0x226>
 8100f26:	687b      	ldr	r3, [r7, #4]
 8100f28:	4a1c      	ldr	r2, [pc, #112]	; (8100f9c <HAL_GPIO_Init+0x250>)
 8100f2a:	4293      	cmp	r3, r2
 8100f2c:	d01f      	beq.n	8100f6e <HAL_GPIO_Init+0x222>
 8100f2e:	687b      	ldr	r3, [r7, #4]
 8100f30:	4a1b      	ldr	r2, [pc, #108]	; (8100fa0 <HAL_GPIO_Init+0x254>)
 8100f32:	4293      	cmp	r3, r2
 8100f34:	d019      	beq.n	8100f6a <HAL_GPIO_Init+0x21e>
 8100f36:	687b      	ldr	r3, [r7, #4]
 8100f38:	4a1a      	ldr	r2, [pc, #104]	; (8100fa4 <HAL_GPIO_Init+0x258>)
 8100f3a:	4293      	cmp	r3, r2
 8100f3c:	d013      	beq.n	8100f66 <HAL_GPIO_Init+0x21a>
 8100f3e:	687b      	ldr	r3, [r7, #4]
 8100f40:	4a19      	ldr	r2, [pc, #100]	; (8100fa8 <HAL_GPIO_Init+0x25c>)
 8100f42:	4293      	cmp	r3, r2
 8100f44:	d00d      	beq.n	8100f62 <HAL_GPIO_Init+0x216>
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	4a18      	ldr	r2, [pc, #96]	; (8100fac <HAL_GPIO_Init+0x260>)
 8100f4a:	4293      	cmp	r3, r2
 8100f4c:	d007      	beq.n	8100f5e <HAL_GPIO_Init+0x212>
 8100f4e:	687b      	ldr	r3, [r7, #4]
 8100f50:	4a17      	ldr	r2, [pc, #92]	; (8100fb0 <HAL_GPIO_Init+0x264>)
 8100f52:	4293      	cmp	r3, r2
 8100f54:	d101      	bne.n	8100f5a <HAL_GPIO_Init+0x20e>
 8100f56:	2309      	movs	r3, #9
 8100f58:	e02d      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f5a:	230a      	movs	r3, #10
 8100f5c:	e02b      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f5e:	2308      	movs	r3, #8
 8100f60:	e029      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f62:	2307      	movs	r3, #7
 8100f64:	e027      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f66:	2306      	movs	r3, #6
 8100f68:	e025      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f6a:	2305      	movs	r3, #5
 8100f6c:	e023      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f6e:	2304      	movs	r3, #4
 8100f70:	e021      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f72:	2303      	movs	r3, #3
 8100f74:	e01f      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f76:	2302      	movs	r3, #2
 8100f78:	e01d      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f7a:	2301      	movs	r3, #1
 8100f7c:	e01b      	b.n	8100fb6 <HAL_GPIO_Init+0x26a>
 8100f7e:	bf00      	nop
 8100f80:	580000c0 	.word	0x580000c0
 8100f84:	58024400 	.word	0x58024400
 8100f88:	58000400 	.word	0x58000400
 8100f8c:	58020000 	.word	0x58020000
 8100f90:	58020400 	.word	0x58020400
 8100f94:	58020800 	.word	0x58020800
 8100f98:	58020c00 	.word	0x58020c00
 8100f9c:	58021000 	.word	0x58021000
 8100fa0:	58021400 	.word	0x58021400
 8100fa4:	58021800 	.word	0x58021800
 8100fa8:	58021c00 	.word	0x58021c00
 8100fac:	58022000 	.word	0x58022000
 8100fb0:	58022400 	.word	0x58022400
 8100fb4:	2300      	movs	r3, #0
 8100fb6:	69fa      	ldr	r2, [r7, #28]
 8100fb8:	f002 0203 	and.w	r2, r2, #3
 8100fbc:	0092      	lsls	r2, r2, #2
 8100fbe:	4093      	lsls	r3, r2
 8100fc0:	69ba      	ldr	r2, [r7, #24]
 8100fc2:	4313      	orrs	r3, r2
 8100fc4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100fc6:	4938      	ldr	r1, [pc, #224]	; (81010a8 <HAL_GPIO_Init+0x35c>)
 8100fc8:	69fb      	ldr	r3, [r7, #28]
 8100fca:	089b      	lsrs	r3, r3, #2
 8100fcc:	3302      	adds	r3, #2
 8100fce:	69ba      	ldr	r2, [r7, #24]
 8100fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100fd8:	681b      	ldr	r3, [r3, #0]
 8100fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100fdc:	693b      	ldr	r3, [r7, #16]
 8100fde:	43db      	mvns	r3, r3
 8100fe0:	69ba      	ldr	r2, [r7, #24]
 8100fe2:	4013      	ands	r3, r2
 8100fe4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100fe6:	683b      	ldr	r3, [r7, #0]
 8100fe8:	685b      	ldr	r3, [r3, #4]
 8100fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100fee:	2b00      	cmp	r3, #0
 8100ff0:	d003      	beq.n	8100ffa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100ff2:	69ba      	ldr	r2, [r7, #24]
 8100ff4:	693b      	ldr	r3, [r7, #16]
 8100ff6:	4313      	orrs	r3, r2
 8100ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100ffe:	69bb      	ldr	r3, [r7, #24]
 8101000:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101006:	685b      	ldr	r3, [r3, #4]
 8101008:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810100a:	693b      	ldr	r3, [r7, #16]
 810100c:	43db      	mvns	r3, r3
 810100e:	69ba      	ldr	r2, [r7, #24]
 8101010:	4013      	ands	r3, r2
 8101012:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101014:	683b      	ldr	r3, [r7, #0]
 8101016:	685b      	ldr	r3, [r3, #4]
 8101018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810101c:	2b00      	cmp	r3, #0
 810101e:	d003      	beq.n	8101028 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101020:	69ba      	ldr	r2, [r7, #24]
 8101022:	693b      	ldr	r3, [r7, #16]
 8101024:	4313      	orrs	r3, r2
 8101026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101028:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810102c:	69bb      	ldr	r3, [r7, #24]
 810102e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101030:	697b      	ldr	r3, [r7, #20]
 8101032:	685b      	ldr	r3, [r3, #4]
 8101034:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101036:	693b      	ldr	r3, [r7, #16]
 8101038:	43db      	mvns	r3, r3
 810103a:	69ba      	ldr	r2, [r7, #24]
 810103c:	4013      	ands	r3, r2
 810103e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101040:	683b      	ldr	r3, [r7, #0]
 8101042:	685b      	ldr	r3, [r3, #4]
 8101044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101048:	2b00      	cmp	r3, #0
 810104a:	d003      	beq.n	8101054 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810104c:	69ba      	ldr	r2, [r7, #24]
 810104e:	693b      	ldr	r3, [r7, #16]
 8101050:	4313      	orrs	r3, r2
 8101052:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101054:	697b      	ldr	r3, [r7, #20]
 8101056:	69ba      	ldr	r2, [r7, #24]
 8101058:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810105a:	697b      	ldr	r3, [r7, #20]
 810105c:	681b      	ldr	r3, [r3, #0]
 810105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101060:	693b      	ldr	r3, [r7, #16]
 8101062:	43db      	mvns	r3, r3
 8101064:	69ba      	ldr	r2, [r7, #24]
 8101066:	4013      	ands	r3, r2
 8101068:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810106a:	683b      	ldr	r3, [r7, #0]
 810106c:	685b      	ldr	r3, [r3, #4]
 810106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101072:	2b00      	cmp	r3, #0
 8101074:	d003      	beq.n	810107e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101076:	69ba      	ldr	r2, [r7, #24]
 8101078:	693b      	ldr	r3, [r7, #16]
 810107a:	4313      	orrs	r3, r2
 810107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810107e:	697b      	ldr	r3, [r7, #20]
 8101080:	69ba      	ldr	r2, [r7, #24]
 8101082:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101084:	69fb      	ldr	r3, [r7, #28]
 8101086:	3301      	adds	r3, #1
 8101088:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810108a:	683b      	ldr	r3, [r7, #0]
 810108c:	681a      	ldr	r2, [r3, #0]
 810108e:	69fb      	ldr	r3, [r7, #28]
 8101090:	fa22 f303 	lsr.w	r3, r2, r3
 8101094:	2b00      	cmp	r3, #0
 8101096:	f47f ae63 	bne.w	8100d60 <HAL_GPIO_Init+0x14>
  }
}
 810109a:	bf00      	nop
 810109c:	bf00      	nop
 810109e:	3724      	adds	r7, #36	; 0x24
 81010a0:	46bd      	mov	sp, r7
 81010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010a6:	4770      	bx	lr
 81010a8:	58000400 	.word	0x58000400

081010ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81010ac:	b480      	push	{r7}
 81010ae:	b083      	sub	sp, #12
 81010b0:	af00      	add	r7, sp, #0
 81010b2:	6078      	str	r0, [r7, #4]
 81010b4:	460b      	mov	r3, r1
 81010b6:	807b      	strh	r3, [r7, #2]
 81010b8:	4613      	mov	r3, r2
 81010ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81010bc:	787b      	ldrb	r3, [r7, #1]
 81010be:	2b00      	cmp	r3, #0
 81010c0:	d003      	beq.n	81010ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81010c2:	887a      	ldrh	r2, [r7, #2]
 81010c4:	687b      	ldr	r3, [r7, #4]
 81010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81010c8:	e003      	b.n	81010d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81010ca:	887b      	ldrh	r3, [r7, #2]
 81010cc:	041a      	lsls	r2, r3, #16
 81010ce:	687b      	ldr	r3, [r7, #4]
 81010d0:	619a      	str	r2, [r3, #24]
}
 81010d2:	bf00      	nop
 81010d4:	370c      	adds	r7, #12
 81010d6:	46bd      	mov	sp, r7
 81010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010dc:	4770      	bx	lr

081010de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81010de:	b480      	push	{r7}
 81010e0:	b085      	sub	sp, #20
 81010e2:	af00      	add	r7, sp, #0
 81010e4:	6078      	str	r0, [r7, #4]
 81010e6:	460b      	mov	r3, r1
 81010e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81010ea:	687b      	ldr	r3, [r7, #4]
 81010ec:	695b      	ldr	r3, [r3, #20]
 81010ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81010f0:	887a      	ldrh	r2, [r7, #2]
 81010f2:	68fb      	ldr	r3, [r7, #12]
 81010f4:	4013      	ands	r3, r2
 81010f6:	041a      	lsls	r2, r3, #16
 81010f8:	68fb      	ldr	r3, [r7, #12]
 81010fa:	43d9      	mvns	r1, r3
 81010fc:	887b      	ldrh	r3, [r7, #2]
 81010fe:	400b      	ands	r3, r1
 8101100:	431a      	orrs	r2, r3
 8101102:	687b      	ldr	r3, [r7, #4]
 8101104:	619a      	str	r2, [r3, #24]
}
 8101106:	bf00      	nop
 8101108:	3714      	adds	r7, #20
 810110a:	46bd      	mov	sp, r7
 810110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101110:	4770      	bx	lr
	...

08101114 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101114:	b480      	push	{r7}
 8101116:	b083      	sub	sp, #12
 8101118:	af00      	add	r7, sp, #0
 810111a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810111c:	4b05      	ldr	r3, [pc, #20]	; (8101134 <HAL_HSEM_ActivateNotification+0x20>)
 810111e:	681a      	ldr	r2, [r3, #0]
 8101120:	4904      	ldr	r1, [pc, #16]	; (8101134 <HAL_HSEM_ActivateNotification+0x20>)
 8101122:	687b      	ldr	r3, [r7, #4]
 8101124:	4313      	orrs	r3, r2
 8101126:	600b      	str	r3, [r1, #0]
#endif
}
 8101128:	bf00      	nop
 810112a:	370c      	adds	r7, #12
 810112c:	46bd      	mov	sp, r7
 810112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101132:	4770      	bx	lr
 8101134:	58026510 	.word	0x58026510

08101138 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8101138:	b580      	push	{r7, lr}
 810113a:	b082      	sub	sp, #8
 810113c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810113e:	4b0a      	ldr	r3, [pc, #40]	; (8101168 <HAL_HSEM_IRQHandler+0x30>)
 8101140:	68db      	ldr	r3, [r3, #12]
 8101142:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8101144:	4b08      	ldr	r3, [pc, #32]	; (8101168 <HAL_HSEM_IRQHandler+0x30>)
 8101146:	681a      	ldr	r2, [r3, #0]
 8101148:	687b      	ldr	r3, [r7, #4]
 810114a:	43db      	mvns	r3, r3
 810114c:	4906      	ldr	r1, [pc, #24]	; (8101168 <HAL_HSEM_IRQHandler+0x30>)
 810114e:	4013      	ands	r3, r2
 8101150:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8101152:	4a05      	ldr	r2, [pc, #20]	; (8101168 <HAL_HSEM_IRQHandler+0x30>)
 8101154:	687b      	ldr	r3, [r7, #4]
 8101156:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8101158:	6878      	ldr	r0, [r7, #4]
 810115a:	f7ff fa55 	bl	8100608 <HAL_HSEM_FreeCallback>
}
 810115e:	bf00      	nop
 8101160:	3708      	adds	r7, #8
 8101162:	46bd      	mov	sp, r7
 8101164:	bd80      	pop	{r7, pc}
 8101166:	bf00      	nop
 8101168:	58026510 	.word	0x58026510

0810116c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810116c:	b580      	push	{r7, lr}
 810116e:	b084      	sub	sp, #16
 8101170:	af00      	add	r7, sp, #0
 8101172:	60f8      	str	r0, [r7, #12]
 8101174:	460b      	mov	r3, r1
 8101176:	607a      	str	r2, [r7, #4]
 8101178:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810117a:	4b37      	ldr	r3, [pc, #220]	; (8101258 <HAL_PWREx_EnterSTOPMode+0xec>)
 810117c:	681b      	ldr	r3, [r3, #0]
 810117e:	f023 0201 	bic.w	r2, r3, #1
 8101182:	4935      	ldr	r1, [pc, #212]	; (8101258 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101184:	68fb      	ldr	r3, [r7, #12]
 8101186:	4313      	orrs	r3, r2
 8101188:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810118a:	687b      	ldr	r3, [r7, #4]
 810118c:	2b00      	cmp	r3, #0
 810118e:	d123      	bne.n	81011d8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101190:	f7ff fdc8 	bl	8100d24 <HAL_GetCurrentCPUID>
 8101194:	4603      	mov	r3, r0
 8101196:	2b03      	cmp	r3, #3
 8101198:	d158      	bne.n	810124c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810119a:	4b2f      	ldr	r3, [pc, #188]	; (8101258 <HAL_PWREx_EnterSTOPMode+0xec>)
 810119c:	691b      	ldr	r3, [r3, #16]
 810119e:	4a2e      	ldr	r2, [pc, #184]	; (8101258 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011a0:	f023 0301 	bic.w	r3, r3, #1
 81011a4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011a6:	4b2d      	ldr	r3, [pc, #180]	; (810125c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011a8:	691b      	ldr	r3, [r3, #16]
 81011aa:	4a2c      	ldr	r2, [pc, #176]	; (810125c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011ac:	f043 0304 	orr.w	r3, r3, #4
 81011b0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81011b2:	f3bf 8f4f 	dsb	sy
}
 81011b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81011b8:	f3bf 8f6f 	isb	sy
}
 81011bc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81011be:	7afb      	ldrb	r3, [r7, #11]
 81011c0:	2b01      	cmp	r3, #1
 81011c2:	d101      	bne.n	81011c8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81011c4:	bf30      	wfi
 81011c6:	e000      	b.n	81011ca <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81011c8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011ca:	4b24      	ldr	r3, [pc, #144]	; (810125c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011cc:	691b      	ldr	r3, [r3, #16]
 81011ce:	4a23      	ldr	r2, [pc, #140]	; (810125c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011d0:	f023 0304 	bic.w	r3, r3, #4
 81011d4:	6113      	str	r3, [r2, #16]
 81011d6:	e03c      	b.n	8101252 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81011d8:	687b      	ldr	r3, [r7, #4]
 81011da:	2b01      	cmp	r3, #1
 81011dc:	d123      	bne.n	8101226 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81011de:	f7ff fda1 	bl	8100d24 <HAL_GetCurrentCPUID>
 81011e2:	4603      	mov	r3, r0
 81011e4:	2b01      	cmp	r3, #1
 81011e6:	d133      	bne.n	8101250 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81011e8:	4b1b      	ldr	r3, [pc, #108]	; (8101258 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011ea:	695b      	ldr	r3, [r3, #20]
 81011ec:	4a1a      	ldr	r2, [pc, #104]	; (8101258 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011ee:	f023 0302 	bic.w	r3, r3, #2
 81011f2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011f4:	4b19      	ldr	r3, [pc, #100]	; (810125c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011f6:	691b      	ldr	r3, [r3, #16]
 81011f8:	4a18      	ldr	r2, [pc, #96]	; (810125c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011fa:	f043 0304 	orr.w	r3, r3, #4
 81011fe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101200:	f3bf 8f4f 	dsb	sy
}
 8101204:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101206:	f3bf 8f6f 	isb	sy
}
 810120a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810120c:	7afb      	ldrb	r3, [r7, #11]
 810120e:	2b01      	cmp	r3, #1
 8101210:	d101      	bne.n	8101216 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101212:	bf30      	wfi
 8101214:	e000      	b.n	8101218 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101216:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101218:	4b10      	ldr	r3, [pc, #64]	; (810125c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810121a:	691b      	ldr	r3, [r3, #16]
 810121c:	4a0f      	ldr	r2, [pc, #60]	; (810125c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810121e:	f023 0304 	bic.w	r3, r3, #4
 8101222:	6113      	str	r3, [r2, #16]
 8101224:	e015      	b.n	8101252 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101226:	f7ff fd7d 	bl	8100d24 <HAL_GetCurrentCPUID>
 810122a:	4603      	mov	r3, r0
 810122c:	2b03      	cmp	r3, #3
 810122e:	d106      	bne.n	810123e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101230:	4b09      	ldr	r3, [pc, #36]	; (8101258 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101232:	691b      	ldr	r3, [r3, #16]
 8101234:	4a08      	ldr	r2, [pc, #32]	; (8101258 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101236:	f023 0304 	bic.w	r3, r3, #4
 810123a:	6113      	str	r3, [r2, #16]
 810123c:	e009      	b.n	8101252 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810123e:	4b06      	ldr	r3, [pc, #24]	; (8101258 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101240:	695b      	ldr	r3, [r3, #20]
 8101242:	4a05      	ldr	r2, [pc, #20]	; (8101258 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101244:	f023 0304 	bic.w	r3, r3, #4
 8101248:	6153      	str	r3, [r2, #20]
 810124a:	e002      	b.n	8101252 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810124c:	bf00      	nop
 810124e:	e000      	b.n	8101252 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101250:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101252:	3710      	adds	r7, #16
 8101254:	46bd      	mov	sp, r7
 8101256:	bd80      	pop	{r7, pc}
 8101258:	58024800 	.word	0x58024800
 810125c:	e000ed00 	.word	0xe000ed00

08101260 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101260:	b580      	push	{r7, lr}
 8101262:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101264:	f7ff fd5e 	bl	8100d24 <HAL_GetCurrentCPUID>
 8101268:	4603      	mov	r3, r0
 810126a:	2b03      	cmp	r3, #3
 810126c:	d101      	bne.n	8101272 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810126e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101270:	e001      	b.n	8101276 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101272:	bf40      	sev
    __WFE ();
 8101274:	bf20      	wfe
}
 8101276:	bf00      	nop
 8101278:	bd80      	pop	{r7, pc}
	...

0810127c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810127c:	b480      	push	{r7}
 810127e:	b089      	sub	sp, #36	; 0x24
 8101280:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101282:	4bb3      	ldr	r3, [pc, #716]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101284:	691b      	ldr	r3, [r3, #16]
 8101286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810128a:	2b18      	cmp	r3, #24
 810128c:	f200 8155 	bhi.w	810153a <HAL_RCC_GetSysClockFreq+0x2be>
 8101290:	a201      	add	r2, pc, #4	; (adr r2, 8101298 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101296:	bf00      	nop
 8101298:	081012fd 	.word	0x081012fd
 810129c:	0810153b 	.word	0x0810153b
 81012a0:	0810153b 	.word	0x0810153b
 81012a4:	0810153b 	.word	0x0810153b
 81012a8:	0810153b 	.word	0x0810153b
 81012ac:	0810153b 	.word	0x0810153b
 81012b0:	0810153b 	.word	0x0810153b
 81012b4:	0810153b 	.word	0x0810153b
 81012b8:	08101323 	.word	0x08101323
 81012bc:	0810153b 	.word	0x0810153b
 81012c0:	0810153b 	.word	0x0810153b
 81012c4:	0810153b 	.word	0x0810153b
 81012c8:	0810153b 	.word	0x0810153b
 81012cc:	0810153b 	.word	0x0810153b
 81012d0:	0810153b 	.word	0x0810153b
 81012d4:	0810153b 	.word	0x0810153b
 81012d8:	08101329 	.word	0x08101329
 81012dc:	0810153b 	.word	0x0810153b
 81012e0:	0810153b 	.word	0x0810153b
 81012e4:	0810153b 	.word	0x0810153b
 81012e8:	0810153b 	.word	0x0810153b
 81012ec:	0810153b 	.word	0x0810153b
 81012f0:	0810153b 	.word	0x0810153b
 81012f4:	0810153b 	.word	0x0810153b
 81012f8:	0810132f 	.word	0x0810132f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81012fc:	4b94      	ldr	r3, [pc, #592]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012fe:	681b      	ldr	r3, [r3, #0]
 8101300:	f003 0320 	and.w	r3, r3, #32
 8101304:	2b00      	cmp	r3, #0
 8101306:	d009      	beq.n	810131c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101308:	4b91      	ldr	r3, [pc, #580]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810130a:	681b      	ldr	r3, [r3, #0]
 810130c:	08db      	lsrs	r3, r3, #3
 810130e:	f003 0303 	and.w	r3, r3, #3
 8101312:	4a90      	ldr	r2, [pc, #576]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101314:	fa22 f303 	lsr.w	r3, r2, r3
 8101318:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810131a:	e111      	b.n	8101540 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810131c:	4b8d      	ldr	r3, [pc, #564]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810131e:	61bb      	str	r3, [r7, #24]
    break;
 8101320:	e10e      	b.n	8101540 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101322:	4b8d      	ldr	r3, [pc, #564]	; (8101558 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101324:	61bb      	str	r3, [r7, #24]
    break;
 8101326:	e10b      	b.n	8101540 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101328:	4b8c      	ldr	r3, [pc, #560]	; (810155c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810132a:	61bb      	str	r3, [r7, #24]
    break;
 810132c:	e108      	b.n	8101540 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810132e:	4b88      	ldr	r3, [pc, #544]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101332:	f003 0303 	and.w	r3, r3, #3
 8101336:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101338:	4b85      	ldr	r3, [pc, #532]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810133c:	091b      	lsrs	r3, r3, #4
 810133e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101342:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101344:	4b82      	ldr	r3, [pc, #520]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101348:	f003 0301 	and.w	r3, r3, #1
 810134c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810134e:	4b80      	ldr	r3, [pc, #512]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101352:	08db      	lsrs	r3, r3, #3
 8101354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101358:	68fa      	ldr	r2, [r7, #12]
 810135a:	fb02 f303 	mul.w	r3, r2, r3
 810135e:	ee07 3a90 	vmov	s15, r3
 8101362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101366:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810136a:	693b      	ldr	r3, [r7, #16]
 810136c:	2b00      	cmp	r3, #0
 810136e:	f000 80e1 	beq.w	8101534 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101372:	697b      	ldr	r3, [r7, #20]
 8101374:	2b02      	cmp	r3, #2
 8101376:	f000 8083 	beq.w	8101480 <HAL_RCC_GetSysClockFreq+0x204>
 810137a:	697b      	ldr	r3, [r7, #20]
 810137c:	2b02      	cmp	r3, #2
 810137e:	f200 80a1 	bhi.w	81014c4 <HAL_RCC_GetSysClockFreq+0x248>
 8101382:	697b      	ldr	r3, [r7, #20]
 8101384:	2b00      	cmp	r3, #0
 8101386:	d003      	beq.n	8101390 <HAL_RCC_GetSysClockFreq+0x114>
 8101388:	697b      	ldr	r3, [r7, #20]
 810138a:	2b01      	cmp	r3, #1
 810138c:	d056      	beq.n	810143c <HAL_RCC_GetSysClockFreq+0x1c0>
 810138e:	e099      	b.n	81014c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101390:	4b6f      	ldr	r3, [pc, #444]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101392:	681b      	ldr	r3, [r3, #0]
 8101394:	f003 0320 	and.w	r3, r3, #32
 8101398:	2b00      	cmp	r3, #0
 810139a:	d02d      	beq.n	81013f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810139c:	4b6c      	ldr	r3, [pc, #432]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810139e:	681b      	ldr	r3, [r3, #0]
 81013a0:	08db      	lsrs	r3, r3, #3
 81013a2:	f003 0303 	and.w	r3, r3, #3
 81013a6:	4a6b      	ldr	r2, [pc, #428]	; (8101554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81013a8:	fa22 f303 	lsr.w	r3, r2, r3
 81013ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81013ae:	687b      	ldr	r3, [r7, #4]
 81013b0:	ee07 3a90 	vmov	s15, r3
 81013b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013b8:	693b      	ldr	r3, [r7, #16]
 81013ba:	ee07 3a90 	vmov	s15, r3
 81013be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013c6:	4b62      	ldr	r3, [pc, #392]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81013ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81013ce:	ee07 3a90 	vmov	s15, r3
 81013d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013d6:	ed97 6a02 	vldr	s12, [r7, #8]
 81013da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101560 <HAL_RCC_GetSysClockFreq+0x2e4>
 81013de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81013e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81013e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81013ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81013ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81013f6:	e087      	b.n	8101508 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81013f8:	693b      	ldr	r3, [r7, #16]
 81013fa:	ee07 3a90 	vmov	s15, r3
 81013fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101402:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101564 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810140a:	4b51      	ldr	r3, [pc, #324]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810140e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101412:	ee07 3a90 	vmov	s15, r3
 8101416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810141a:	ed97 6a02 	vldr	s12, [r7, #8]
 810141e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101560 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810142a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810142e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810143a:	e065      	b.n	8101508 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810143c:	693b      	ldr	r3, [r7, #16]
 810143e:	ee07 3a90 	vmov	s15, r3
 8101442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101446:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101568 <HAL_RCC_GetSysClockFreq+0x2ec>
 810144a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810144e:	4b40      	ldr	r3, [pc, #256]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101456:	ee07 3a90 	vmov	s15, r3
 810145a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810145e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101462:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101560 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810146a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810146e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101476:	ee67 7a27 	vmul.f32	s15, s14, s15
 810147a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810147e:	e043      	b.n	8101508 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101480:	693b      	ldr	r3, [r7, #16]
 8101482:	ee07 3a90 	vmov	s15, r3
 8101486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810148a:	eddf 6a38 	vldr	s13, [pc, #224]	; 810156c <HAL_RCC_GetSysClockFreq+0x2f0>
 810148e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101492:	4b2f      	ldr	r3, [pc, #188]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810149a:	ee07 3a90 	vmov	s15, r3
 810149e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014a2:	ed97 6a02 	vldr	s12, [r7, #8]
 81014a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101560 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81014c2:	e021      	b.n	8101508 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81014c4:	693b      	ldr	r3, [r7, #16]
 81014c6:	ee07 3a90 	vmov	s15, r3
 81014ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101568 <HAL_RCC_GetSysClockFreq+0x2ec>
 81014d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014d6:	4b1e      	ldr	r3, [pc, #120]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014de:	ee07 3a90 	vmov	s15, r3
 81014e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014e6:	ed97 6a02 	vldr	s12, [r7, #8]
 81014ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101560 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101506:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101508:	4b11      	ldr	r3, [pc, #68]	; (8101550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810150c:	0a5b      	lsrs	r3, r3, #9
 810150e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101512:	3301      	adds	r3, #1
 8101514:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101516:	683b      	ldr	r3, [r7, #0]
 8101518:	ee07 3a90 	vmov	s15, r3
 810151c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101520:	edd7 6a07 	vldr	s13, [r7, #28]
 8101524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810152c:	ee17 3a90 	vmov	r3, s15
 8101530:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101532:	e005      	b.n	8101540 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101534:	2300      	movs	r3, #0
 8101536:	61bb      	str	r3, [r7, #24]
    break;
 8101538:	e002      	b.n	8101540 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810153a:	4b07      	ldr	r3, [pc, #28]	; (8101558 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810153c:	61bb      	str	r3, [r7, #24]
    break;
 810153e:	bf00      	nop
  }

  return sysclockfreq;
 8101540:	69bb      	ldr	r3, [r7, #24]
}
 8101542:	4618      	mov	r0, r3
 8101544:	3724      	adds	r7, #36	; 0x24
 8101546:	46bd      	mov	sp, r7
 8101548:	f85d 7b04 	ldr.w	r7, [sp], #4
 810154c:	4770      	bx	lr
 810154e:	bf00      	nop
 8101550:	58024400 	.word	0x58024400
 8101554:	03d09000 	.word	0x03d09000
 8101558:	003d0900 	.word	0x003d0900
 810155c:	017d7840 	.word	0x017d7840
 8101560:	46000000 	.word	0x46000000
 8101564:	4c742400 	.word	0x4c742400
 8101568:	4a742400 	.word	0x4a742400
 810156c:	4bbebc20 	.word	0x4bbebc20

08101570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101570:	b580      	push	{r7, lr}
 8101572:	b082      	sub	sp, #8
 8101574:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101576:	f7ff fe81 	bl	810127c <HAL_RCC_GetSysClockFreq>
 810157a:	4602      	mov	r2, r0
 810157c:	4b11      	ldr	r3, [pc, #68]	; (81015c4 <HAL_RCC_GetHCLKFreq+0x54>)
 810157e:	699b      	ldr	r3, [r3, #24]
 8101580:	0a1b      	lsrs	r3, r3, #8
 8101582:	f003 030f 	and.w	r3, r3, #15
 8101586:	4910      	ldr	r1, [pc, #64]	; (81015c8 <HAL_RCC_GetHCLKFreq+0x58>)
 8101588:	5ccb      	ldrb	r3, [r1, r3]
 810158a:	f003 031f 	and.w	r3, r3, #31
 810158e:	fa22 f303 	lsr.w	r3, r2, r3
 8101592:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101594:	4b0b      	ldr	r3, [pc, #44]	; (81015c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8101596:	699b      	ldr	r3, [r3, #24]
 8101598:	f003 030f 	and.w	r3, r3, #15
 810159c:	4a0a      	ldr	r2, [pc, #40]	; (81015c8 <HAL_RCC_GetHCLKFreq+0x58>)
 810159e:	5cd3      	ldrb	r3, [r2, r3]
 81015a0:	f003 031f 	and.w	r3, r3, #31
 81015a4:	687a      	ldr	r2, [r7, #4]
 81015a6:	fa22 f303 	lsr.w	r3, r2, r3
 81015aa:	4a08      	ldr	r2, [pc, #32]	; (81015cc <HAL_RCC_GetHCLKFreq+0x5c>)
 81015ac:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81015ae:	4b07      	ldr	r3, [pc, #28]	; (81015cc <HAL_RCC_GetHCLKFreq+0x5c>)
 81015b0:	681b      	ldr	r3, [r3, #0]
 81015b2:	4a07      	ldr	r2, [pc, #28]	; (81015d0 <HAL_RCC_GetHCLKFreq+0x60>)
 81015b4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81015b6:	4b05      	ldr	r3, [pc, #20]	; (81015cc <HAL_RCC_GetHCLKFreq+0x5c>)
 81015b8:	681b      	ldr	r3, [r3, #0]
}
 81015ba:	4618      	mov	r0, r3
 81015bc:	3708      	adds	r7, #8
 81015be:	46bd      	mov	sp, r7
 81015c0:	bd80      	pop	{r7, pc}
 81015c2:	bf00      	nop
 81015c4:	58024400 	.word	0x58024400
 81015c8:	08103f5c 	.word	0x08103f5c
 81015cc:	10000004 	.word	0x10000004
 81015d0:	10000000 	.word	0x10000000

081015d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81015d4:	b580      	push	{r7, lr}
 81015d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81015d8:	f7ff ffca 	bl	8101570 <HAL_RCC_GetHCLKFreq>
 81015dc:	4602      	mov	r2, r0
 81015de:	4b06      	ldr	r3, [pc, #24]	; (81015f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 81015e0:	69db      	ldr	r3, [r3, #28]
 81015e2:	091b      	lsrs	r3, r3, #4
 81015e4:	f003 0307 	and.w	r3, r3, #7
 81015e8:	4904      	ldr	r1, [pc, #16]	; (81015fc <HAL_RCC_GetPCLK1Freq+0x28>)
 81015ea:	5ccb      	ldrb	r3, [r1, r3]
 81015ec:	f003 031f 	and.w	r3, r3, #31
 81015f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81015f4:	4618      	mov	r0, r3
 81015f6:	bd80      	pop	{r7, pc}
 81015f8:	58024400 	.word	0x58024400
 81015fc:	08103f5c 	.word	0x08103f5c

08101600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101600:	b580      	push	{r7, lr}
 8101602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101604:	f7ff ffb4 	bl	8101570 <HAL_RCC_GetHCLKFreq>
 8101608:	4602      	mov	r2, r0
 810160a:	4b06      	ldr	r3, [pc, #24]	; (8101624 <HAL_RCC_GetPCLK2Freq+0x24>)
 810160c:	69db      	ldr	r3, [r3, #28]
 810160e:	0a1b      	lsrs	r3, r3, #8
 8101610:	f003 0307 	and.w	r3, r3, #7
 8101614:	4904      	ldr	r1, [pc, #16]	; (8101628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8101616:	5ccb      	ldrb	r3, [r1, r3]
 8101618:	f003 031f 	and.w	r3, r3, #31
 810161c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101620:	4618      	mov	r0, r3
 8101622:	bd80      	pop	{r7, pc}
 8101624:	58024400 	.word	0x58024400
 8101628:	08103f5c 	.word	0x08103f5c

0810162c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810162c:	b580      	push	{r7, lr}
 810162e:	b086      	sub	sp, #24
 8101630:	af00      	add	r7, sp, #0
 8101632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101634:	2300      	movs	r3, #0
 8101636:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101638:	2300      	movs	r3, #0
 810163a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810163c:	687b      	ldr	r3, [r7, #4]
 810163e:	681b      	ldr	r3, [r3, #0]
 8101640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101644:	2b00      	cmp	r3, #0
 8101646:	d03f      	beq.n	81016c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8101648:	687b      	ldr	r3, [r7, #4]
 810164a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810164c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101650:	d02a      	beq.n	81016a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8101652:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101656:	d824      	bhi.n	81016a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101658:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810165c:	d018      	beq.n	8101690 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810165e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101662:	d81e      	bhi.n	81016a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101664:	2b00      	cmp	r3, #0
 8101666:	d003      	beq.n	8101670 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8101668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810166c:	d007      	beq.n	810167e <HAL_RCCEx_PeriphCLKConfig+0x52>
 810166e:	e018      	b.n	81016a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101670:	4bab      	ldr	r3, [pc, #684]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101674:	4aaa      	ldr	r2, [pc, #680]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810167a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810167c:	e015      	b.n	81016aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810167e:	687b      	ldr	r3, [r7, #4]
 8101680:	3304      	adds	r3, #4
 8101682:	2102      	movs	r1, #2
 8101684:	4618      	mov	r0, r3
 8101686:	f001 f9cf 	bl	8102a28 <RCCEx_PLL2_Config>
 810168a:	4603      	mov	r3, r0
 810168c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810168e:	e00c      	b.n	81016aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101690:	687b      	ldr	r3, [r7, #4]
 8101692:	3324      	adds	r3, #36	; 0x24
 8101694:	2102      	movs	r1, #2
 8101696:	4618      	mov	r0, r3
 8101698:	f001 fa78 	bl	8102b8c <RCCEx_PLL3_Config>
 810169c:	4603      	mov	r3, r0
 810169e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81016a0:	e003      	b.n	81016aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81016a2:	2301      	movs	r3, #1
 81016a4:	75fb      	strb	r3, [r7, #23]
      break;
 81016a6:	e000      	b.n	81016aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81016a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81016aa:	7dfb      	ldrb	r3, [r7, #23]
 81016ac:	2b00      	cmp	r3, #0
 81016ae:	d109      	bne.n	81016c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81016b0:	4b9b      	ldr	r3, [pc, #620]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81016b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81016b8:	687b      	ldr	r3, [r7, #4]
 81016ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81016bc:	4998      	ldr	r1, [pc, #608]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016be:	4313      	orrs	r3, r2
 81016c0:	650b      	str	r3, [r1, #80]	; 0x50
 81016c2:	e001      	b.n	81016c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81016c4:	7dfb      	ldrb	r3, [r7, #23]
 81016c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81016c8:	687b      	ldr	r3, [r7, #4]
 81016ca:	681b      	ldr	r3, [r3, #0]
 81016cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81016d0:	2b00      	cmp	r3, #0
 81016d2:	d03d      	beq.n	8101750 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81016d4:	687b      	ldr	r3, [r7, #4]
 81016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81016d8:	2b04      	cmp	r3, #4
 81016da:	d826      	bhi.n	810172a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81016dc:	a201      	add	r2, pc, #4	; (adr r2, 81016e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81016e2:	bf00      	nop
 81016e4:	081016f9 	.word	0x081016f9
 81016e8:	08101707 	.word	0x08101707
 81016ec:	08101719 	.word	0x08101719
 81016f0:	08101731 	.word	0x08101731
 81016f4:	08101731 	.word	0x08101731
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81016f8:	4b89      	ldr	r3, [pc, #548]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81016fc:	4a88      	ldr	r2, [pc, #544]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101702:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101704:	e015      	b.n	8101732 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101706:	687b      	ldr	r3, [r7, #4]
 8101708:	3304      	adds	r3, #4
 810170a:	2100      	movs	r1, #0
 810170c:	4618      	mov	r0, r3
 810170e:	f001 f98b 	bl	8102a28 <RCCEx_PLL2_Config>
 8101712:	4603      	mov	r3, r0
 8101714:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101716:	e00c      	b.n	8101732 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101718:	687b      	ldr	r3, [r7, #4]
 810171a:	3324      	adds	r3, #36	; 0x24
 810171c:	2100      	movs	r1, #0
 810171e:	4618      	mov	r0, r3
 8101720:	f001 fa34 	bl	8102b8c <RCCEx_PLL3_Config>
 8101724:	4603      	mov	r3, r0
 8101726:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101728:	e003      	b.n	8101732 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810172a:	2301      	movs	r3, #1
 810172c:	75fb      	strb	r3, [r7, #23]
      break;
 810172e:	e000      	b.n	8101732 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8101730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101732:	7dfb      	ldrb	r3, [r7, #23]
 8101734:	2b00      	cmp	r3, #0
 8101736:	d109      	bne.n	810174c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101738:	4b79      	ldr	r3, [pc, #484]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810173a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810173c:	f023 0207 	bic.w	r2, r3, #7
 8101740:	687b      	ldr	r3, [r7, #4]
 8101742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101744:	4976      	ldr	r1, [pc, #472]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101746:	4313      	orrs	r3, r2
 8101748:	650b      	str	r3, [r1, #80]	; 0x50
 810174a:	e001      	b.n	8101750 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810174c:	7dfb      	ldrb	r3, [r7, #23]
 810174e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101750:	687b      	ldr	r3, [r7, #4]
 8101752:	681b      	ldr	r3, [r3, #0]
 8101754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101758:	2b00      	cmp	r3, #0
 810175a:	d042      	beq.n	81017e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 810175c:	687b      	ldr	r3, [r7, #4]
 810175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101764:	d02b      	beq.n	81017be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8101766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810176a:	d825      	bhi.n	81017b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810176c:	2bc0      	cmp	r3, #192	; 0xc0
 810176e:	d028      	beq.n	81017c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8101770:	2bc0      	cmp	r3, #192	; 0xc0
 8101772:	d821      	bhi.n	81017b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101774:	2b80      	cmp	r3, #128	; 0x80
 8101776:	d016      	beq.n	81017a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8101778:	2b80      	cmp	r3, #128	; 0x80
 810177a:	d81d      	bhi.n	81017b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810177c:	2b00      	cmp	r3, #0
 810177e:	d002      	beq.n	8101786 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8101780:	2b40      	cmp	r3, #64	; 0x40
 8101782:	d007      	beq.n	8101794 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8101784:	e018      	b.n	81017b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101786:	4b66      	ldr	r3, [pc, #408]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810178a:	4a65      	ldr	r2, [pc, #404]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101790:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101792:	e017      	b.n	81017c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	3304      	adds	r3, #4
 8101798:	2100      	movs	r1, #0
 810179a:	4618      	mov	r0, r3
 810179c:	f001 f944 	bl	8102a28 <RCCEx_PLL2_Config>
 81017a0:	4603      	mov	r3, r0
 81017a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81017a4:	e00e      	b.n	81017c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81017a6:	687b      	ldr	r3, [r7, #4]
 81017a8:	3324      	adds	r3, #36	; 0x24
 81017aa:	2100      	movs	r1, #0
 81017ac:	4618      	mov	r0, r3
 81017ae:	f001 f9ed 	bl	8102b8c <RCCEx_PLL3_Config>
 81017b2:	4603      	mov	r3, r0
 81017b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81017b6:	e005      	b.n	81017c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81017b8:	2301      	movs	r3, #1
 81017ba:	75fb      	strb	r3, [r7, #23]
      break;
 81017bc:	e002      	b.n	81017c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81017be:	bf00      	nop
 81017c0:	e000      	b.n	81017c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81017c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81017c4:	7dfb      	ldrb	r3, [r7, #23]
 81017c6:	2b00      	cmp	r3, #0
 81017c8:	d109      	bne.n	81017de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81017ca:	4b55      	ldr	r3, [pc, #340]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81017ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81017d2:	687b      	ldr	r3, [r7, #4]
 81017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81017d6:	4952      	ldr	r1, [pc, #328]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017d8:	4313      	orrs	r3, r2
 81017da:	650b      	str	r3, [r1, #80]	; 0x50
 81017dc:	e001      	b.n	81017e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81017de:	7dfb      	ldrb	r3, [r7, #23]
 81017e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81017e2:	687b      	ldr	r3, [r7, #4]
 81017e4:	681b      	ldr	r3, [r3, #0]
 81017e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81017ea:	2b00      	cmp	r3, #0
 81017ec:	d049      	beq.n	8101882 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81017ee:	687b      	ldr	r3, [r7, #4]
 81017f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81017f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81017f8:	d030      	beq.n	810185c <HAL_RCCEx_PeriphCLKConfig+0x230>
 81017fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 81017fe:	d82a      	bhi.n	8101856 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101800:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101804:	d02c      	beq.n	8101860 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8101806:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810180a:	d824      	bhi.n	8101856 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810180c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101810:	d018      	beq.n	8101844 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8101812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101816:	d81e      	bhi.n	8101856 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101818:	2b00      	cmp	r3, #0
 810181a:	d003      	beq.n	8101824 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810181c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101820:	d007      	beq.n	8101832 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8101822:	e018      	b.n	8101856 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101824:	4b3e      	ldr	r3, [pc, #248]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101828:	4a3d      	ldr	r2, [pc, #244]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810182a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810182e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101830:	e017      	b.n	8101862 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101832:	687b      	ldr	r3, [r7, #4]
 8101834:	3304      	adds	r3, #4
 8101836:	2100      	movs	r1, #0
 8101838:	4618      	mov	r0, r3
 810183a:	f001 f8f5 	bl	8102a28 <RCCEx_PLL2_Config>
 810183e:	4603      	mov	r3, r0
 8101840:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101842:	e00e      	b.n	8101862 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101844:	687b      	ldr	r3, [r7, #4]
 8101846:	3324      	adds	r3, #36	; 0x24
 8101848:	2100      	movs	r1, #0
 810184a:	4618      	mov	r0, r3
 810184c:	f001 f99e 	bl	8102b8c <RCCEx_PLL3_Config>
 8101850:	4603      	mov	r3, r0
 8101852:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101854:	e005      	b.n	8101862 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101856:	2301      	movs	r3, #1
 8101858:	75fb      	strb	r3, [r7, #23]
      break;
 810185a:	e002      	b.n	8101862 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810185c:	bf00      	nop
 810185e:	e000      	b.n	8101862 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101862:	7dfb      	ldrb	r3, [r7, #23]
 8101864:	2b00      	cmp	r3, #0
 8101866:	d10a      	bne.n	810187e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101868:	4b2d      	ldr	r3, [pc, #180]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810186c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101870:	687b      	ldr	r3, [r7, #4]
 8101872:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101876:	492a      	ldr	r1, [pc, #168]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101878:	4313      	orrs	r3, r2
 810187a:	658b      	str	r3, [r1, #88]	; 0x58
 810187c:	e001      	b.n	8101882 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810187e:	7dfb      	ldrb	r3, [r7, #23]
 8101880:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101882:	687b      	ldr	r3, [r7, #4]
 8101884:	681b      	ldr	r3, [r3, #0]
 8101886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810188a:	2b00      	cmp	r3, #0
 810188c:	d04c      	beq.n	8101928 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810188e:	687b      	ldr	r3, [r7, #4]
 8101890:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101898:	d030      	beq.n	81018fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 810189a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810189e:	d82a      	bhi.n	81018f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81018a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81018a4:	d02c      	beq.n	8101900 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 81018a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81018aa:	d824      	bhi.n	81018f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81018ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81018b0:	d018      	beq.n	81018e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81018b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81018b6:	d81e      	bhi.n	81018f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81018b8:	2b00      	cmp	r3, #0
 81018ba:	d003      	beq.n	81018c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81018bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81018c0:	d007      	beq.n	81018d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81018c2:	e018      	b.n	81018f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81018c4:	4b16      	ldr	r3, [pc, #88]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81018c8:	4a15      	ldr	r2, [pc, #84]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81018ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81018ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81018d0:	e017      	b.n	8101902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81018d2:	687b      	ldr	r3, [r7, #4]
 81018d4:	3304      	adds	r3, #4
 81018d6:	2100      	movs	r1, #0
 81018d8:	4618      	mov	r0, r3
 81018da:	f001 f8a5 	bl	8102a28 <RCCEx_PLL2_Config>
 81018de:	4603      	mov	r3, r0
 81018e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81018e2:	e00e      	b.n	8101902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81018e4:	687b      	ldr	r3, [r7, #4]
 81018e6:	3324      	adds	r3, #36	; 0x24
 81018e8:	2100      	movs	r1, #0
 81018ea:	4618      	mov	r0, r3
 81018ec:	f001 f94e 	bl	8102b8c <RCCEx_PLL3_Config>
 81018f0:	4603      	mov	r3, r0
 81018f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81018f4:	e005      	b.n	8101902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81018f6:	2301      	movs	r3, #1
 81018f8:	75fb      	strb	r3, [r7, #23]
      break;
 81018fa:	e002      	b.n	8101902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 81018fc:	bf00      	nop
 81018fe:	e000      	b.n	8101902 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8101900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101902:	7dfb      	ldrb	r3, [r7, #23]
 8101904:	2b00      	cmp	r3, #0
 8101906:	d10d      	bne.n	8101924 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101908:	4b05      	ldr	r3, [pc, #20]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810190c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8101910:	687b      	ldr	r3, [r7, #4]
 8101912:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101916:	4902      	ldr	r1, [pc, #8]	; (8101920 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101918:	4313      	orrs	r3, r2
 810191a:	658b      	str	r3, [r1, #88]	; 0x58
 810191c:	e004      	b.n	8101928 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810191e:	bf00      	nop
 8101920:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101924:	7dfb      	ldrb	r3, [r7, #23]
 8101926:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101928:	687b      	ldr	r3, [r7, #4]
 810192a:	681b      	ldr	r3, [r3, #0]
 810192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101930:	2b00      	cmp	r3, #0
 8101932:	d032      	beq.n	810199a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101938:	2b30      	cmp	r3, #48	; 0x30
 810193a:	d01c      	beq.n	8101976 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810193c:	2b30      	cmp	r3, #48	; 0x30
 810193e:	d817      	bhi.n	8101970 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8101940:	2b20      	cmp	r3, #32
 8101942:	d00c      	beq.n	810195e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8101944:	2b20      	cmp	r3, #32
 8101946:	d813      	bhi.n	8101970 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8101948:	2b00      	cmp	r3, #0
 810194a:	d016      	beq.n	810197a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 810194c:	2b10      	cmp	r3, #16
 810194e:	d10f      	bne.n	8101970 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101950:	4baf      	ldr	r3, [pc, #700]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101954:	4aae      	ldr	r2, [pc, #696]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810195a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810195c:	e00e      	b.n	810197c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810195e:	687b      	ldr	r3, [r7, #4]
 8101960:	3304      	adds	r3, #4
 8101962:	2102      	movs	r1, #2
 8101964:	4618      	mov	r0, r3
 8101966:	f001 f85f 	bl	8102a28 <RCCEx_PLL2_Config>
 810196a:	4603      	mov	r3, r0
 810196c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810196e:	e005      	b.n	810197c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101970:	2301      	movs	r3, #1
 8101972:	75fb      	strb	r3, [r7, #23]
      break;
 8101974:	e002      	b.n	810197c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8101976:	bf00      	nop
 8101978:	e000      	b.n	810197c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810197a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810197c:	7dfb      	ldrb	r3, [r7, #23]
 810197e:	2b00      	cmp	r3, #0
 8101980:	d109      	bne.n	8101996 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101982:	4ba3      	ldr	r3, [pc, #652]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101986:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810198a:	687b      	ldr	r3, [r7, #4]
 810198c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810198e:	49a0      	ldr	r1, [pc, #640]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101990:	4313      	orrs	r3, r2
 8101992:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101994:	e001      	b.n	810199a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101996:	7dfb      	ldrb	r3, [r7, #23]
 8101998:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810199a:	687b      	ldr	r3, [r7, #4]
 810199c:	681b      	ldr	r3, [r3, #0]
 810199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81019a2:	2b00      	cmp	r3, #0
 81019a4:	d047      	beq.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81019a6:	687b      	ldr	r3, [r7, #4]
 81019a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81019aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81019ae:	d030      	beq.n	8101a12 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81019b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81019b4:	d82a      	bhi.n	8101a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81019b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81019ba:	d02c      	beq.n	8101a16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81019bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81019c0:	d824      	bhi.n	8101a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81019c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81019c6:	d018      	beq.n	81019fa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81019c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81019cc:	d81e      	bhi.n	8101a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81019ce:	2b00      	cmp	r3, #0
 81019d0:	d003      	beq.n	81019da <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81019d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81019d6:	d007      	beq.n	81019e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 81019d8:	e018      	b.n	8101a0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019da:	4b8d      	ldr	r3, [pc, #564]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81019de:	4a8c      	ldr	r2, [pc, #560]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81019e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81019e6:	e017      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	3304      	adds	r3, #4
 81019ec:	2100      	movs	r1, #0
 81019ee:	4618      	mov	r0, r3
 81019f0:	f001 f81a 	bl	8102a28 <RCCEx_PLL2_Config>
 81019f4:	4603      	mov	r3, r0
 81019f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81019f8:	e00e      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81019fa:	687b      	ldr	r3, [r7, #4]
 81019fc:	3324      	adds	r3, #36	; 0x24
 81019fe:	2100      	movs	r1, #0
 8101a00:	4618      	mov	r0, r3
 8101a02:	f001 f8c3 	bl	8102b8c <RCCEx_PLL3_Config>
 8101a06:	4603      	mov	r3, r0
 8101a08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101a0a:	e005      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101a0c:	2301      	movs	r3, #1
 8101a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8101a10:	e002      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8101a12:	bf00      	nop
 8101a14:	e000      	b.n	8101a18 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8101a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101a18:	7dfb      	ldrb	r3, [r7, #23]
 8101a1a:	2b00      	cmp	r3, #0
 8101a1c:	d109      	bne.n	8101a32 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101a1e:	4b7c      	ldr	r3, [pc, #496]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101a22:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8101a26:	687b      	ldr	r3, [r7, #4]
 8101a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101a2a:	4979      	ldr	r1, [pc, #484]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a2c:	4313      	orrs	r3, r2
 8101a2e:	650b      	str	r3, [r1, #80]	; 0x50
 8101a30:	e001      	b.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a32:	7dfb      	ldrb	r3, [r7, #23]
 8101a34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	681b      	ldr	r3, [r3, #0]
 8101a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101a3e:	2b00      	cmp	r3, #0
 8101a40:	d049      	beq.n	8101ad6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8101a42:	687b      	ldr	r3, [r7, #4]
 8101a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101a46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101a4a:	d02e      	beq.n	8101aaa <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8101a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101a50:	d828      	bhi.n	8101aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101a52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101a56:	d02a      	beq.n	8101aae <HAL_RCCEx_PeriphCLKConfig+0x482>
 8101a58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101a5c:	d822      	bhi.n	8101aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101a5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101a62:	d026      	beq.n	8101ab2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8101a64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101a68:	d81c      	bhi.n	8101aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101a6e:	d010      	beq.n	8101a92 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8101a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101a74:	d816      	bhi.n	8101aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101a76:	2b00      	cmp	r3, #0
 8101a78:	d01d      	beq.n	8101ab6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8101a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101a7e:	d111      	bne.n	8101aa4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	3304      	adds	r3, #4
 8101a84:	2101      	movs	r1, #1
 8101a86:	4618      	mov	r0, r3
 8101a88:	f000 ffce 	bl	8102a28 <RCCEx_PLL2_Config>
 8101a8c:	4603      	mov	r3, r0
 8101a8e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101a90:	e012      	b.n	8101ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101a92:	687b      	ldr	r3, [r7, #4]
 8101a94:	3324      	adds	r3, #36	; 0x24
 8101a96:	2101      	movs	r1, #1
 8101a98:	4618      	mov	r0, r3
 8101a9a:	f001 f877 	bl	8102b8c <RCCEx_PLL3_Config>
 8101a9e:	4603      	mov	r3, r0
 8101aa0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101aa2:	e009      	b.n	8101ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101aa4:	2301      	movs	r3, #1
 8101aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8101aa8:	e006      	b.n	8101ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101aaa:	bf00      	nop
 8101aac:	e004      	b.n	8101ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101aae:	bf00      	nop
 8101ab0:	e002      	b.n	8101ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101ab2:	bf00      	nop
 8101ab4:	e000      	b.n	8101ab8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101ab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ab8:	7dfb      	ldrb	r3, [r7, #23]
 8101aba:	2b00      	cmp	r3, #0
 8101abc:	d109      	bne.n	8101ad2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101abe:	4b54      	ldr	r3, [pc, #336]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101ac2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101aca:	4951      	ldr	r1, [pc, #324]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101acc:	4313      	orrs	r3, r2
 8101ace:	650b      	str	r3, [r1, #80]	; 0x50
 8101ad0:	e001      	b.n	8101ad6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ad2:	7dfb      	ldrb	r3, [r7, #23]
 8101ad4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	681b      	ldr	r3, [r3, #0]
 8101ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101ade:	2b00      	cmp	r3, #0
 8101ae0:	d04b      	beq.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8101ae2:	687b      	ldr	r3, [r7, #4]
 8101ae4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101aec:	d02e      	beq.n	8101b4c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8101aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101af2:	d828      	bhi.n	8101b46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101af8:	d02a      	beq.n	8101b50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8101afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101afe:	d822      	bhi.n	8101b46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101b04:	d026      	beq.n	8101b54 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8101b06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101b0a:	d81c      	bhi.n	8101b46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101b10:	d010      	beq.n	8101b34 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8101b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101b16:	d816      	bhi.n	8101b46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b18:	2b00      	cmp	r3, #0
 8101b1a:	d01d      	beq.n	8101b58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8101b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101b20:	d111      	bne.n	8101b46 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101b22:	687b      	ldr	r3, [r7, #4]
 8101b24:	3304      	adds	r3, #4
 8101b26:	2101      	movs	r1, #1
 8101b28:	4618      	mov	r0, r3
 8101b2a:	f000 ff7d 	bl	8102a28 <RCCEx_PLL2_Config>
 8101b2e:	4603      	mov	r3, r0
 8101b30:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101b32:	e012      	b.n	8101b5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101b34:	687b      	ldr	r3, [r7, #4]
 8101b36:	3324      	adds	r3, #36	; 0x24
 8101b38:	2101      	movs	r1, #1
 8101b3a:	4618      	mov	r0, r3
 8101b3c:	f001 f826 	bl	8102b8c <RCCEx_PLL3_Config>
 8101b40:	4603      	mov	r3, r0
 8101b42:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101b44:	e009      	b.n	8101b5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8101b46:	2301      	movs	r3, #1
 8101b48:	75fb      	strb	r3, [r7, #23]
      break;
 8101b4a:	e006      	b.n	8101b5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101b4c:	bf00      	nop
 8101b4e:	e004      	b.n	8101b5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101b50:	bf00      	nop
 8101b52:	e002      	b.n	8101b5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101b54:	bf00      	nop
 8101b56:	e000      	b.n	8101b5a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101b58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101b5a:	7dfb      	ldrb	r3, [r7, #23]
 8101b5c:	2b00      	cmp	r3, #0
 8101b5e:	d10a      	bne.n	8101b76 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101b60:	4b2b      	ldr	r3, [pc, #172]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101b64:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101b68:	687b      	ldr	r3, [r7, #4]
 8101b6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101b6e:	4928      	ldr	r1, [pc, #160]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101b70:	4313      	orrs	r3, r2
 8101b72:	658b      	str	r3, [r1, #88]	; 0x58
 8101b74:	e001      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b76:	7dfb      	ldrb	r3, [r7, #23]
 8101b78:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	681b      	ldr	r3, [r3, #0]
 8101b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101b82:	2b00      	cmp	r3, #0
 8101b84:	d02f      	beq.n	8101be6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8101b86:	687b      	ldr	r3, [r7, #4]
 8101b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101b8e:	d00e      	beq.n	8101bae <HAL_RCCEx_PeriphCLKConfig+0x582>
 8101b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101b94:	d814      	bhi.n	8101bc0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8101b96:	2b00      	cmp	r3, #0
 8101b98:	d015      	beq.n	8101bc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101b9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101b9e:	d10f      	bne.n	8101bc0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101ba0:	4b1b      	ldr	r3, [pc, #108]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101ba4:	4a1a      	ldr	r2, [pc, #104]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101baa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101bac:	e00c      	b.n	8101bc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	3304      	adds	r3, #4
 8101bb2:	2101      	movs	r1, #1
 8101bb4:	4618      	mov	r0, r3
 8101bb6:	f000 ff37 	bl	8102a28 <RCCEx_PLL2_Config>
 8101bba:	4603      	mov	r3, r0
 8101bbc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101bbe:	e003      	b.n	8101bc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101bc0:	2301      	movs	r3, #1
 8101bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8101bc4:	e000      	b.n	8101bc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8101bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101bc8:	7dfb      	ldrb	r3, [r7, #23]
 8101bca:	2b00      	cmp	r3, #0
 8101bcc:	d109      	bne.n	8101be2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101bce:	4b10      	ldr	r3, [pc, #64]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101bd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101bda:	490d      	ldr	r1, [pc, #52]	; (8101c10 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bdc:	4313      	orrs	r3, r2
 8101bde:	650b      	str	r3, [r1, #80]	; 0x50
 8101be0:	e001      	b.n	8101be6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101be2:	7dfb      	ldrb	r3, [r7, #23]
 8101be4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101be6:	687b      	ldr	r3, [r7, #4]
 8101be8:	681b      	ldr	r3, [r3, #0]
 8101bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101bee:	2b00      	cmp	r3, #0
 8101bf0:	d033      	beq.n	8101c5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101bf6:	2b03      	cmp	r3, #3
 8101bf8:	d81c      	bhi.n	8101c34 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8101bfa:	a201      	add	r2, pc, #4	; (adr r2, 8101c00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8101bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c00:	08101c3b 	.word	0x08101c3b
 8101c04:	08101c15 	.word	0x08101c15
 8101c08:	08101c23 	.word	0x08101c23
 8101c0c:	08101c3b 	.word	0x08101c3b
 8101c10:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c14:	4bb9      	ldr	r3, [pc, #740]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c18:	4ab8      	ldr	r2, [pc, #736]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101c20:	e00c      	b.n	8101c3c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101c22:	687b      	ldr	r3, [r7, #4]
 8101c24:	3304      	adds	r3, #4
 8101c26:	2102      	movs	r1, #2
 8101c28:	4618      	mov	r0, r3
 8101c2a:	f000 fefd 	bl	8102a28 <RCCEx_PLL2_Config>
 8101c2e:	4603      	mov	r3, r0
 8101c30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101c32:	e003      	b.n	8101c3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101c34:	2301      	movs	r3, #1
 8101c36:	75fb      	strb	r3, [r7, #23]
      break;
 8101c38:	e000      	b.n	8101c3c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8101c3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c3c:	7dfb      	ldrb	r3, [r7, #23]
 8101c3e:	2b00      	cmp	r3, #0
 8101c40:	d109      	bne.n	8101c56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101c42:	4bae      	ldr	r3, [pc, #696]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101c46:	f023 0203 	bic.w	r2, r3, #3
 8101c4a:	687b      	ldr	r3, [r7, #4]
 8101c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101c4e:	49ab      	ldr	r1, [pc, #684]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c50:	4313      	orrs	r3, r2
 8101c52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101c54:	e001      	b.n	8101c5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c56:	7dfb      	ldrb	r3, [r7, #23]
 8101c58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101c5a:	687b      	ldr	r3, [r7, #4]
 8101c5c:	681b      	ldr	r3, [r3, #0]
 8101c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101c62:	2b00      	cmp	r3, #0
 8101c64:	f000 8088 	beq.w	8101d78 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101c68:	4ba5      	ldr	r3, [pc, #660]	; (8101f00 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101c6a:	681b      	ldr	r3, [r3, #0]
 8101c6c:	4aa4      	ldr	r2, [pc, #656]	; (8101f00 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101c72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101c74:	f7fe ff16 	bl	8100aa4 <HAL_GetTick>
 8101c78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101c7a:	e009      	b.n	8101c90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101c7c:	f7fe ff12 	bl	8100aa4 <HAL_GetTick>
 8101c80:	4602      	mov	r2, r0
 8101c82:	693b      	ldr	r3, [r7, #16]
 8101c84:	1ad3      	subs	r3, r2, r3
 8101c86:	2b64      	cmp	r3, #100	; 0x64
 8101c88:	d902      	bls.n	8101c90 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8101c8a:	2303      	movs	r3, #3
 8101c8c:	75fb      	strb	r3, [r7, #23]
        break;
 8101c8e:	e005      	b.n	8101c9c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101c90:	4b9b      	ldr	r3, [pc, #620]	; (8101f00 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101c92:	681b      	ldr	r3, [r3, #0]
 8101c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101c98:	2b00      	cmp	r3, #0
 8101c9a:	d0ef      	beq.n	8101c7c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8101c9c:	7dfb      	ldrb	r3, [r7, #23]
 8101c9e:	2b00      	cmp	r3, #0
 8101ca0:	d168      	bne.n	8101d74 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101ca2:	4b96      	ldr	r3, [pc, #600]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101ca4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101cac:	4053      	eors	r3, r2
 8101cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101cb2:	2b00      	cmp	r3, #0
 8101cb4:	d013      	beq.n	8101cde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101cb6:	4b91      	ldr	r3, [pc, #580]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101cbe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101cc0:	4b8e      	ldr	r3, [pc, #568]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101cc4:	4a8d      	ldr	r2, [pc, #564]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101cca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101ccc:	4b8b      	ldr	r3, [pc, #556]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101cd0:	4a8a      	ldr	r2, [pc, #552]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101cd6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101cd8:	4a88      	ldr	r2, [pc, #544]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cda:	68fb      	ldr	r3, [r7, #12]
 8101cdc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101cde:	687b      	ldr	r3, [r7, #4]
 8101ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101ce8:	d115      	bne.n	8101d16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101cea:	f7fe fedb 	bl	8100aa4 <HAL_GetTick>
 8101cee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101cf0:	e00b      	b.n	8101d0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101cf2:	f7fe fed7 	bl	8100aa4 <HAL_GetTick>
 8101cf6:	4602      	mov	r2, r0
 8101cf8:	693b      	ldr	r3, [r7, #16]
 8101cfa:	1ad3      	subs	r3, r2, r3
 8101cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8101d00:	4293      	cmp	r3, r2
 8101d02:	d902      	bls.n	8101d0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8101d04:	2303      	movs	r3, #3
 8101d06:	75fb      	strb	r3, [r7, #23]
            break;
 8101d08:	e005      	b.n	8101d16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101d0a:	4b7c      	ldr	r3, [pc, #496]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d0e:	f003 0302 	and.w	r3, r3, #2
 8101d12:	2b00      	cmp	r3, #0
 8101d14:	d0ed      	beq.n	8101cf2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8101d16:	7dfb      	ldrb	r3, [r7, #23]
 8101d18:	2b00      	cmp	r3, #0
 8101d1a:	d128      	bne.n	8101d6e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101d1c:	687b      	ldr	r3, [r7, #4]
 8101d1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101d2a:	d10f      	bne.n	8101d4c <HAL_RCCEx_PeriphCLKConfig+0x720>
 8101d2c:	4b73      	ldr	r3, [pc, #460]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d2e:	691b      	ldr	r3, [r3, #16]
 8101d30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d3a:	091b      	lsrs	r3, r3, #4
 8101d3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8101d40:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8101d44:	496d      	ldr	r1, [pc, #436]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d46:	4313      	orrs	r3, r2
 8101d48:	610b      	str	r3, [r1, #16]
 8101d4a:	e005      	b.n	8101d58 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8101d4c:	4b6b      	ldr	r3, [pc, #428]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d4e:	691b      	ldr	r3, [r3, #16]
 8101d50:	4a6a      	ldr	r2, [pc, #424]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8101d56:	6113      	str	r3, [r2, #16]
 8101d58:	4b68      	ldr	r3, [pc, #416]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101d5c:	687b      	ldr	r3, [r7, #4]
 8101d5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101d66:	4965      	ldr	r1, [pc, #404]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d68:	4313      	orrs	r3, r2
 8101d6a:	670b      	str	r3, [r1, #112]	; 0x70
 8101d6c:	e004      	b.n	8101d78 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101d6e:	7dfb      	ldrb	r3, [r7, #23]
 8101d70:	75bb      	strb	r3, [r7, #22]
 8101d72:	e001      	b.n	8101d78 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d74:	7dfb      	ldrb	r3, [r7, #23]
 8101d76:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	681b      	ldr	r3, [r3, #0]
 8101d7c:	f003 0301 	and.w	r3, r3, #1
 8101d80:	2b00      	cmp	r3, #0
 8101d82:	d07e      	beq.n	8101e82 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101d88:	2b28      	cmp	r3, #40	; 0x28
 8101d8a:	d867      	bhi.n	8101e5c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8101d8c:	a201      	add	r2, pc, #4	; (adr r2, 8101d94 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8101d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101d92:	bf00      	nop
 8101d94:	08101e63 	.word	0x08101e63
 8101d98:	08101e5d 	.word	0x08101e5d
 8101d9c:	08101e5d 	.word	0x08101e5d
 8101da0:	08101e5d 	.word	0x08101e5d
 8101da4:	08101e5d 	.word	0x08101e5d
 8101da8:	08101e5d 	.word	0x08101e5d
 8101dac:	08101e5d 	.word	0x08101e5d
 8101db0:	08101e5d 	.word	0x08101e5d
 8101db4:	08101e39 	.word	0x08101e39
 8101db8:	08101e5d 	.word	0x08101e5d
 8101dbc:	08101e5d 	.word	0x08101e5d
 8101dc0:	08101e5d 	.word	0x08101e5d
 8101dc4:	08101e5d 	.word	0x08101e5d
 8101dc8:	08101e5d 	.word	0x08101e5d
 8101dcc:	08101e5d 	.word	0x08101e5d
 8101dd0:	08101e5d 	.word	0x08101e5d
 8101dd4:	08101e4b 	.word	0x08101e4b
 8101dd8:	08101e5d 	.word	0x08101e5d
 8101ddc:	08101e5d 	.word	0x08101e5d
 8101de0:	08101e5d 	.word	0x08101e5d
 8101de4:	08101e5d 	.word	0x08101e5d
 8101de8:	08101e5d 	.word	0x08101e5d
 8101dec:	08101e5d 	.word	0x08101e5d
 8101df0:	08101e5d 	.word	0x08101e5d
 8101df4:	08101e63 	.word	0x08101e63
 8101df8:	08101e5d 	.word	0x08101e5d
 8101dfc:	08101e5d 	.word	0x08101e5d
 8101e00:	08101e5d 	.word	0x08101e5d
 8101e04:	08101e5d 	.word	0x08101e5d
 8101e08:	08101e5d 	.word	0x08101e5d
 8101e0c:	08101e5d 	.word	0x08101e5d
 8101e10:	08101e5d 	.word	0x08101e5d
 8101e14:	08101e63 	.word	0x08101e63
 8101e18:	08101e5d 	.word	0x08101e5d
 8101e1c:	08101e5d 	.word	0x08101e5d
 8101e20:	08101e5d 	.word	0x08101e5d
 8101e24:	08101e5d 	.word	0x08101e5d
 8101e28:	08101e5d 	.word	0x08101e5d
 8101e2c:	08101e5d 	.word	0x08101e5d
 8101e30:	08101e5d 	.word	0x08101e5d
 8101e34:	08101e63 	.word	0x08101e63
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101e38:	687b      	ldr	r3, [r7, #4]
 8101e3a:	3304      	adds	r3, #4
 8101e3c:	2101      	movs	r1, #1
 8101e3e:	4618      	mov	r0, r3
 8101e40:	f000 fdf2 	bl	8102a28 <RCCEx_PLL2_Config>
 8101e44:	4603      	mov	r3, r0
 8101e46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101e48:	e00c      	b.n	8101e64 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	3324      	adds	r3, #36	; 0x24
 8101e4e:	2101      	movs	r1, #1
 8101e50:	4618      	mov	r0, r3
 8101e52:	f000 fe9b 	bl	8102b8c <RCCEx_PLL3_Config>
 8101e56:	4603      	mov	r3, r0
 8101e58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101e5a:	e003      	b.n	8101e64 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101e5c:	2301      	movs	r3, #1
 8101e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8101e60:	e000      	b.n	8101e64 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8101e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101e64:	7dfb      	ldrb	r3, [r7, #23]
 8101e66:	2b00      	cmp	r3, #0
 8101e68:	d109      	bne.n	8101e7e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8101e6a:	4b24      	ldr	r3, [pc, #144]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101e6e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8101e72:	687b      	ldr	r3, [r7, #4]
 8101e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101e76:	4921      	ldr	r1, [pc, #132]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101e78:	4313      	orrs	r3, r2
 8101e7a:	654b      	str	r3, [r1, #84]	; 0x54
 8101e7c:	e001      	b.n	8101e82 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e7e:	7dfb      	ldrb	r3, [r7, #23]
 8101e80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	f003 0302 	and.w	r3, r3, #2
 8101e8a:	2b00      	cmp	r3, #0
 8101e8c:	d03c      	beq.n	8101f08 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101e92:	2b05      	cmp	r3, #5
 8101e94:	d820      	bhi.n	8101ed8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8101e96:	a201      	add	r2, pc, #4	; (adr r2, 8101e9c <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8101e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101e9c:	08101edf 	.word	0x08101edf
 8101ea0:	08101eb5 	.word	0x08101eb5
 8101ea4:	08101ec7 	.word	0x08101ec7
 8101ea8:	08101edf 	.word	0x08101edf
 8101eac:	08101edf 	.word	0x08101edf
 8101eb0:	08101edf 	.word	0x08101edf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	3304      	adds	r3, #4
 8101eb8:	2101      	movs	r1, #1
 8101eba:	4618      	mov	r0, r3
 8101ebc:	f000 fdb4 	bl	8102a28 <RCCEx_PLL2_Config>
 8101ec0:	4603      	mov	r3, r0
 8101ec2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101ec4:	e00c      	b.n	8101ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	3324      	adds	r3, #36	; 0x24
 8101eca:	2101      	movs	r1, #1
 8101ecc:	4618      	mov	r0, r3
 8101ece:	f000 fe5d 	bl	8102b8c <RCCEx_PLL3_Config>
 8101ed2:	4603      	mov	r3, r0
 8101ed4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101ed6:	e003      	b.n	8101ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101ed8:	2301      	movs	r3, #1
 8101eda:	75fb      	strb	r3, [r7, #23]
      break;
 8101edc:	e000      	b.n	8101ee0 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8101ede:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ee0:	7dfb      	ldrb	r3, [r7, #23]
 8101ee2:	2b00      	cmp	r3, #0
 8101ee4:	d10e      	bne.n	8101f04 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8101ee6:	4b05      	ldr	r3, [pc, #20]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101eea:	f023 0207 	bic.w	r2, r3, #7
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101ef2:	4902      	ldr	r1, [pc, #8]	; (8101efc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101ef4:	4313      	orrs	r3, r2
 8101ef6:	654b      	str	r3, [r1, #84]	; 0x54
 8101ef8:	e006      	b.n	8101f08 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8101efa:	bf00      	nop
 8101efc:	58024400 	.word	0x58024400
 8101f00:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f04:	7dfb      	ldrb	r3, [r7, #23]
 8101f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8101f08:	687b      	ldr	r3, [r7, #4]
 8101f0a:	681b      	ldr	r3, [r3, #0]
 8101f0c:	f003 0304 	and.w	r3, r3, #4
 8101f10:	2b00      	cmp	r3, #0
 8101f12:	d039      	beq.n	8101f88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8101f14:	687b      	ldr	r3, [r7, #4]
 8101f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101f1a:	2b05      	cmp	r3, #5
 8101f1c:	d820      	bhi.n	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8101f1e:	a201      	add	r2, pc, #4	; (adr r2, 8101f24 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8101f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101f24:	08101f67 	.word	0x08101f67
 8101f28:	08101f3d 	.word	0x08101f3d
 8101f2c:	08101f4f 	.word	0x08101f4f
 8101f30:	08101f67 	.word	0x08101f67
 8101f34:	08101f67 	.word	0x08101f67
 8101f38:	08101f67 	.word	0x08101f67
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101f3c:	687b      	ldr	r3, [r7, #4]
 8101f3e:	3304      	adds	r3, #4
 8101f40:	2101      	movs	r1, #1
 8101f42:	4618      	mov	r0, r3
 8101f44:	f000 fd70 	bl	8102a28 <RCCEx_PLL2_Config>
 8101f48:	4603      	mov	r3, r0
 8101f4a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101f4c:	e00c      	b.n	8101f68 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	3324      	adds	r3, #36	; 0x24
 8101f52:	2101      	movs	r1, #1
 8101f54:	4618      	mov	r0, r3
 8101f56:	f000 fe19 	bl	8102b8c <RCCEx_PLL3_Config>
 8101f5a:	4603      	mov	r3, r0
 8101f5c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101f5e:	e003      	b.n	8101f68 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101f60:	2301      	movs	r3, #1
 8101f62:	75fb      	strb	r3, [r7, #23]
      break;
 8101f64:	e000      	b.n	8101f68 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8101f66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f68:	7dfb      	ldrb	r3, [r7, #23]
 8101f6a:	2b00      	cmp	r3, #0
 8101f6c:	d10a      	bne.n	8101f84 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8101f6e:	4bb7      	ldr	r3, [pc, #732]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8101f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101f72:	f023 0207 	bic.w	r2, r3, #7
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101f7c:	49b3      	ldr	r1, [pc, #716]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8101f7e:	4313      	orrs	r3, r2
 8101f80:	658b      	str	r3, [r1, #88]	; 0x58
 8101f82:	e001      	b.n	8101f88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f84:	7dfb      	ldrb	r3, [r7, #23]
 8101f86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	681b      	ldr	r3, [r3, #0]
 8101f8c:	f003 0320 	and.w	r3, r3, #32
 8101f90:	2b00      	cmp	r3, #0
 8101f92:	d04b      	beq.n	810202c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8101f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101f9e:	d02e      	beq.n	8101ffe <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8101fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101fa4:	d828      	bhi.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8101fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101faa:	d02a      	beq.n	8102002 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8101fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101fb0:	d822      	bhi.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8101fb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101fb6:	d026      	beq.n	8102006 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8101fb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101fbc:	d81c      	bhi.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8101fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101fc2:	d010      	beq.n	8101fe6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8101fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101fc8:	d816      	bhi.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8101fca:	2b00      	cmp	r3, #0
 8101fcc:	d01d      	beq.n	810200a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8101fce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101fd2:	d111      	bne.n	8101ff8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	3304      	adds	r3, #4
 8101fd8:	2100      	movs	r1, #0
 8101fda:	4618      	mov	r0, r3
 8101fdc:	f000 fd24 	bl	8102a28 <RCCEx_PLL2_Config>
 8101fe0:	4603      	mov	r3, r0
 8101fe2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8101fe4:	e012      	b.n	810200c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	3324      	adds	r3, #36	; 0x24
 8101fea:	2102      	movs	r1, #2
 8101fec:	4618      	mov	r0, r3
 8101fee:	f000 fdcd 	bl	8102b8c <RCCEx_PLL3_Config>
 8101ff2:	4603      	mov	r3, r0
 8101ff4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8101ff6:	e009      	b.n	810200c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101ff8:	2301      	movs	r3, #1
 8101ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8101ffc:	e006      	b.n	810200c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8101ffe:	bf00      	nop
 8102000:	e004      	b.n	810200c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102002:	bf00      	nop
 8102004:	e002      	b.n	810200c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102006:	bf00      	nop
 8102008:	e000      	b.n	810200c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810200a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810200c:	7dfb      	ldrb	r3, [r7, #23]
 810200e:	2b00      	cmp	r3, #0
 8102010:	d10a      	bne.n	8102028 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102012:	4b8e      	ldr	r3, [pc, #568]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102016:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102020:	498a      	ldr	r1, [pc, #552]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102022:	4313      	orrs	r3, r2
 8102024:	654b      	str	r3, [r1, #84]	; 0x54
 8102026:	e001      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102028:	7dfb      	ldrb	r3, [r7, #23]
 810202a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	681b      	ldr	r3, [r3, #0]
 8102030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102034:	2b00      	cmp	r3, #0
 8102036:	d04b      	beq.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810203e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102042:	d02e      	beq.n	81020a2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8102044:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102048:	d828      	bhi.n	810209c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810204a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810204e:	d02a      	beq.n	81020a6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8102050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102054:	d822      	bhi.n	810209c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102056:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810205a:	d026      	beq.n	81020aa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810205c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102060:	d81c      	bhi.n	810209c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102066:	d010      	beq.n	810208a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8102068:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810206c:	d816      	bhi.n	810209c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810206e:	2b00      	cmp	r3, #0
 8102070:	d01d      	beq.n	81020ae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8102072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102076:	d111      	bne.n	810209c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	3304      	adds	r3, #4
 810207c:	2100      	movs	r1, #0
 810207e:	4618      	mov	r0, r3
 8102080:	f000 fcd2 	bl	8102a28 <RCCEx_PLL2_Config>
 8102084:	4603      	mov	r3, r0
 8102086:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102088:	e012      	b.n	81020b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	3324      	adds	r3, #36	; 0x24
 810208e:	2102      	movs	r1, #2
 8102090:	4618      	mov	r0, r3
 8102092:	f000 fd7b 	bl	8102b8c <RCCEx_PLL3_Config>
 8102096:	4603      	mov	r3, r0
 8102098:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810209a:	e009      	b.n	81020b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810209c:	2301      	movs	r3, #1
 810209e:	75fb      	strb	r3, [r7, #23]
      break;
 81020a0:	e006      	b.n	81020b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020a2:	bf00      	nop
 81020a4:	e004      	b.n	81020b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020a6:	bf00      	nop
 81020a8:	e002      	b.n	81020b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020aa:	bf00      	nop
 81020ac:	e000      	b.n	81020b0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81020b0:	7dfb      	ldrb	r3, [r7, #23]
 81020b2:	2b00      	cmp	r3, #0
 81020b4:	d10a      	bne.n	81020cc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81020b6:	4b65      	ldr	r3, [pc, #404]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81020ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81020be:	687b      	ldr	r3, [r7, #4]
 81020c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81020c4:	4961      	ldr	r1, [pc, #388]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81020c6:	4313      	orrs	r3, r2
 81020c8:	658b      	str	r3, [r1, #88]	; 0x58
 81020ca:	e001      	b.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020cc:	7dfb      	ldrb	r3, [r7, #23]
 81020ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	681b      	ldr	r3, [r3, #0]
 81020d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81020d8:	2b00      	cmp	r3, #0
 81020da:	d04b      	beq.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81020e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81020e6:	d02e      	beq.n	8102146 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 81020e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81020ec:	d828      	bhi.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81020ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81020f2:	d02a      	beq.n	810214a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 81020f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81020f8:	d822      	bhi.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81020fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81020fe:	d026      	beq.n	810214e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8102100:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102104:	d81c      	bhi.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810210a:	d010      	beq.n	810212e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 810210c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102110:	d816      	bhi.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102112:	2b00      	cmp	r3, #0
 8102114:	d01d      	beq.n	8102152 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810211a:	d111      	bne.n	8102140 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	3304      	adds	r3, #4
 8102120:	2100      	movs	r1, #0
 8102122:	4618      	mov	r0, r3
 8102124:	f000 fc80 	bl	8102a28 <RCCEx_PLL2_Config>
 8102128:	4603      	mov	r3, r0
 810212a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810212c:	e012      	b.n	8102154 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	3324      	adds	r3, #36	; 0x24
 8102132:	2102      	movs	r1, #2
 8102134:	4618      	mov	r0, r3
 8102136:	f000 fd29 	bl	8102b8c <RCCEx_PLL3_Config>
 810213a:	4603      	mov	r3, r0
 810213c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810213e:	e009      	b.n	8102154 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102140:	2301      	movs	r3, #1
 8102142:	75fb      	strb	r3, [r7, #23]
      break;
 8102144:	e006      	b.n	8102154 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102146:	bf00      	nop
 8102148:	e004      	b.n	8102154 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810214a:	bf00      	nop
 810214c:	e002      	b.n	8102154 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810214e:	bf00      	nop
 8102150:	e000      	b.n	8102154 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102154:	7dfb      	ldrb	r3, [r7, #23]
 8102156:	2b00      	cmp	r3, #0
 8102158:	d10a      	bne.n	8102170 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810215a:	4b3c      	ldr	r3, [pc, #240]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810215c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810215e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8102162:	687b      	ldr	r3, [r7, #4]
 8102164:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102168:	4938      	ldr	r1, [pc, #224]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810216a:	4313      	orrs	r3, r2
 810216c:	658b      	str	r3, [r1, #88]	; 0x58
 810216e:	e001      	b.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102170:	7dfb      	ldrb	r3, [r7, #23]
 8102172:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	681b      	ldr	r3, [r3, #0]
 8102178:	f003 0308 	and.w	r3, r3, #8
 810217c:	2b00      	cmp	r3, #0
 810217e:	d01a      	beq.n	81021b6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8102180:	687b      	ldr	r3, [r7, #4]
 8102182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810218a:	d10a      	bne.n	81021a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810218c:	687b      	ldr	r3, [r7, #4]
 810218e:	3324      	adds	r3, #36	; 0x24
 8102190:	2102      	movs	r1, #2
 8102192:	4618      	mov	r0, r3
 8102194:	f000 fcfa 	bl	8102b8c <RCCEx_PLL3_Config>
 8102198:	4603      	mov	r3, r0
 810219a:	2b00      	cmp	r3, #0
 810219c:	d001      	beq.n	81021a2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 810219e:	2301      	movs	r3, #1
 81021a0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81021a2:	4b2a      	ldr	r3, [pc, #168]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81021a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81021b0:	4926      	ldr	r1, [pc, #152]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021b2:	4313      	orrs	r3, r2
 81021b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81021b6:	687b      	ldr	r3, [r7, #4]
 81021b8:	681b      	ldr	r3, [r3, #0]
 81021ba:	f003 0310 	and.w	r3, r3, #16
 81021be:	2b00      	cmp	r3, #0
 81021c0:	d01a      	beq.n	81021f8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81021c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81021cc:	d10a      	bne.n	81021e4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	3324      	adds	r3, #36	; 0x24
 81021d2:	2102      	movs	r1, #2
 81021d4:	4618      	mov	r0, r3
 81021d6:	f000 fcd9 	bl	8102b8c <RCCEx_PLL3_Config>
 81021da:	4603      	mov	r3, r0
 81021dc:	2b00      	cmp	r3, #0
 81021de:	d001      	beq.n	81021e4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 81021e0:	2301      	movs	r3, #1
 81021e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81021e4:	4b19      	ldr	r3, [pc, #100]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81021e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81021ec:	687b      	ldr	r3, [r7, #4]
 81021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81021f2:	4916      	ldr	r1, [pc, #88]	; (810224c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021f4:	4313      	orrs	r3, r2
 81021f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	681b      	ldr	r3, [r3, #0]
 81021fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102200:	2b00      	cmp	r3, #0
 8102202:	d036      	beq.n	8102272 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102204:	687b      	ldr	r3, [r7, #4]
 8102206:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810220a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810220e:	d01f      	beq.n	8102250 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8102210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102214:	d817      	bhi.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8102216:	2b00      	cmp	r3, #0
 8102218:	d003      	beq.n	8102222 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810221a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810221e:	d009      	beq.n	8102234 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8102220:	e011      	b.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	3304      	adds	r3, #4
 8102226:	2100      	movs	r1, #0
 8102228:	4618      	mov	r0, r3
 810222a:	f000 fbfd 	bl	8102a28 <RCCEx_PLL2_Config>
 810222e:	4603      	mov	r3, r0
 8102230:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102232:	e00e      	b.n	8102252 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102234:	687b      	ldr	r3, [r7, #4]
 8102236:	3324      	adds	r3, #36	; 0x24
 8102238:	2102      	movs	r1, #2
 810223a:	4618      	mov	r0, r3
 810223c:	f000 fca6 	bl	8102b8c <RCCEx_PLL3_Config>
 8102240:	4603      	mov	r3, r0
 8102242:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102244:	e005      	b.n	8102252 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102246:	2301      	movs	r3, #1
 8102248:	75fb      	strb	r3, [r7, #23]
      break;
 810224a:	e002      	b.n	8102252 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 810224c:	58024400 	.word	0x58024400
      break;
 8102250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102252:	7dfb      	ldrb	r3, [r7, #23]
 8102254:	2b00      	cmp	r3, #0
 8102256:	d10a      	bne.n	810226e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102258:	4b93      	ldr	r3, [pc, #588]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810225c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102266:	4990      	ldr	r1, [pc, #576]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102268:	4313      	orrs	r3, r2
 810226a:	658b      	str	r3, [r1, #88]	; 0x58
 810226c:	e001      	b.n	8102272 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810226e:	7dfb      	ldrb	r3, [r7, #23]
 8102270:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102272:	687b      	ldr	r3, [r7, #4]
 8102274:	681b      	ldr	r3, [r3, #0]
 8102276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810227a:	2b00      	cmp	r3, #0
 810227c:	d033      	beq.n	81022e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102288:	d01c      	beq.n	81022c4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810228a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810228e:	d816      	bhi.n	81022be <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8102290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102294:	d003      	beq.n	810229e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8102296:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810229a:	d007      	beq.n	81022ac <HAL_RCCEx_PeriphCLKConfig+0xc80>
 810229c:	e00f      	b.n	81022be <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810229e:	4b82      	ldr	r3, [pc, #520]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022a2:	4a81      	ldr	r2, [pc, #516]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81022aa:	e00c      	b.n	81022c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81022ac:	687b      	ldr	r3, [r7, #4]
 81022ae:	3324      	adds	r3, #36	; 0x24
 81022b0:	2101      	movs	r1, #1
 81022b2:	4618      	mov	r0, r3
 81022b4:	f000 fc6a 	bl	8102b8c <RCCEx_PLL3_Config>
 81022b8:	4603      	mov	r3, r0
 81022ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81022bc:	e003      	b.n	81022c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81022be:	2301      	movs	r3, #1
 81022c0:	75fb      	strb	r3, [r7, #23]
      break;
 81022c2:	e000      	b.n	81022c6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 81022c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81022c6:	7dfb      	ldrb	r3, [r7, #23]
 81022c8:	2b00      	cmp	r3, #0
 81022ca:	d10a      	bne.n	81022e2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81022cc:	4b76      	ldr	r3, [pc, #472]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81022da:	4973      	ldr	r1, [pc, #460]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022dc:	4313      	orrs	r3, r2
 81022de:	654b      	str	r3, [r1, #84]	; 0x54
 81022e0:	e001      	b.n	81022e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022e2:	7dfb      	ldrb	r3, [r7, #23]
 81022e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	681b      	ldr	r3, [r3, #0]
 81022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81022ee:	2b00      	cmp	r3, #0
 81022f0:	d029      	beq.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81022f2:	687b      	ldr	r3, [r7, #4]
 81022f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81022f6:	2b00      	cmp	r3, #0
 81022f8:	d003      	beq.n	8102302 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 81022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81022fe:	d007      	beq.n	8102310 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8102300:	e00f      	b.n	8102322 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102302:	4b69      	ldr	r3, [pc, #420]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102306:	4a68      	ldr	r2, [pc, #416]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810230c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810230e:	e00b      	b.n	8102328 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	3304      	adds	r3, #4
 8102314:	2102      	movs	r1, #2
 8102316:	4618      	mov	r0, r3
 8102318:	f000 fb86 	bl	8102a28 <RCCEx_PLL2_Config>
 810231c:	4603      	mov	r3, r0
 810231e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102320:	e002      	b.n	8102328 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8102322:	2301      	movs	r3, #1
 8102324:	75fb      	strb	r3, [r7, #23]
      break;
 8102326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102328:	7dfb      	ldrb	r3, [r7, #23]
 810232a:	2b00      	cmp	r3, #0
 810232c:	d109      	bne.n	8102342 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810232e:	4b5e      	ldr	r3, [pc, #376]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102332:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102336:	687b      	ldr	r3, [r7, #4]
 8102338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810233a:	495b      	ldr	r1, [pc, #364]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810233c:	4313      	orrs	r3, r2
 810233e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102340:	e001      	b.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102342:	7dfb      	ldrb	r3, [r7, #23]
 8102344:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	681b      	ldr	r3, [r3, #0]
 810234a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810234e:	2b00      	cmp	r3, #0
 8102350:	d00a      	beq.n	8102368 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	3324      	adds	r3, #36	; 0x24
 8102356:	2102      	movs	r1, #2
 8102358:	4618      	mov	r0, r3
 810235a:	f000 fc17 	bl	8102b8c <RCCEx_PLL3_Config>
 810235e:	4603      	mov	r3, r0
 8102360:	2b00      	cmp	r3, #0
 8102362:	d001      	beq.n	8102368 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8102364:	2301      	movs	r3, #1
 8102366:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	681b      	ldr	r3, [r3, #0]
 810236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102370:	2b00      	cmp	r3, #0
 8102372:	d030      	beq.n	81023d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810237c:	d017      	beq.n	81023ae <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810237e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102382:	d811      	bhi.n	81023a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8102384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102388:	d013      	beq.n	81023b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810238a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810238e:	d80b      	bhi.n	81023a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8102390:	2b00      	cmp	r3, #0
 8102392:	d010      	beq.n	81023b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8102394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102398:	d106      	bne.n	81023a8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810239a:	4b43      	ldr	r3, [pc, #268]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810239e:	4a42      	ldr	r2, [pc, #264]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81023a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81023a6:	e007      	b.n	81023b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81023a8:	2301      	movs	r3, #1
 81023aa:	75fb      	strb	r3, [r7, #23]
      break;
 81023ac:	e004      	b.n	81023b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81023ae:	bf00      	nop
 81023b0:	e002      	b.n	81023b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81023b2:	bf00      	nop
 81023b4:	e000      	b.n	81023b8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81023b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81023b8:	7dfb      	ldrb	r3, [r7, #23]
 81023ba:	2b00      	cmp	r3, #0
 81023bc:	d109      	bne.n	81023d2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81023be:	4b3a      	ldr	r3, [pc, #232]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81023c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81023ca:	4937      	ldr	r1, [pc, #220]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023cc:	4313      	orrs	r3, r2
 81023ce:	654b      	str	r3, [r1, #84]	; 0x54
 81023d0:	e001      	b.n	81023d6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023d2:	7dfb      	ldrb	r3, [r7, #23]
 81023d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	681b      	ldr	r3, [r3, #0]
 81023da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81023de:	2b00      	cmp	r3, #0
 81023e0:	d008      	beq.n	81023f4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81023e2:	4b31      	ldr	r3, [pc, #196]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81023e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81023ea:	687b      	ldr	r3, [r7, #4]
 81023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81023ee:	492e      	ldr	r1, [pc, #184]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023f0:	4313      	orrs	r3, r2
 81023f2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81023f4:	687b      	ldr	r3, [r7, #4]
 81023f6:	681b      	ldr	r3, [r3, #0]
 81023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81023fc:	2b00      	cmp	r3, #0
 81023fe:	d009      	beq.n	8102414 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102400:	4b29      	ldr	r3, [pc, #164]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102402:	691b      	ldr	r3, [r3, #16]
 8102404:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810240e:	4926      	ldr	r1, [pc, #152]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102410:	4313      	orrs	r3, r2
 8102412:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102414:	687b      	ldr	r3, [r7, #4]
 8102416:	681b      	ldr	r3, [r3, #0]
 8102418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810241c:	2b00      	cmp	r3, #0
 810241e:	d008      	beq.n	8102432 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102420:	4b21      	ldr	r3, [pc, #132]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102424:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810242c:	491e      	ldr	r1, [pc, #120]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810242e:	4313      	orrs	r3, r2
 8102430:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	681b      	ldr	r3, [r3, #0]
 8102436:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810243a:	2b00      	cmp	r3, #0
 810243c:	d00d      	beq.n	810245a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810243e:	4b1a      	ldr	r3, [pc, #104]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102440:	691b      	ldr	r3, [r3, #16]
 8102442:	4a19      	ldr	r2, [pc, #100]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102444:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102448:	6113      	str	r3, [r2, #16]
 810244a:	4b17      	ldr	r3, [pc, #92]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810244c:	691a      	ldr	r2, [r3, #16]
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102454:	4914      	ldr	r1, [pc, #80]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102456:	4313      	orrs	r3, r2
 8102458:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	681b      	ldr	r3, [r3, #0]
 810245e:	2b00      	cmp	r3, #0
 8102460:	da08      	bge.n	8102474 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102462:	4b11      	ldr	r3, [pc, #68]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102466:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810246e:	490e      	ldr	r1, [pc, #56]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102470:	4313      	orrs	r3, r2
 8102472:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	681b      	ldr	r3, [r3, #0]
 8102478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810247c:	2b00      	cmp	r3, #0
 810247e:	d009      	beq.n	8102494 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102480:	4b09      	ldr	r3, [pc, #36]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102484:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8102488:	687b      	ldr	r3, [r7, #4]
 810248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810248e:	4906      	ldr	r1, [pc, #24]	; (81024a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102490:	4313      	orrs	r3, r2
 8102492:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8102494:	7dbb      	ldrb	r3, [r7, #22]
 8102496:	2b00      	cmp	r3, #0
 8102498:	d101      	bne.n	810249e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810249a:	2300      	movs	r3, #0
 810249c:	e000      	b.n	81024a0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810249e:	2301      	movs	r3, #1
}
 81024a0:	4618      	mov	r0, r3
 81024a2:	3718      	adds	r7, #24
 81024a4:	46bd      	mov	sp, r7
 81024a6:	bd80      	pop	{r7, pc}
 81024a8:	58024400 	.word	0x58024400

081024ac <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81024ac:	b580      	push	{r7, lr}
 81024ae:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81024b0:	f7ff f85e 	bl	8101570 <HAL_RCC_GetHCLKFreq>
 81024b4:	4602      	mov	r2, r0
 81024b6:	4b06      	ldr	r3, [pc, #24]	; (81024d0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81024b8:	6a1b      	ldr	r3, [r3, #32]
 81024ba:	091b      	lsrs	r3, r3, #4
 81024bc:	f003 0307 	and.w	r3, r3, #7
 81024c0:	4904      	ldr	r1, [pc, #16]	; (81024d4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81024c2:	5ccb      	ldrb	r3, [r1, r3]
 81024c4:	f003 031f 	and.w	r3, r3, #31
 81024c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81024cc:	4618      	mov	r0, r3
 81024ce:	bd80      	pop	{r7, pc}
 81024d0:	58024400 	.word	0x58024400
 81024d4:	08103f5c 	.word	0x08103f5c

081024d8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81024d8:	b480      	push	{r7}
 81024da:	b089      	sub	sp, #36	; 0x24
 81024dc:	af00      	add	r7, sp, #0
 81024de:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81024e0:	4ba1      	ldr	r3, [pc, #644]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024e4:	f003 0303 	and.w	r3, r3, #3
 81024e8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81024ea:	4b9f      	ldr	r3, [pc, #636]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024ee:	0b1b      	lsrs	r3, r3, #12
 81024f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81024f4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81024f6:	4b9c      	ldr	r3, [pc, #624]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024fa:	091b      	lsrs	r3, r3, #4
 81024fc:	f003 0301 	and.w	r3, r3, #1
 8102500:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8102502:	4b99      	ldr	r3, [pc, #612]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102506:	08db      	lsrs	r3, r3, #3
 8102508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810250c:	693a      	ldr	r2, [r7, #16]
 810250e:	fb02 f303 	mul.w	r3, r2, r3
 8102512:	ee07 3a90 	vmov	s15, r3
 8102516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810251a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810251e:	697b      	ldr	r3, [r7, #20]
 8102520:	2b00      	cmp	r3, #0
 8102522:	f000 8111 	beq.w	8102748 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102526:	69bb      	ldr	r3, [r7, #24]
 8102528:	2b02      	cmp	r3, #2
 810252a:	f000 8083 	beq.w	8102634 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810252e:	69bb      	ldr	r3, [r7, #24]
 8102530:	2b02      	cmp	r3, #2
 8102532:	f200 80a1 	bhi.w	8102678 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102536:	69bb      	ldr	r3, [r7, #24]
 8102538:	2b00      	cmp	r3, #0
 810253a:	d003      	beq.n	8102544 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810253c:	69bb      	ldr	r3, [r7, #24]
 810253e:	2b01      	cmp	r3, #1
 8102540:	d056      	beq.n	81025f0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102542:	e099      	b.n	8102678 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102544:	4b88      	ldr	r3, [pc, #544]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102546:	681b      	ldr	r3, [r3, #0]
 8102548:	f003 0320 	and.w	r3, r3, #32
 810254c:	2b00      	cmp	r3, #0
 810254e:	d02d      	beq.n	81025ac <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102550:	4b85      	ldr	r3, [pc, #532]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	08db      	lsrs	r3, r3, #3
 8102556:	f003 0303 	and.w	r3, r3, #3
 810255a:	4a84      	ldr	r2, [pc, #528]	; (810276c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810255c:	fa22 f303 	lsr.w	r3, r2, r3
 8102560:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102562:	68bb      	ldr	r3, [r7, #8]
 8102564:	ee07 3a90 	vmov	s15, r3
 8102568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810256c:	697b      	ldr	r3, [r7, #20]
 810256e:	ee07 3a90 	vmov	s15, r3
 8102572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810257a:	4b7b      	ldr	r3, [pc, #492]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810257e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102582:	ee07 3a90 	vmov	s15, r3
 8102586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810258a:	ed97 6a03 	vldr	s12, [r7, #12]
 810258e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810259a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810259e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81025a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81025a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81025aa:	e087      	b.n	81026bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81025ac:	697b      	ldr	r3, [r7, #20]
 81025ae:	ee07 3a90 	vmov	s15, r3
 81025b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81025b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102774 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81025ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81025be:	4b6a      	ldr	r3, [pc, #424]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81025c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81025c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81025c6:	ee07 3a90 	vmov	s15, r3
 81025ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81025ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81025d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81025d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81025da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81025de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81025e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81025ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81025ee:	e065      	b.n	81026bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81025f0:	697b      	ldr	r3, [r7, #20]
 81025f2:	ee07 3a90 	vmov	s15, r3
 81025f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81025fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81025fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102602:	4b59      	ldr	r3, [pc, #356]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810260a:	ee07 3a90 	vmov	s15, r3
 810260e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102612:	ed97 6a03 	vldr	s12, [r7, #12]
 8102616:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810261a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810261e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810262a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810262e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102632:	e043      	b.n	81026bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102634:	697b      	ldr	r3, [r7, #20]
 8102636:	ee07 3a90 	vmov	s15, r3
 810263a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810263e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810277c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8102642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102646:	4b48      	ldr	r3, [pc, #288]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810264a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810264e:	ee07 3a90 	vmov	s15, r3
 8102652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102656:	ed97 6a03 	vldr	s12, [r7, #12]
 810265a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810265e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810266a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810266e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102676:	e021      	b.n	81026bc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102678:	697b      	ldr	r3, [r7, #20]
 810267a:	ee07 3a90 	vmov	s15, r3
 810267e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102682:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102778 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810268a:	4b37      	ldr	r3, [pc, #220]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810268e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102692:	ee07 3a90 	vmov	s15, r3
 8102696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810269a:	ed97 6a03 	vldr	s12, [r7, #12]
 810269e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102770 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81026a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81026a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81026aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81026ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81026b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81026b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81026ba:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81026bc:	4b2a      	ldr	r3, [pc, #168]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81026be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81026c0:	0a5b      	lsrs	r3, r3, #9
 81026c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81026c6:	ee07 3a90 	vmov	s15, r3
 81026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81026ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81026d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81026d6:	edd7 6a07 	vldr	s13, [r7, #28]
 81026da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81026de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81026e2:	ee17 2a90 	vmov	r2, s15
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81026ea:	4b1f      	ldr	r3, [pc, #124]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81026ee:	0c1b      	lsrs	r3, r3, #16
 81026f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81026f4:	ee07 3a90 	vmov	s15, r3
 81026f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81026fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102704:	edd7 6a07 	vldr	s13, [r7, #28]
 8102708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810270c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102710:	ee17 2a90 	vmov	r2, s15
 8102714:	687b      	ldr	r3, [r7, #4]
 8102716:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8102718:	4b13      	ldr	r3, [pc, #76]	; (8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810271c:	0e1b      	lsrs	r3, r3, #24
 810271e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102722:	ee07 3a90 	vmov	s15, r3
 8102726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810272a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810272e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102732:	edd7 6a07 	vldr	s13, [r7, #28]
 8102736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810273a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810273e:	ee17 2a90 	vmov	r2, s15
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102746:	e008      	b.n	810275a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	2200      	movs	r2, #0
 810274c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	2200      	movs	r2, #0
 8102752:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	2200      	movs	r2, #0
 8102758:	609a      	str	r2, [r3, #8]
}
 810275a:	bf00      	nop
 810275c:	3724      	adds	r7, #36	; 0x24
 810275e:	46bd      	mov	sp, r7
 8102760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102764:	4770      	bx	lr
 8102766:	bf00      	nop
 8102768:	58024400 	.word	0x58024400
 810276c:	03d09000 	.word	0x03d09000
 8102770:	46000000 	.word	0x46000000
 8102774:	4c742400 	.word	0x4c742400
 8102778:	4a742400 	.word	0x4a742400
 810277c:	4bbebc20 	.word	0x4bbebc20

08102780 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8102780:	b480      	push	{r7}
 8102782:	b089      	sub	sp, #36	; 0x24
 8102784:	af00      	add	r7, sp, #0
 8102786:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102788:	4ba1      	ldr	r3, [pc, #644]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810278c:	f003 0303 	and.w	r3, r3, #3
 8102790:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8102792:	4b9f      	ldr	r3, [pc, #636]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102796:	0d1b      	lsrs	r3, r3, #20
 8102798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810279c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810279e:	4b9c      	ldr	r3, [pc, #624]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027a2:	0a1b      	lsrs	r3, r3, #8
 81027a4:	f003 0301 	and.w	r3, r3, #1
 81027a8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81027aa:	4b99      	ldr	r3, [pc, #612]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81027ae:	08db      	lsrs	r3, r3, #3
 81027b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81027b4:	693a      	ldr	r2, [r7, #16]
 81027b6:	fb02 f303 	mul.w	r3, r2, r3
 81027ba:	ee07 3a90 	vmov	s15, r3
 81027be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81027c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81027c6:	697b      	ldr	r3, [r7, #20]
 81027c8:	2b00      	cmp	r3, #0
 81027ca:	f000 8111 	beq.w	81029f0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81027ce:	69bb      	ldr	r3, [r7, #24]
 81027d0:	2b02      	cmp	r3, #2
 81027d2:	f000 8083 	beq.w	81028dc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81027d6:	69bb      	ldr	r3, [r7, #24]
 81027d8:	2b02      	cmp	r3, #2
 81027da:	f200 80a1 	bhi.w	8102920 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81027de:	69bb      	ldr	r3, [r7, #24]
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	d003      	beq.n	81027ec <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81027e4:	69bb      	ldr	r3, [r7, #24]
 81027e6:	2b01      	cmp	r3, #1
 81027e8:	d056      	beq.n	8102898 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81027ea:	e099      	b.n	8102920 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81027ec:	4b88      	ldr	r3, [pc, #544]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027ee:	681b      	ldr	r3, [r3, #0]
 81027f0:	f003 0320 	and.w	r3, r3, #32
 81027f4:	2b00      	cmp	r3, #0
 81027f6:	d02d      	beq.n	8102854 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81027f8:	4b85      	ldr	r3, [pc, #532]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027fa:	681b      	ldr	r3, [r3, #0]
 81027fc:	08db      	lsrs	r3, r3, #3
 81027fe:	f003 0303 	and.w	r3, r3, #3
 8102802:	4a84      	ldr	r2, [pc, #528]	; (8102a14 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8102804:	fa22 f303 	lsr.w	r3, r2, r3
 8102808:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810280a:	68bb      	ldr	r3, [r7, #8]
 810280c:	ee07 3a90 	vmov	s15, r3
 8102810:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102814:	697b      	ldr	r3, [r7, #20]
 8102816:	ee07 3a90 	vmov	s15, r3
 810281a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810281e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102822:	4b7b      	ldr	r3, [pc, #492]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810282a:	ee07 3a90 	vmov	s15, r3
 810282e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102832:	ed97 6a03 	vldr	s12, [r7, #12]
 8102836:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102a18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810283a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810283e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810284a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810284e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8102852:	e087      	b.n	8102964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102854:	697b      	ldr	r3, [r7, #20]
 8102856:	ee07 3a90 	vmov	s15, r3
 810285a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810285e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102a1c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8102862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102866:	4b6a      	ldr	r3, [pc, #424]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810286a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810286e:	ee07 3a90 	vmov	s15, r3
 8102872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102876:	ed97 6a03 	vldr	s12, [r7, #12]
 810287a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102a18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810287e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810288a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810288e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102892:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102896:	e065      	b.n	8102964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102898:	697b      	ldr	r3, [r7, #20]
 810289a:	ee07 3a90 	vmov	s15, r3
 810289e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102a20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81028a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028aa:	4b59      	ldr	r3, [pc, #356]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81028ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028b2:	ee07 3a90 	vmov	s15, r3
 81028b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028ba:	ed97 6a03 	vldr	s12, [r7, #12]
 81028be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102a18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81028c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81028da:	e043      	b.n	8102964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81028dc:	697b      	ldr	r3, [r7, #20]
 81028de:	ee07 3a90 	vmov	s15, r3
 81028e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8102a24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81028ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028ee:	4b48      	ldr	r3, [pc, #288]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81028f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028f6:	ee07 3a90 	vmov	s15, r3
 81028fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8102902:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102a18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810290a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810290e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102916:	ee67 7a27 	vmul.f32	s15, s14, s15
 810291a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810291e:	e021      	b.n	8102964 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102920:	697b      	ldr	r3, [r7, #20]
 8102922:	ee07 3a90 	vmov	s15, r3
 8102926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810292a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102a20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810292e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102932:	4b37      	ldr	r3, [pc, #220]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810293a:	ee07 3a90 	vmov	s15, r3
 810293e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102942:	ed97 6a03 	vldr	s12, [r7, #12]
 8102946:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102a18 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810294a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810294e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810295a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810295e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102962:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8102964:	4b2a      	ldr	r3, [pc, #168]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102968:	0a5b      	lsrs	r3, r3, #9
 810296a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810296e:	ee07 3a90 	vmov	s15, r3
 8102972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810297a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810297e:	edd7 6a07 	vldr	s13, [r7, #28]
 8102982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810298a:	ee17 2a90 	vmov	r2, s15
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8102992:	4b1f      	ldr	r3, [pc, #124]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102996:	0c1b      	lsrs	r3, r3, #16
 8102998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810299c:	ee07 3a90 	vmov	s15, r3
 81029a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81029a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81029ac:	edd7 6a07 	vldr	s13, [r7, #28]
 81029b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81029b8:	ee17 2a90 	vmov	r2, s15
 81029bc:	687b      	ldr	r3, [r7, #4]
 81029be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81029c0:	4b13      	ldr	r3, [pc, #76]	; (8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81029c4:	0e1b      	lsrs	r3, r3, #24
 81029c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81029ca:	ee07 3a90 	vmov	s15, r3
 81029ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81029d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81029da:	edd7 6a07 	vldr	s13, [r7, #28]
 81029de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81029e6:	ee17 2a90 	vmov	r2, s15
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81029ee:	e008      	b.n	8102a02 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	2200      	movs	r2, #0
 81029f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	2200      	movs	r2, #0
 81029fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81029fc:	687b      	ldr	r3, [r7, #4]
 81029fe:	2200      	movs	r2, #0
 8102a00:	609a      	str	r2, [r3, #8]
}
 8102a02:	bf00      	nop
 8102a04:	3724      	adds	r7, #36	; 0x24
 8102a06:	46bd      	mov	sp, r7
 8102a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a0c:	4770      	bx	lr
 8102a0e:	bf00      	nop
 8102a10:	58024400 	.word	0x58024400
 8102a14:	03d09000 	.word	0x03d09000
 8102a18:	46000000 	.word	0x46000000
 8102a1c:	4c742400 	.word	0x4c742400
 8102a20:	4a742400 	.word	0x4a742400
 8102a24:	4bbebc20 	.word	0x4bbebc20

08102a28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102a28:	b580      	push	{r7, lr}
 8102a2a:	b084      	sub	sp, #16
 8102a2c:	af00      	add	r7, sp, #0
 8102a2e:	6078      	str	r0, [r7, #4]
 8102a30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102a32:	2300      	movs	r3, #0
 8102a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102a36:	4b54      	ldr	r3, [pc, #336]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102a3a:	f003 0303 	and.w	r3, r3, #3
 8102a3e:	2b03      	cmp	r3, #3
 8102a40:	d101      	bne.n	8102a46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102a42:	2301      	movs	r3, #1
 8102a44:	e09b      	b.n	8102b7e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102a46:	4b50      	ldr	r3, [pc, #320]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102a48:	681b      	ldr	r3, [r3, #0]
 8102a4a:	4a4f      	ldr	r2, [pc, #316]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102a4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102a52:	f7fe f827 	bl	8100aa4 <HAL_GetTick>
 8102a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102a58:	e008      	b.n	8102a6c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102a5a:	f7fe f823 	bl	8100aa4 <HAL_GetTick>
 8102a5e:	4602      	mov	r2, r0
 8102a60:	68bb      	ldr	r3, [r7, #8]
 8102a62:	1ad3      	subs	r3, r2, r3
 8102a64:	2b02      	cmp	r3, #2
 8102a66:	d901      	bls.n	8102a6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102a68:	2303      	movs	r3, #3
 8102a6a:	e088      	b.n	8102b7e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102a6c:	4b46      	ldr	r3, [pc, #280]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102a6e:	681b      	ldr	r3, [r3, #0]
 8102a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102a74:	2b00      	cmp	r3, #0
 8102a76:	d1f0      	bne.n	8102a5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102a78:	4b43      	ldr	r3, [pc, #268]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102a7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102a80:	687b      	ldr	r3, [r7, #4]
 8102a82:	681b      	ldr	r3, [r3, #0]
 8102a84:	031b      	lsls	r3, r3, #12
 8102a86:	4940      	ldr	r1, [pc, #256]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102a88:	4313      	orrs	r3, r2
 8102a8a:	628b      	str	r3, [r1, #40]	; 0x28
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	685b      	ldr	r3, [r3, #4]
 8102a90:	3b01      	subs	r3, #1
 8102a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	689b      	ldr	r3, [r3, #8]
 8102a9a:	3b01      	subs	r3, #1
 8102a9c:	025b      	lsls	r3, r3, #9
 8102a9e:	b29b      	uxth	r3, r3
 8102aa0:	431a      	orrs	r2, r3
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	68db      	ldr	r3, [r3, #12]
 8102aa6:	3b01      	subs	r3, #1
 8102aa8:	041b      	lsls	r3, r3, #16
 8102aaa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102aae:	431a      	orrs	r2, r3
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	691b      	ldr	r3, [r3, #16]
 8102ab4:	3b01      	subs	r3, #1
 8102ab6:	061b      	lsls	r3, r3, #24
 8102ab8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102abc:	4932      	ldr	r1, [pc, #200]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102abe:	4313      	orrs	r3, r2
 8102ac0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102ac2:	4b31      	ldr	r3, [pc, #196]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ac6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	695b      	ldr	r3, [r3, #20]
 8102ace:	492e      	ldr	r1, [pc, #184]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102ad0:	4313      	orrs	r3, r2
 8102ad2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102ad4:	4b2c      	ldr	r3, [pc, #176]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ad8:	f023 0220 	bic.w	r2, r3, #32
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	699b      	ldr	r3, [r3, #24]
 8102ae0:	4929      	ldr	r1, [pc, #164]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102ae2:	4313      	orrs	r3, r2
 8102ae4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102ae6:	4b28      	ldr	r3, [pc, #160]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102aea:	4a27      	ldr	r2, [pc, #156]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102aec:	f023 0310 	bic.w	r3, r3, #16
 8102af0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102af2:	4b25      	ldr	r3, [pc, #148]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102afa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102afe:	687a      	ldr	r2, [r7, #4]
 8102b00:	69d2      	ldr	r2, [r2, #28]
 8102b02:	00d2      	lsls	r2, r2, #3
 8102b04:	4920      	ldr	r1, [pc, #128]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b06:	4313      	orrs	r3, r2
 8102b08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102b0a:	4b1f      	ldr	r3, [pc, #124]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b0e:	4a1e      	ldr	r2, [pc, #120]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b10:	f043 0310 	orr.w	r3, r3, #16
 8102b14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102b16:	683b      	ldr	r3, [r7, #0]
 8102b18:	2b00      	cmp	r3, #0
 8102b1a:	d106      	bne.n	8102b2a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102b1c:	4b1a      	ldr	r3, [pc, #104]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b20:	4a19      	ldr	r2, [pc, #100]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102b26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102b28:	e00f      	b.n	8102b4a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102b2a:	683b      	ldr	r3, [r7, #0]
 8102b2c:	2b01      	cmp	r3, #1
 8102b2e:	d106      	bne.n	8102b3e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102b30:	4b15      	ldr	r3, [pc, #84]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b34:	4a14      	ldr	r2, [pc, #80]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102b3c:	e005      	b.n	8102b4a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8102b3e:	4b12      	ldr	r3, [pc, #72]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b42:	4a11      	ldr	r2, [pc, #68]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102b48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102b4a:	4b0f      	ldr	r3, [pc, #60]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b4c:	681b      	ldr	r3, [r3, #0]
 8102b4e:	4a0e      	ldr	r2, [pc, #56]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102b56:	f7fd ffa5 	bl	8100aa4 <HAL_GetTick>
 8102b5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102b5c:	e008      	b.n	8102b70 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102b5e:	f7fd ffa1 	bl	8100aa4 <HAL_GetTick>
 8102b62:	4602      	mov	r2, r0
 8102b64:	68bb      	ldr	r3, [r7, #8]
 8102b66:	1ad3      	subs	r3, r2, r3
 8102b68:	2b02      	cmp	r3, #2
 8102b6a:	d901      	bls.n	8102b70 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102b6c:	2303      	movs	r3, #3
 8102b6e:	e006      	b.n	8102b7e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102b70:	4b05      	ldr	r3, [pc, #20]	; (8102b88 <RCCEx_PLL2_Config+0x160>)
 8102b72:	681b      	ldr	r3, [r3, #0]
 8102b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102b78:	2b00      	cmp	r3, #0
 8102b7a:	d0f0      	beq.n	8102b5e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8102b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8102b7e:	4618      	mov	r0, r3
 8102b80:	3710      	adds	r7, #16
 8102b82:	46bd      	mov	sp, r7
 8102b84:	bd80      	pop	{r7, pc}
 8102b86:	bf00      	nop
 8102b88:	58024400 	.word	0x58024400

08102b8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102b8c:	b580      	push	{r7, lr}
 8102b8e:	b084      	sub	sp, #16
 8102b90:	af00      	add	r7, sp, #0
 8102b92:	6078      	str	r0, [r7, #4]
 8102b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102b96:	2300      	movs	r3, #0
 8102b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102b9a:	4b54      	ldr	r3, [pc, #336]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b9e:	f003 0303 	and.w	r3, r3, #3
 8102ba2:	2b03      	cmp	r3, #3
 8102ba4:	d101      	bne.n	8102baa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102ba6:	2301      	movs	r3, #1
 8102ba8:	e09b      	b.n	8102ce2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102baa:	4b50      	ldr	r3, [pc, #320]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102bac:	681b      	ldr	r3, [r3, #0]
 8102bae:	4a4f      	ldr	r2, [pc, #316]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102bb6:	f7fd ff75 	bl	8100aa4 <HAL_GetTick>
 8102bba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102bbc:	e008      	b.n	8102bd0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102bbe:	f7fd ff71 	bl	8100aa4 <HAL_GetTick>
 8102bc2:	4602      	mov	r2, r0
 8102bc4:	68bb      	ldr	r3, [r7, #8]
 8102bc6:	1ad3      	subs	r3, r2, r3
 8102bc8:	2b02      	cmp	r3, #2
 8102bca:	d901      	bls.n	8102bd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102bcc:	2303      	movs	r3, #3
 8102bce:	e088      	b.n	8102ce2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102bd0:	4b46      	ldr	r3, [pc, #280]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102bd8:	2b00      	cmp	r3, #0
 8102bda:	d1f0      	bne.n	8102bbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102bdc:	4b43      	ldr	r3, [pc, #268]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102be0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8102be4:	687b      	ldr	r3, [r7, #4]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	051b      	lsls	r3, r3, #20
 8102bea:	4940      	ldr	r1, [pc, #256]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102bec:	4313      	orrs	r3, r2
 8102bee:	628b      	str	r3, [r1, #40]	; 0x28
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	685b      	ldr	r3, [r3, #4]
 8102bf4:	3b01      	subs	r3, #1
 8102bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102bfa:	687b      	ldr	r3, [r7, #4]
 8102bfc:	689b      	ldr	r3, [r3, #8]
 8102bfe:	3b01      	subs	r3, #1
 8102c00:	025b      	lsls	r3, r3, #9
 8102c02:	b29b      	uxth	r3, r3
 8102c04:	431a      	orrs	r2, r3
 8102c06:	687b      	ldr	r3, [r7, #4]
 8102c08:	68db      	ldr	r3, [r3, #12]
 8102c0a:	3b01      	subs	r3, #1
 8102c0c:	041b      	lsls	r3, r3, #16
 8102c0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102c12:	431a      	orrs	r2, r3
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	691b      	ldr	r3, [r3, #16]
 8102c18:	3b01      	subs	r3, #1
 8102c1a:	061b      	lsls	r3, r3, #24
 8102c1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102c20:	4932      	ldr	r1, [pc, #200]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c22:	4313      	orrs	r3, r2
 8102c24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102c26:	4b31      	ldr	r3, [pc, #196]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	695b      	ldr	r3, [r3, #20]
 8102c32:	492e      	ldr	r1, [pc, #184]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c34:	4313      	orrs	r3, r2
 8102c36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102c38:	4b2c      	ldr	r3, [pc, #176]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8102c40:	687b      	ldr	r3, [r7, #4]
 8102c42:	699b      	ldr	r3, [r3, #24]
 8102c44:	4929      	ldr	r1, [pc, #164]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c46:	4313      	orrs	r3, r2
 8102c48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102c4a:	4b28      	ldr	r3, [pc, #160]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c4e:	4a27      	ldr	r2, [pc, #156]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102c54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102c56:	4b25      	ldr	r3, [pc, #148]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102c5e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102c62:	687a      	ldr	r2, [r7, #4]
 8102c64:	69d2      	ldr	r2, [r2, #28]
 8102c66:	00d2      	lsls	r2, r2, #3
 8102c68:	4920      	ldr	r1, [pc, #128]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c6a:	4313      	orrs	r3, r2
 8102c6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8102c6e:	4b1f      	ldr	r3, [pc, #124]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c72:	4a1e      	ldr	r2, [pc, #120]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102c78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102c7a:	683b      	ldr	r3, [r7, #0]
 8102c7c:	2b00      	cmp	r3, #0
 8102c7e:	d106      	bne.n	8102c8e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8102c80:	4b1a      	ldr	r3, [pc, #104]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c84:	4a19      	ldr	r2, [pc, #100]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102c8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102c8c:	e00f      	b.n	8102cae <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102c8e:	683b      	ldr	r3, [r7, #0]
 8102c90:	2b01      	cmp	r3, #1
 8102c92:	d106      	bne.n	8102ca2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102c94:	4b15      	ldr	r3, [pc, #84]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c98:	4a14      	ldr	r2, [pc, #80]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102c9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102c9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102ca0:	e005      	b.n	8102cae <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8102ca2:	4b12      	ldr	r3, [pc, #72]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ca6:	4a11      	ldr	r2, [pc, #68]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102ca8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102cac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8102cae:	4b0f      	ldr	r3, [pc, #60]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102cb0:	681b      	ldr	r3, [r3, #0]
 8102cb2:	4a0e      	ldr	r2, [pc, #56]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102cba:	f7fd fef3 	bl	8100aa4 <HAL_GetTick>
 8102cbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102cc0:	e008      	b.n	8102cd4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102cc2:	f7fd feef 	bl	8100aa4 <HAL_GetTick>
 8102cc6:	4602      	mov	r2, r0
 8102cc8:	68bb      	ldr	r3, [r7, #8]
 8102cca:	1ad3      	subs	r3, r2, r3
 8102ccc:	2b02      	cmp	r3, #2
 8102cce:	d901      	bls.n	8102cd4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102cd0:	2303      	movs	r3, #3
 8102cd2:	e006      	b.n	8102ce2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102cd4:	4b05      	ldr	r3, [pc, #20]	; (8102cec <RCCEx_PLL3_Config+0x160>)
 8102cd6:	681b      	ldr	r3, [r3, #0]
 8102cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102cdc:	2b00      	cmp	r3, #0
 8102cde:	d0f0      	beq.n	8102cc2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8102ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8102ce2:	4618      	mov	r0, r3
 8102ce4:	3710      	adds	r7, #16
 8102ce6:	46bd      	mov	sp, r7
 8102ce8:	bd80      	pop	{r7, pc}
 8102cea:	bf00      	nop
 8102cec:	58024400 	.word	0x58024400

08102cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8102cf0:	b580      	push	{r7, lr}
 8102cf2:	b082      	sub	sp, #8
 8102cf4:	af00      	add	r7, sp, #0
 8102cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	2b00      	cmp	r3, #0
 8102cfc:	d101      	bne.n	8102d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8102cfe:	2301      	movs	r3, #1
 8102d00:	e042      	b.n	8102d88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8102d02:	687b      	ldr	r3, [r7, #4]
 8102d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102d08:	2b00      	cmp	r3, #0
 8102d0a:	d106      	bne.n	8102d1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8102d0c:	687b      	ldr	r3, [r7, #4]
 8102d0e:	2200      	movs	r2, #0
 8102d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8102d14:	6878      	ldr	r0, [r7, #4]
 8102d16:	f7fd fd8d 	bl	8100834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	2224      	movs	r2, #36	; 0x24
 8102d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	681b      	ldr	r3, [r3, #0]
 8102d26:	681a      	ldr	r2, [r3, #0]
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	f022 0201 	bic.w	r2, r2, #1
 8102d30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8102d32:	6878      	ldr	r0, [r7, #4]
 8102d34:	f000 f8c2 	bl	8102ebc <UART_SetConfig>
 8102d38:	4603      	mov	r3, r0
 8102d3a:	2b01      	cmp	r3, #1
 8102d3c:	d101      	bne.n	8102d42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8102d3e:	2301      	movs	r3, #1
 8102d40:	e022      	b.n	8102d88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102d46:	2b00      	cmp	r3, #0
 8102d48:	d002      	beq.n	8102d50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8102d4a:	6878      	ldr	r0, [r7, #4]
 8102d4c:	f000 fe16 	bl	810397c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	685a      	ldr	r2, [r3, #4]
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8102d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	681b      	ldr	r3, [r3, #0]
 8102d64:	689a      	ldr	r2, [r3, #8]
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	681b      	ldr	r3, [r3, #0]
 8102d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8102d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8102d70:	687b      	ldr	r3, [r7, #4]
 8102d72:	681b      	ldr	r3, [r3, #0]
 8102d74:	681a      	ldr	r2, [r3, #0]
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	681b      	ldr	r3, [r3, #0]
 8102d7a:	f042 0201 	orr.w	r2, r2, #1
 8102d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8102d80:	6878      	ldr	r0, [r7, #4]
 8102d82:	f000 fe9d 	bl	8103ac0 <UART_CheckIdleState>
 8102d86:	4603      	mov	r3, r0
}
 8102d88:	4618      	mov	r0, r3
 8102d8a:	3708      	adds	r7, #8
 8102d8c:	46bd      	mov	sp, r7
 8102d8e:	bd80      	pop	{r7, pc}

08102d90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102d90:	b580      	push	{r7, lr}
 8102d92:	b08a      	sub	sp, #40	; 0x28
 8102d94:	af02      	add	r7, sp, #8
 8102d96:	60f8      	str	r0, [r7, #12]
 8102d98:	60b9      	str	r1, [r7, #8]
 8102d9a:	603b      	str	r3, [r7, #0]
 8102d9c:	4613      	mov	r3, r2
 8102d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8102da0:	68fb      	ldr	r3, [r7, #12]
 8102da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102da6:	2b20      	cmp	r3, #32
 8102da8:	f040 8083 	bne.w	8102eb2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8102dac:	68bb      	ldr	r3, [r7, #8]
 8102dae:	2b00      	cmp	r3, #0
 8102db0:	d002      	beq.n	8102db8 <HAL_UART_Transmit+0x28>
 8102db2:	88fb      	ldrh	r3, [r7, #6]
 8102db4:	2b00      	cmp	r3, #0
 8102db6:	d101      	bne.n	8102dbc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8102db8:	2301      	movs	r3, #1
 8102dba:	e07b      	b.n	8102eb4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8102dbc:	68fb      	ldr	r3, [r7, #12]
 8102dbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8102dc2:	2b01      	cmp	r3, #1
 8102dc4:	d101      	bne.n	8102dca <HAL_UART_Transmit+0x3a>
 8102dc6:	2302      	movs	r3, #2
 8102dc8:	e074      	b.n	8102eb4 <HAL_UART_Transmit+0x124>
 8102dca:	68fb      	ldr	r3, [r7, #12]
 8102dcc:	2201      	movs	r2, #1
 8102dce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8102dd2:	68fb      	ldr	r3, [r7, #12]
 8102dd4:	2200      	movs	r2, #0
 8102dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8102dda:	68fb      	ldr	r3, [r7, #12]
 8102ddc:	2221      	movs	r2, #33	; 0x21
 8102dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8102de2:	f7fd fe5f 	bl	8100aa4 <HAL_GetTick>
 8102de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8102de8:	68fb      	ldr	r3, [r7, #12]
 8102dea:	88fa      	ldrh	r2, [r7, #6]
 8102dec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8102df0:	68fb      	ldr	r3, [r7, #12]
 8102df2:	88fa      	ldrh	r2, [r7, #6]
 8102df4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8102df8:	68fb      	ldr	r3, [r7, #12]
 8102dfa:	689b      	ldr	r3, [r3, #8]
 8102dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102e00:	d108      	bne.n	8102e14 <HAL_UART_Transmit+0x84>
 8102e02:	68fb      	ldr	r3, [r7, #12]
 8102e04:	691b      	ldr	r3, [r3, #16]
 8102e06:	2b00      	cmp	r3, #0
 8102e08:	d104      	bne.n	8102e14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8102e0a:	2300      	movs	r3, #0
 8102e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8102e0e:	68bb      	ldr	r3, [r7, #8]
 8102e10:	61bb      	str	r3, [r7, #24]
 8102e12:	e003      	b.n	8102e1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8102e14:	68bb      	ldr	r3, [r7, #8]
 8102e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8102e18:	2300      	movs	r3, #0
 8102e1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8102e1c:	68fb      	ldr	r3, [r7, #12]
 8102e1e:	2200      	movs	r2, #0
 8102e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8102e24:	e02c      	b.n	8102e80 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8102e26:	683b      	ldr	r3, [r7, #0]
 8102e28:	9300      	str	r3, [sp, #0]
 8102e2a:	697b      	ldr	r3, [r7, #20]
 8102e2c:	2200      	movs	r2, #0
 8102e2e:	2180      	movs	r1, #128	; 0x80
 8102e30:	68f8      	ldr	r0, [r7, #12]
 8102e32:	f000 fe90 	bl	8103b56 <UART_WaitOnFlagUntilTimeout>
 8102e36:	4603      	mov	r3, r0
 8102e38:	2b00      	cmp	r3, #0
 8102e3a:	d001      	beq.n	8102e40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8102e3c:	2303      	movs	r3, #3
 8102e3e:	e039      	b.n	8102eb4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8102e40:	69fb      	ldr	r3, [r7, #28]
 8102e42:	2b00      	cmp	r3, #0
 8102e44:	d10b      	bne.n	8102e5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8102e46:	69bb      	ldr	r3, [r7, #24]
 8102e48:	881b      	ldrh	r3, [r3, #0]
 8102e4a:	461a      	mov	r2, r3
 8102e4c:	68fb      	ldr	r3, [r7, #12]
 8102e4e:	681b      	ldr	r3, [r3, #0]
 8102e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8102e54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8102e56:	69bb      	ldr	r3, [r7, #24]
 8102e58:	3302      	adds	r3, #2
 8102e5a:	61bb      	str	r3, [r7, #24]
 8102e5c:	e007      	b.n	8102e6e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8102e5e:	69fb      	ldr	r3, [r7, #28]
 8102e60:	781a      	ldrb	r2, [r3, #0]
 8102e62:	68fb      	ldr	r3, [r7, #12]
 8102e64:	681b      	ldr	r3, [r3, #0]
 8102e66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8102e68:	69fb      	ldr	r3, [r7, #28]
 8102e6a:	3301      	adds	r3, #1
 8102e6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8102e6e:	68fb      	ldr	r3, [r7, #12]
 8102e70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8102e74:	b29b      	uxth	r3, r3
 8102e76:	3b01      	subs	r3, #1
 8102e78:	b29a      	uxth	r2, r3
 8102e7a:	68fb      	ldr	r3, [r7, #12]
 8102e7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8102e86:	b29b      	uxth	r3, r3
 8102e88:	2b00      	cmp	r3, #0
 8102e8a:	d1cc      	bne.n	8102e26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8102e8c:	683b      	ldr	r3, [r7, #0]
 8102e8e:	9300      	str	r3, [sp, #0]
 8102e90:	697b      	ldr	r3, [r7, #20]
 8102e92:	2200      	movs	r2, #0
 8102e94:	2140      	movs	r1, #64	; 0x40
 8102e96:	68f8      	ldr	r0, [r7, #12]
 8102e98:	f000 fe5d 	bl	8103b56 <UART_WaitOnFlagUntilTimeout>
 8102e9c:	4603      	mov	r3, r0
 8102e9e:	2b00      	cmp	r3, #0
 8102ea0:	d001      	beq.n	8102ea6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8102ea2:	2303      	movs	r3, #3
 8102ea4:	e006      	b.n	8102eb4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8102ea6:	68fb      	ldr	r3, [r7, #12]
 8102ea8:	2220      	movs	r2, #32
 8102eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8102eae:	2300      	movs	r3, #0
 8102eb0:	e000      	b.n	8102eb4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8102eb2:	2302      	movs	r3, #2
  }
}
 8102eb4:	4618      	mov	r0, r3
 8102eb6:	3720      	adds	r7, #32
 8102eb8:	46bd      	mov	sp, r7
 8102eba:	bd80      	pop	{r7, pc}

08102ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8102ebc:	b5b0      	push	{r4, r5, r7, lr}
 8102ebe:	b08e      	sub	sp, #56	; 0x38
 8102ec0:	af00      	add	r7, sp, #0
 8102ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8102ec4:	2300      	movs	r3, #0
 8102ec6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8102eca:	687b      	ldr	r3, [r7, #4]
 8102ecc:	689a      	ldr	r2, [r3, #8]
 8102ece:	687b      	ldr	r3, [r7, #4]
 8102ed0:	691b      	ldr	r3, [r3, #16]
 8102ed2:	431a      	orrs	r2, r3
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	695b      	ldr	r3, [r3, #20]
 8102ed8:	431a      	orrs	r2, r3
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	69db      	ldr	r3, [r3, #28]
 8102ede:	4313      	orrs	r3, r2
 8102ee0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	681a      	ldr	r2, [r3, #0]
 8102ee8:	4bc0      	ldr	r3, [pc, #768]	; (81031ec <UART_SetConfig+0x330>)
 8102eea:	4013      	ands	r3, r2
 8102eec:	687a      	ldr	r2, [r7, #4]
 8102eee:	6812      	ldr	r2, [r2, #0]
 8102ef0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8102ef2:	430b      	orrs	r3, r1
 8102ef4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	681b      	ldr	r3, [r3, #0]
 8102efa:	685b      	ldr	r3, [r3, #4]
 8102efc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8102f00:	687b      	ldr	r3, [r7, #4]
 8102f02:	68da      	ldr	r2, [r3, #12]
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	430a      	orrs	r2, r1
 8102f0a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8102f0c:	687b      	ldr	r3, [r7, #4]
 8102f0e:	699b      	ldr	r3, [r3, #24]
 8102f10:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	4ab6      	ldr	r2, [pc, #728]	; (81031f0 <UART_SetConfig+0x334>)
 8102f18:	4293      	cmp	r3, r2
 8102f1a:	d004      	beq.n	8102f26 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	6a1b      	ldr	r3, [r3, #32]
 8102f20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102f22:	4313      	orrs	r3, r2
 8102f24:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8102f26:	687b      	ldr	r3, [r7, #4]
 8102f28:	681b      	ldr	r3, [r3, #0]
 8102f2a:	689b      	ldr	r3, [r3, #8]
 8102f2c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8102f30:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8102f34:	687a      	ldr	r2, [r7, #4]
 8102f36:	6812      	ldr	r2, [r2, #0]
 8102f38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8102f3a:	430b      	orrs	r3, r1
 8102f3c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8102f3e:	687b      	ldr	r3, [r7, #4]
 8102f40:	681b      	ldr	r3, [r3, #0]
 8102f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f44:	f023 010f 	bic.w	r1, r3, #15
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	681b      	ldr	r3, [r3, #0]
 8102f50:	430a      	orrs	r2, r1
 8102f52:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	4aa6      	ldr	r2, [pc, #664]	; (81031f4 <UART_SetConfig+0x338>)
 8102f5a:	4293      	cmp	r3, r2
 8102f5c:	d176      	bne.n	810304c <UART_SetConfig+0x190>
 8102f5e:	4ba6      	ldr	r3, [pc, #664]	; (81031f8 <UART_SetConfig+0x33c>)
 8102f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102f66:	2b28      	cmp	r3, #40	; 0x28
 8102f68:	d86c      	bhi.n	8103044 <UART_SetConfig+0x188>
 8102f6a:	a201      	add	r2, pc, #4	; (adr r2, 8102f70 <UART_SetConfig+0xb4>)
 8102f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102f70:	08103015 	.word	0x08103015
 8102f74:	08103045 	.word	0x08103045
 8102f78:	08103045 	.word	0x08103045
 8102f7c:	08103045 	.word	0x08103045
 8102f80:	08103045 	.word	0x08103045
 8102f84:	08103045 	.word	0x08103045
 8102f88:	08103045 	.word	0x08103045
 8102f8c:	08103045 	.word	0x08103045
 8102f90:	0810301d 	.word	0x0810301d
 8102f94:	08103045 	.word	0x08103045
 8102f98:	08103045 	.word	0x08103045
 8102f9c:	08103045 	.word	0x08103045
 8102fa0:	08103045 	.word	0x08103045
 8102fa4:	08103045 	.word	0x08103045
 8102fa8:	08103045 	.word	0x08103045
 8102fac:	08103045 	.word	0x08103045
 8102fb0:	08103025 	.word	0x08103025
 8102fb4:	08103045 	.word	0x08103045
 8102fb8:	08103045 	.word	0x08103045
 8102fbc:	08103045 	.word	0x08103045
 8102fc0:	08103045 	.word	0x08103045
 8102fc4:	08103045 	.word	0x08103045
 8102fc8:	08103045 	.word	0x08103045
 8102fcc:	08103045 	.word	0x08103045
 8102fd0:	0810302d 	.word	0x0810302d
 8102fd4:	08103045 	.word	0x08103045
 8102fd8:	08103045 	.word	0x08103045
 8102fdc:	08103045 	.word	0x08103045
 8102fe0:	08103045 	.word	0x08103045
 8102fe4:	08103045 	.word	0x08103045
 8102fe8:	08103045 	.word	0x08103045
 8102fec:	08103045 	.word	0x08103045
 8102ff0:	08103035 	.word	0x08103035
 8102ff4:	08103045 	.word	0x08103045
 8102ff8:	08103045 	.word	0x08103045
 8102ffc:	08103045 	.word	0x08103045
 8103000:	08103045 	.word	0x08103045
 8103004:	08103045 	.word	0x08103045
 8103008:	08103045 	.word	0x08103045
 810300c:	08103045 	.word	0x08103045
 8103010:	0810303d 	.word	0x0810303d
 8103014:	2301      	movs	r3, #1
 8103016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810301a:	e220      	b.n	810345e <UART_SetConfig+0x5a2>
 810301c:	2304      	movs	r3, #4
 810301e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103022:	e21c      	b.n	810345e <UART_SetConfig+0x5a2>
 8103024:	2308      	movs	r3, #8
 8103026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810302a:	e218      	b.n	810345e <UART_SetConfig+0x5a2>
 810302c:	2310      	movs	r3, #16
 810302e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103032:	e214      	b.n	810345e <UART_SetConfig+0x5a2>
 8103034:	2320      	movs	r3, #32
 8103036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810303a:	e210      	b.n	810345e <UART_SetConfig+0x5a2>
 810303c:	2340      	movs	r3, #64	; 0x40
 810303e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103042:	e20c      	b.n	810345e <UART_SetConfig+0x5a2>
 8103044:	2380      	movs	r3, #128	; 0x80
 8103046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810304a:	e208      	b.n	810345e <UART_SetConfig+0x5a2>
 810304c:	687b      	ldr	r3, [r7, #4]
 810304e:	681b      	ldr	r3, [r3, #0]
 8103050:	4a6a      	ldr	r2, [pc, #424]	; (81031fc <UART_SetConfig+0x340>)
 8103052:	4293      	cmp	r3, r2
 8103054:	d130      	bne.n	81030b8 <UART_SetConfig+0x1fc>
 8103056:	4b68      	ldr	r3, [pc, #416]	; (81031f8 <UART_SetConfig+0x33c>)
 8103058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810305a:	f003 0307 	and.w	r3, r3, #7
 810305e:	2b05      	cmp	r3, #5
 8103060:	d826      	bhi.n	81030b0 <UART_SetConfig+0x1f4>
 8103062:	a201      	add	r2, pc, #4	; (adr r2, 8103068 <UART_SetConfig+0x1ac>)
 8103064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103068:	08103081 	.word	0x08103081
 810306c:	08103089 	.word	0x08103089
 8103070:	08103091 	.word	0x08103091
 8103074:	08103099 	.word	0x08103099
 8103078:	081030a1 	.word	0x081030a1
 810307c:	081030a9 	.word	0x081030a9
 8103080:	2300      	movs	r3, #0
 8103082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103086:	e1ea      	b.n	810345e <UART_SetConfig+0x5a2>
 8103088:	2304      	movs	r3, #4
 810308a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810308e:	e1e6      	b.n	810345e <UART_SetConfig+0x5a2>
 8103090:	2308      	movs	r3, #8
 8103092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103096:	e1e2      	b.n	810345e <UART_SetConfig+0x5a2>
 8103098:	2310      	movs	r3, #16
 810309a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810309e:	e1de      	b.n	810345e <UART_SetConfig+0x5a2>
 81030a0:	2320      	movs	r3, #32
 81030a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030a6:	e1da      	b.n	810345e <UART_SetConfig+0x5a2>
 81030a8:	2340      	movs	r3, #64	; 0x40
 81030aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030ae:	e1d6      	b.n	810345e <UART_SetConfig+0x5a2>
 81030b0:	2380      	movs	r3, #128	; 0x80
 81030b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030b6:	e1d2      	b.n	810345e <UART_SetConfig+0x5a2>
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	681b      	ldr	r3, [r3, #0]
 81030bc:	4a50      	ldr	r2, [pc, #320]	; (8103200 <UART_SetConfig+0x344>)
 81030be:	4293      	cmp	r3, r2
 81030c0:	d130      	bne.n	8103124 <UART_SetConfig+0x268>
 81030c2:	4b4d      	ldr	r3, [pc, #308]	; (81031f8 <UART_SetConfig+0x33c>)
 81030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030c6:	f003 0307 	and.w	r3, r3, #7
 81030ca:	2b05      	cmp	r3, #5
 81030cc:	d826      	bhi.n	810311c <UART_SetConfig+0x260>
 81030ce:	a201      	add	r2, pc, #4	; (adr r2, 81030d4 <UART_SetConfig+0x218>)
 81030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81030d4:	081030ed 	.word	0x081030ed
 81030d8:	081030f5 	.word	0x081030f5
 81030dc:	081030fd 	.word	0x081030fd
 81030e0:	08103105 	.word	0x08103105
 81030e4:	0810310d 	.word	0x0810310d
 81030e8:	08103115 	.word	0x08103115
 81030ec:	2300      	movs	r3, #0
 81030ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030f2:	e1b4      	b.n	810345e <UART_SetConfig+0x5a2>
 81030f4:	2304      	movs	r3, #4
 81030f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030fa:	e1b0      	b.n	810345e <UART_SetConfig+0x5a2>
 81030fc:	2308      	movs	r3, #8
 81030fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103102:	e1ac      	b.n	810345e <UART_SetConfig+0x5a2>
 8103104:	2310      	movs	r3, #16
 8103106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810310a:	e1a8      	b.n	810345e <UART_SetConfig+0x5a2>
 810310c:	2320      	movs	r3, #32
 810310e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103112:	e1a4      	b.n	810345e <UART_SetConfig+0x5a2>
 8103114:	2340      	movs	r3, #64	; 0x40
 8103116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810311a:	e1a0      	b.n	810345e <UART_SetConfig+0x5a2>
 810311c:	2380      	movs	r3, #128	; 0x80
 810311e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103122:	e19c      	b.n	810345e <UART_SetConfig+0x5a2>
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	4a36      	ldr	r2, [pc, #216]	; (8103204 <UART_SetConfig+0x348>)
 810312a:	4293      	cmp	r3, r2
 810312c:	d130      	bne.n	8103190 <UART_SetConfig+0x2d4>
 810312e:	4b32      	ldr	r3, [pc, #200]	; (81031f8 <UART_SetConfig+0x33c>)
 8103130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103132:	f003 0307 	and.w	r3, r3, #7
 8103136:	2b05      	cmp	r3, #5
 8103138:	d826      	bhi.n	8103188 <UART_SetConfig+0x2cc>
 810313a:	a201      	add	r2, pc, #4	; (adr r2, 8103140 <UART_SetConfig+0x284>)
 810313c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103140:	08103159 	.word	0x08103159
 8103144:	08103161 	.word	0x08103161
 8103148:	08103169 	.word	0x08103169
 810314c:	08103171 	.word	0x08103171
 8103150:	08103179 	.word	0x08103179
 8103154:	08103181 	.word	0x08103181
 8103158:	2300      	movs	r3, #0
 810315a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810315e:	e17e      	b.n	810345e <UART_SetConfig+0x5a2>
 8103160:	2304      	movs	r3, #4
 8103162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103166:	e17a      	b.n	810345e <UART_SetConfig+0x5a2>
 8103168:	2308      	movs	r3, #8
 810316a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810316e:	e176      	b.n	810345e <UART_SetConfig+0x5a2>
 8103170:	2310      	movs	r3, #16
 8103172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103176:	e172      	b.n	810345e <UART_SetConfig+0x5a2>
 8103178:	2320      	movs	r3, #32
 810317a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810317e:	e16e      	b.n	810345e <UART_SetConfig+0x5a2>
 8103180:	2340      	movs	r3, #64	; 0x40
 8103182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103186:	e16a      	b.n	810345e <UART_SetConfig+0x5a2>
 8103188:	2380      	movs	r3, #128	; 0x80
 810318a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810318e:	e166      	b.n	810345e <UART_SetConfig+0x5a2>
 8103190:	687b      	ldr	r3, [r7, #4]
 8103192:	681b      	ldr	r3, [r3, #0]
 8103194:	4a1c      	ldr	r2, [pc, #112]	; (8103208 <UART_SetConfig+0x34c>)
 8103196:	4293      	cmp	r3, r2
 8103198:	d140      	bne.n	810321c <UART_SetConfig+0x360>
 810319a:	4b17      	ldr	r3, [pc, #92]	; (81031f8 <UART_SetConfig+0x33c>)
 810319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810319e:	f003 0307 	and.w	r3, r3, #7
 81031a2:	2b05      	cmp	r3, #5
 81031a4:	d836      	bhi.n	8103214 <UART_SetConfig+0x358>
 81031a6:	a201      	add	r2, pc, #4	; (adr r2, 81031ac <UART_SetConfig+0x2f0>)
 81031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031ac:	081031c5 	.word	0x081031c5
 81031b0:	081031cd 	.word	0x081031cd
 81031b4:	081031d5 	.word	0x081031d5
 81031b8:	081031dd 	.word	0x081031dd
 81031bc:	081031e5 	.word	0x081031e5
 81031c0:	0810320d 	.word	0x0810320d
 81031c4:	2300      	movs	r3, #0
 81031c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031ca:	e148      	b.n	810345e <UART_SetConfig+0x5a2>
 81031cc:	2304      	movs	r3, #4
 81031ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031d2:	e144      	b.n	810345e <UART_SetConfig+0x5a2>
 81031d4:	2308      	movs	r3, #8
 81031d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031da:	e140      	b.n	810345e <UART_SetConfig+0x5a2>
 81031dc:	2310      	movs	r3, #16
 81031de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031e2:	e13c      	b.n	810345e <UART_SetConfig+0x5a2>
 81031e4:	2320      	movs	r3, #32
 81031e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031ea:	e138      	b.n	810345e <UART_SetConfig+0x5a2>
 81031ec:	cfff69f3 	.word	0xcfff69f3
 81031f0:	58000c00 	.word	0x58000c00
 81031f4:	40011000 	.word	0x40011000
 81031f8:	58024400 	.word	0x58024400
 81031fc:	40004400 	.word	0x40004400
 8103200:	40004800 	.word	0x40004800
 8103204:	40004c00 	.word	0x40004c00
 8103208:	40005000 	.word	0x40005000
 810320c:	2340      	movs	r3, #64	; 0x40
 810320e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103212:	e124      	b.n	810345e <UART_SetConfig+0x5a2>
 8103214:	2380      	movs	r3, #128	; 0x80
 8103216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810321a:	e120      	b.n	810345e <UART_SetConfig+0x5a2>
 810321c:	687b      	ldr	r3, [r7, #4]
 810321e:	681b      	ldr	r3, [r3, #0]
 8103220:	4acc      	ldr	r2, [pc, #816]	; (8103554 <UART_SetConfig+0x698>)
 8103222:	4293      	cmp	r3, r2
 8103224:	d176      	bne.n	8103314 <UART_SetConfig+0x458>
 8103226:	4bcc      	ldr	r3, [pc, #816]	; (8103558 <UART_SetConfig+0x69c>)
 8103228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810322a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810322e:	2b28      	cmp	r3, #40	; 0x28
 8103230:	d86c      	bhi.n	810330c <UART_SetConfig+0x450>
 8103232:	a201      	add	r2, pc, #4	; (adr r2, 8103238 <UART_SetConfig+0x37c>)
 8103234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103238:	081032dd 	.word	0x081032dd
 810323c:	0810330d 	.word	0x0810330d
 8103240:	0810330d 	.word	0x0810330d
 8103244:	0810330d 	.word	0x0810330d
 8103248:	0810330d 	.word	0x0810330d
 810324c:	0810330d 	.word	0x0810330d
 8103250:	0810330d 	.word	0x0810330d
 8103254:	0810330d 	.word	0x0810330d
 8103258:	081032e5 	.word	0x081032e5
 810325c:	0810330d 	.word	0x0810330d
 8103260:	0810330d 	.word	0x0810330d
 8103264:	0810330d 	.word	0x0810330d
 8103268:	0810330d 	.word	0x0810330d
 810326c:	0810330d 	.word	0x0810330d
 8103270:	0810330d 	.word	0x0810330d
 8103274:	0810330d 	.word	0x0810330d
 8103278:	081032ed 	.word	0x081032ed
 810327c:	0810330d 	.word	0x0810330d
 8103280:	0810330d 	.word	0x0810330d
 8103284:	0810330d 	.word	0x0810330d
 8103288:	0810330d 	.word	0x0810330d
 810328c:	0810330d 	.word	0x0810330d
 8103290:	0810330d 	.word	0x0810330d
 8103294:	0810330d 	.word	0x0810330d
 8103298:	081032f5 	.word	0x081032f5
 810329c:	0810330d 	.word	0x0810330d
 81032a0:	0810330d 	.word	0x0810330d
 81032a4:	0810330d 	.word	0x0810330d
 81032a8:	0810330d 	.word	0x0810330d
 81032ac:	0810330d 	.word	0x0810330d
 81032b0:	0810330d 	.word	0x0810330d
 81032b4:	0810330d 	.word	0x0810330d
 81032b8:	081032fd 	.word	0x081032fd
 81032bc:	0810330d 	.word	0x0810330d
 81032c0:	0810330d 	.word	0x0810330d
 81032c4:	0810330d 	.word	0x0810330d
 81032c8:	0810330d 	.word	0x0810330d
 81032cc:	0810330d 	.word	0x0810330d
 81032d0:	0810330d 	.word	0x0810330d
 81032d4:	0810330d 	.word	0x0810330d
 81032d8:	08103305 	.word	0x08103305
 81032dc:	2301      	movs	r3, #1
 81032de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81032e2:	e0bc      	b.n	810345e <UART_SetConfig+0x5a2>
 81032e4:	2304      	movs	r3, #4
 81032e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81032ea:	e0b8      	b.n	810345e <UART_SetConfig+0x5a2>
 81032ec:	2308      	movs	r3, #8
 81032ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81032f2:	e0b4      	b.n	810345e <UART_SetConfig+0x5a2>
 81032f4:	2310      	movs	r3, #16
 81032f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81032fa:	e0b0      	b.n	810345e <UART_SetConfig+0x5a2>
 81032fc:	2320      	movs	r3, #32
 81032fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103302:	e0ac      	b.n	810345e <UART_SetConfig+0x5a2>
 8103304:	2340      	movs	r3, #64	; 0x40
 8103306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810330a:	e0a8      	b.n	810345e <UART_SetConfig+0x5a2>
 810330c:	2380      	movs	r3, #128	; 0x80
 810330e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103312:	e0a4      	b.n	810345e <UART_SetConfig+0x5a2>
 8103314:	687b      	ldr	r3, [r7, #4]
 8103316:	681b      	ldr	r3, [r3, #0]
 8103318:	4a90      	ldr	r2, [pc, #576]	; (810355c <UART_SetConfig+0x6a0>)
 810331a:	4293      	cmp	r3, r2
 810331c:	d130      	bne.n	8103380 <UART_SetConfig+0x4c4>
 810331e:	4b8e      	ldr	r3, [pc, #568]	; (8103558 <UART_SetConfig+0x69c>)
 8103320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103322:	f003 0307 	and.w	r3, r3, #7
 8103326:	2b05      	cmp	r3, #5
 8103328:	d826      	bhi.n	8103378 <UART_SetConfig+0x4bc>
 810332a:	a201      	add	r2, pc, #4	; (adr r2, 8103330 <UART_SetConfig+0x474>)
 810332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103330:	08103349 	.word	0x08103349
 8103334:	08103351 	.word	0x08103351
 8103338:	08103359 	.word	0x08103359
 810333c:	08103361 	.word	0x08103361
 8103340:	08103369 	.word	0x08103369
 8103344:	08103371 	.word	0x08103371
 8103348:	2300      	movs	r3, #0
 810334a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810334e:	e086      	b.n	810345e <UART_SetConfig+0x5a2>
 8103350:	2304      	movs	r3, #4
 8103352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103356:	e082      	b.n	810345e <UART_SetConfig+0x5a2>
 8103358:	2308      	movs	r3, #8
 810335a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810335e:	e07e      	b.n	810345e <UART_SetConfig+0x5a2>
 8103360:	2310      	movs	r3, #16
 8103362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103366:	e07a      	b.n	810345e <UART_SetConfig+0x5a2>
 8103368:	2320      	movs	r3, #32
 810336a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810336e:	e076      	b.n	810345e <UART_SetConfig+0x5a2>
 8103370:	2340      	movs	r3, #64	; 0x40
 8103372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103376:	e072      	b.n	810345e <UART_SetConfig+0x5a2>
 8103378:	2380      	movs	r3, #128	; 0x80
 810337a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810337e:	e06e      	b.n	810345e <UART_SetConfig+0x5a2>
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	4a76      	ldr	r2, [pc, #472]	; (8103560 <UART_SetConfig+0x6a4>)
 8103386:	4293      	cmp	r3, r2
 8103388:	d130      	bne.n	81033ec <UART_SetConfig+0x530>
 810338a:	4b73      	ldr	r3, [pc, #460]	; (8103558 <UART_SetConfig+0x69c>)
 810338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810338e:	f003 0307 	and.w	r3, r3, #7
 8103392:	2b05      	cmp	r3, #5
 8103394:	d826      	bhi.n	81033e4 <UART_SetConfig+0x528>
 8103396:	a201      	add	r2, pc, #4	; (adr r2, 810339c <UART_SetConfig+0x4e0>)
 8103398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810339c:	081033b5 	.word	0x081033b5
 81033a0:	081033bd 	.word	0x081033bd
 81033a4:	081033c5 	.word	0x081033c5
 81033a8:	081033cd 	.word	0x081033cd
 81033ac:	081033d5 	.word	0x081033d5
 81033b0:	081033dd 	.word	0x081033dd
 81033b4:	2300      	movs	r3, #0
 81033b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033ba:	e050      	b.n	810345e <UART_SetConfig+0x5a2>
 81033bc:	2304      	movs	r3, #4
 81033be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033c2:	e04c      	b.n	810345e <UART_SetConfig+0x5a2>
 81033c4:	2308      	movs	r3, #8
 81033c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033ca:	e048      	b.n	810345e <UART_SetConfig+0x5a2>
 81033cc:	2310      	movs	r3, #16
 81033ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033d2:	e044      	b.n	810345e <UART_SetConfig+0x5a2>
 81033d4:	2320      	movs	r3, #32
 81033d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033da:	e040      	b.n	810345e <UART_SetConfig+0x5a2>
 81033dc:	2340      	movs	r3, #64	; 0x40
 81033de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033e2:	e03c      	b.n	810345e <UART_SetConfig+0x5a2>
 81033e4:	2380      	movs	r3, #128	; 0x80
 81033e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033ea:	e038      	b.n	810345e <UART_SetConfig+0x5a2>
 81033ec:	687b      	ldr	r3, [r7, #4]
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	4a5c      	ldr	r2, [pc, #368]	; (8103564 <UART_SetConfig+0x6a8>)
 81033f2:	4293      	cmp	r3, r2
 81033f4:	d130      	bne.n	8103458 <UART_SetConfig+0x59c>
 81033f6:	4b58      	ldr	r3, [pc, #352]	; (8103558 <UART_SetConfig+0x69c>)
 81033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81033fa:	f003 0307 	and.w	r3, r3, #7
 81033fe:	2b05      	cmp	r3, #5
 8103400:	d826      	bhi.n	8103450 <UART_SetConfig+0x594>
 8103402:	a201      	add	r2, pc, #4	; (adr r2, 8103408 <UART_SetConfig+0x54c>)
 8103404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103408:	08103421 	.word	0x08103421
 810340c:	08103429 	.word	0x08103429
 8103410:	08103431 	.word	0x08103431
 8103414:	08103439 	.word	0x08103439
 8103418:	08103441 	.word	0x08103441
 810341c:	08103449 	.word	0x08103449
 8103420:	2302      	movs	r3, #2
 8103422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103426:	e01a      	b.n	810345e <UART_SetConfig+0x5a2>
 8103428:	2304      	movs	r3, #4
 810342a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810342e:	e016      	b.n	810345e <UART_SetConfig+0x5a2>
 8103430:	2308      	movs	r3, #8
 8103432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103436:	e012      	b.n	810345e <UART_SetConfig+0x5a2>
 8103438:	2310      	movs	r3, #16
 810343a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810343e:	e00e      	b.n	810345e <UART_SetConfig+0x5a2>
 8103440:	2320      	movs	r3, #32
 8103442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103446:	e00a      	b.n	810345e <UART_SetConfig+0x5a2>
 8103448:	2340      	movs	r3, #64	; 0x40
 810344a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810344e:	e006      	b.n	810345e <UART_SetConfig+0x5a2>
 8103450:	2380      	movs	r3, #128	; 0x80
 8103452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103456:	e002      	b.n	810345e <UART_SetConfig+0x5a2>
 8103458:	2380      	movs	r3, #128	; 0x80
 810345a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	681b      	ldr	r3, [r3, #0]
 8103462:	4a40      	ldr	r2, [pc, #256]	; (8103564 <UART_SetConfig+0x6a8>)
 8103464:	4293      	cmp	r3, r2
 8103466:	f040 80ef 	bne.w	8103648 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810346a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810346e:	2b20      	cmp	r3, #32
 8103470:	dc46      	bgt.n	8103500 <UART_SetConfig+0x644>
 8103472:	2b02      	cmp	r3, #2
 8103474:	f2c0 8081 	blt.w	810357a <UART_SetConfig+0x6be>
 8103478:	3b02      	subs	r3, #2
 810347a:	2b1e      	cmp	r3, #30
 810347c:	d87d      	bhi.n	810357a <UART_SetConfig+0x6be>
 810347e:	a201      	add	r2, pc, #4	; (adr r2, 8103484 <UART_SetConfig+0x5c8>)
 8103480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103484:	08103507 	.word	0x08103507
 8103488:	0810357b 	.word	0x0810357b
 810348c:	0810350f 	.word	0x0810350f
 8103490:	0810357b 	.word	0x0810357b
 8103494:	0810357b 	.word	0x0810357b
 8103498:	0810357b 	.word	0x0810357b
 810349c:	0810351f 	.word	0x0810351f
 81034a0:	0810357b 	.word	0x0810357b
 81034a4:	0810357b 	.word	0x0810357b
 81034a8:	0810357b 	.word	0x0810357b
 81034ac:	0810357b 	.word	0x0810357b
 81034b0:	0810357b 	.word	0x0810357b
 81034b4:	0810357b 	.word	0x0810357b
 81034b8:	0810357b 	.word	0x0810357b
 81034bc:	0810352f 	.word	0x0810352f
 81034c0:	0810357b 	.word	0x0810357b
 81034c4:	0810357b 	.word	0x0810357b
 81034c8:	0810357b 	.word	0x0810357b
 81034cc:	0810357b 	.word	0x0810357b
 81034d0:	0810357b 	.word	0x0810357b
 81034d4:	0810357b 	.word	0x0810357b
 81034d8:	0810357b 	.word	0x0810357b
 81034dc:	0810357b 	.word	0x0810357b
 81034e0:	0810357b 	.word	0x0810357b
 81034e4:	0810357b 	.word	0x0810357b
 81034e8:	0810357b 	.word	0x0810357b
 81034ec:	0810357b 	.word	0x0810357b
 81034f0:	0810357b 	.word	0x0810357b
 81034f4:	0810357b 	.word	0x0810357b
 81034f8:	0810357b 	.word	0x0810357b
 81034fc:	0810356d 	.word	0x0810356d
 8103500:	2b40      	cmp	r3, #64	; 0x40
 8103502:	d036      	beq.n	8103572 <UART_SetConfig+0x6b6>
 8103504:	e039      	b.n	810357a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8103506:	f7fe ffd1 	bl	81024ac <HAL_RCCEx_GetD3PCLK1Freq>
 810350a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810350c:	e03b      	b.n	8103586 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810350e:	f107 0314 	add.w	r3, r7, #20
 8103512:	4618      	mov	r0, r3
 8103514:	f7fe ffe0 	bl	81024d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103518:	69bb      	ldr	r3, [r7, #24]
 810351a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810351c:	e033      	b.n	8103586 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810351e:	f107 0308 	add.w	r3, r7, #8
 8103522:	4618      	mov	r0, r3
 8103524:	f7ff f92c 	bl	8102780 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103528:	68fb      	ldr	r3, [r7, #12]
 810352a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810352c:	e02b      	b.n	8103586 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810352e:	4b0a      	ldr	r3, [pc, #40]	; (8103558 <UART_SetConfig+0x69c>)
 8103530:	681b      	ldr	r3, [r3, #0]
 8103532:	f003 0320 	and.w	r3, r3, #32
 8103536:	2b00      	cmp	r3, #0
 8103538:	d009      	beq.n	810354e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810353a:	4b07      	ldr	r3, [pc, #28]	; (8103558 <UART_SetConfig+0x69c>)
 810353c:	681b      	ldr	r3, [r3, #0]
 810353e:	08db      	lsrs	r3, r3, #3
 8103540:	f003 0303 	and.w	r3, r3, #3
 8103544:	4a08      	ldr	r2, [pc, #32]	; (8103568 <UART_SetConfig+0x6ac>)
 8103546:	fa22 f303 	lsr.w	r3, r2, r3
 810354a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810354c:	e01b      	b.n	8103586 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810354e:	4b06      	ldr	r3, [pc, #24]	; (8103568 <UART_SetConfig+0x6ac>)
 8103550:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103552:	e018      	b.n	8103586 <UART_SetConfig+0x6ca>
 8103554:	40011400 	.word	0x40011400
 8103558:	58024400 	.word	0x58024400
 810355c:	40007800 	.word	0x40007800
 8103560:	40007c00 	.word	0x40007c00
 8103564:	58000c00 	.word	0x58000c00
 8103568:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810356c:	4bc4      	ldr	r3, [pc, #784]	; (8103880 <UART_SetConfig+0x9c4>)
 810356e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103570:	e009      	b.n	8103586 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103576:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103578:	e005      	b.n	8103586 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810357a:	2300      	movs	r3, #0
 810357c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810357e:	2301      	movs	r3, #1
 8103580:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8103584:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8103586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103588:	2b00      	cmp	r3, #0
 810358a:	f000 81da 	beq.w	8103942 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810358e:	687b      	ldr	r3, [r7, #4]
 8103590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103592:	4abc      	ldr	r2, [pc, #752]	; (8103884 <UART_SetConfig+0x9c8>)
 8103594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103598:	461a      	mov	r2, r3
 810359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810359c:	fbb3 f3f2 	udiv	r3, r3, r2
 81035a0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81035a2:	687b      	ldr	r3, [r7, #4]
 81035a4:	685a      	ldr	r2, [r3, #4]
 81035a6:	4613      	mov	r3, r2
 81035a8:	005b      	lsls	r3, r3, #1
 81035aa:	4413      	add	r3, r2
 81035ac:	6a3a      	ldr	r2, [r7, #32]
 81035ae:	429a      	cmp	r2, r3
 81035b0:	d305      	bcc.n	81035be <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81035b2:	687b      	ldr	r3, [r7, #4]
 81035b4:	685b      	ldr	r3, [r3, #4]
 81035b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81035b8:	6a3a      	ldr	r2, [r7, #32]
 81035ba:	429a      	cmp	r2, r3
 81035bc:	d903      	bls.n	81035c6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 81035be:	2301      	movs	r3, #1
 81035c0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81035c4:	e1bd      	b.n	8103942 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81035c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81035c8:	4618      	mov	r0, r3
 81035ca:	f04f 0100 	mov.w	r1, #0
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81035d2:	4aac      	ldr	r2, [pc, #688]	; (8103884 <UART_SetConfig+0x9c8>)
 81035d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81035d8:	b29a      	uxth	r2, r3
 81035da:	f04f 0300 	mov.w	r3, #0
 81035de:	f7fc fe7b 	bl	81002d8 <__aeabi_uldivmod>
 81035e2:	4602      	mov	r2, r0
 81035e4:	460b      	mov	r3, r1
 81035e6:	4610      	mov	r0, r2
 81035e8:	4619      	mov	r1, r3
 81035ea:	f04f 0200 	mov.w	r2, #0
 81035ee:	f04f 0300 	mov.w	r3, #0
 81035f2:	020b      	lsls	r3, r1, #8
 81035f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81035f8:	0202      	lsls	r2, r0, #8
 81035fa:	6879      	ldr	r1, [r7, #4]
 81035fc:	6849      	ldr	r1, [r1, #4]
 81035fe:	0849      	lsrs	r1, r1, #1
 8103600:	4608      	mov	r0, r1
 8103602:	f04f 0100 	mov.w	r1, #0
 8103606:	1814      	adds	r4, r2, r0
 8103608:	eb43 0501 	adc.w	r5, r3, r1
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	685b      	ldr	r3, [r3, #4]
 8103610:	461a      	mov	r2, r3
 8103612:	f04f 0300 	mov.w	r3, #0
 8103616:	4620      	mov	r0, r4
 8103618:	4629      	mov	r1, r5
 810361a:	f7fc fe5d 	bl	81002d8 <__aeabi_uldivmod>
 810361e:	4602      	mov	r2, r0
 8103620:	460b      	mov	r3, r1
 8103622:	4613      	mov	r3, r2
 8103624:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8103626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810362c:	d308      	bcc.n	8103640 <UART_SetConfig+0x784>
 810362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103634:	d204      	bcs.n	8103640 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8103636:	687b      	ldr	r3, [r7, #4]
 8103638:	681b      	ldr	r3, [r3, #0]
 810363a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810363c:	60da      	str	r2, [r3, #12]
 810363e:	e180      	b.n	8103942 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8103640:	2301      	movs	r3, #1
 8103642:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8103646:	e17c      	b.n	8103942 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	69db      	ldr	r3, [r3, #28]
 810364c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103650:	f040 80be 	bne.w	81037d0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8103654:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8103658:	2b20      	cmp	r3, #32
 810365a:	dc49      	bgt.n	81036f0 <UART_SetConfig+0x834>
 810365c:	2b00      	cmp	r3, #0
 810365e:	db7c      	blt.n	810375a <UART_SetConfig+0x89e>
 8103660:	2b20      	cmp	r3, #32
 8103662:	d87a      	bhi.n	810375a <UART_SetConfig+0x89e>
 8103664:	a201      	add	r2, pc, #4	; (adr r2, 810366c <UART_SetConfig+0x7b0>)
 8103666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810366a:	bf00      	nop
 810366c:	081036f7 	.word	0x081036f7
 8103670:	081036ff 	.word	0x081036ff
 8103674:	0810375b 	.word	0x0810375b
 8103678:	0810375b 	.word	0x0810375b
 810367c:	08103707 	.word	0x08103707
 8103680:	0810375b 	.word	0x0810375b
 8103684:	0810375b 	.word	0x0810375b
 8103688:	0810375b 	.word	0x0810375b
 810368c:	08103717 	.word	0x08103717
 8103690:	0810375b 	.word	0x0810375b
 8103694:	0810375b 	.word	0x0810375b
 8103698:	0810375b 	.word	0x0810375b
 810369c:	0810375b 	.word	0x0810375b
 81036a0:	0810375b 	.word	0x0810375b
 81036a4:	0810375b 	.word	0x0810375b
 81036a8:	0810375b 	.word	0x0810375b
 81036ac:	08103727 	.word	0x08103727
 81036b0:	0810375b 	.word	0x0810375b
 81036b4:	0810375b 	.word	0x0810375b
 81036b8:	0810375b 	.word	0x0810375b
 81036bc:	0810375b 	.word	0x0810375b
 81036c0:	0810375b 	.word	0x0810375b
 81036c4:	0810375b 	.word	0x0810375b
 81036c8:	0810375b 	.word	0x0810375b
 81036cc:	0810375b 	.word	0x0810375b
 81036d0:	0810375b 	.word	0x0810375b
 81036d4:	0810375b 	.word	0x0810375b
 81036d8:	0810375b 	.word	0x0810375b
 81036dc:	0810375b 	.word	0x0810375b
 81036e0:	0810375b 	.word	0x0810375b
 81036e4:	0810375b 	.word	0x0810375b
 81036e8:	0810375b 	.word	0x0810375b
 81036ec:	0810374d 	.word	0x0810374d
 81036f0:	2b40      	cmp	r3, #64	; 0x40
 81036f2:	d02e      	beq.n	8103752 <UART_SetConfig+0x896>
 81036f4:	e031      	b.n	810375a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81036f6:	f7fd ff6d 	bl	81015d4 <HAL_RCC_GetPCLK1Freq>
 81036fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81036fc:	e033      	b.n	8103766 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81036fe:	f7fd ff7f 	bl	8101600 <HAL_RCC_GetPCLK2Freq>
 8103702:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8103704:	e02f      	b.n	8103766 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103706:	f107 0314 	add.w	r3, r7, #20
 810370a:	4618      	mov	r0, r3
 810370c:	f7fe fee4 	bl	81024d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103710:	69bb      	ldr	r3, [r7, #24]
 8103712:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103714:	e027      	b.n	8103766 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103716:	f107 0308 	add.w	r3, r7, #8
 810371a:	4618      	mov	r0, r3
 810371c:	f7ff f830 	bl	8102780 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103720:	68fb      	ldr	r3, [r7, #12]
 8103722:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103724:	e01f      	b.n	8103766 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103726:	4b58      	ldr	r3, [pc, #352]	; (8103888 <UART_SetConfig+0x9cc>)
 8103728:	681b      	ldr	r3, [r3, #0]
 810372a:	f003 0320 	and.w	r3, r3, #32
 810372e:	2b00      	cmp	r3, #0
 8103730:	d009      	beq.n	8103746 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103732:	4b55      	ldr	r3, [pc, #340]	; (8103888 <UART_SetConfig+0x9cc>)
 8103734:	681b      	ldr	r3, [r3, #0]
 8103736:	08db      	lsrs	r3, r3, #3
 8103738:	f003 0303 	and.w	r3, r3, #3
 810373c:	4a53      	ldr	r2, [pc, #332]	; (810388c <UART_SetConfig+0x9d0>)
 810373e:	fa22 f303 	lsr.w	r3, r2, r3
 8103742:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103744:	e00f      	b.n	8103766 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8103746:	4b51      	ldr	r3, [pc, #324]	; (810388c <UART_SetConfig+0x9d0>)
 8103748:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810374a:	e00c      	b.n	8103766 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810374c:	4b4c      	ldr	r3, [pc, #304]	; (8103880 <UART_SetConfig+0x9c4>)
 810374e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103750:	e009      	b.n	8103766 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103756:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103758:	e005      	b.n	8103766 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810375a:	2300      	movs	r3, #0
 810375c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810375e:	2301      	movs	r3, #1
 8103760:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8103764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8103766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103768:	2b00      	cmp	r3, #0
 810376a:	f000 80ea 	beq.w	8103942 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103772:	4a44      	ldr	r2, [pc, #272]	; (8103884 <UART_SetConfig+0x9c8>)
 8103774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103778:	461a      	mov	r2, r3
 810377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810377c:	fbb3 f3f2 	udiv	r3, r3, r2
 8103780:	005a      	lsls	r2, r3, #1
 8103782:	687b      	ldr	r3, [r7, #4]
 8103784:	685b      	ldr	r3, [r3, #4]
 8103786:	085b      	lsrs	r3, r3, #1
 8103788:	441a      	add	r2, r3
 810378a:	687b      	ldr	r3, [r7, #4]
 810378c:	685b      	ldr	r3, [r3, #4]
 810378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103792:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103796:	2b0f      	cmp	r3, #15
 8103798:	d916      	bls.n	81037c8 <UART_SetConfig+0x90c>
 810379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81037a0:	d212      	bcs.n	81037c8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81037a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037a4:	b29b      	uxth	r3, r3
 81037a6:	f023 030f 	bic.w	r3, r3, #15
 81037aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037ae:	085b      	lsrs	r3, r3, #1
 81037b0:	b29b      	uxth	r3, r3
 81037b2:	f003 0307 	and.w	r3, r3, #7
 81037b6:	b29a      	uxth	r2, r3
 81037b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81037ba:	4313      	orrs	r3, r2
 81037bc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 81037be:	687b      	ldr	r3, [r7, #4]
 81037c0:	681b      	ldr	r3, [r3, #0]
 81037c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81037c4:	60da      	str	r2, [r3, #12]
 81037c6:	e0bc      	b.n	8103942 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81037c8:	2301      	movs	r3, #1
 81037ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81037ce:	e0b8      	b.n	8103942 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 81037d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81037d4:	2b20      	cmp	r3, #32
 81037d6:	dc4b      	bgt.n	8103870 <UART_SetConfig+0x9b4>
 81037d8:	2b00      	cmp	r3, #0
 81037da:	f2c0 8087 	blt.w	81038ec <UART_SetConfig+0xa30>
 81037de:	2b20      	cmp	r3, #32
 81037e0:	f200 8084 	bhi.w	81038ec <UART_SetConfig+0xa30>
 81037e4:	a201      	add	r2, pc, #4	; (adr r2, 81037ec <UART_SetConfig+0x930>)
 81037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81037ea:	bf00      	nop
 81037ec:	08103877 	.word	0x08103877
 81037f0:	08103891 	.word	0x08103891
 81037f4:	081038ed 	.word	0x081038ed
 81037f8:	081038ed 	.word	0x081038ed
 81037fc:	08103899 	.word	0x08103899
 8103800:	081038ed 	.word	0x081038ed
 8103804:	081038ed 	.word	0x081038ed
 8103808:	081038ed 	.word	0x081038ed
 810380c:	081038a9 	.word	0x081038a9
 8103810:	081038ed 	.word	0x081038ed
 8103814:	081038ed 	.word	0x081038ed
 8103818:	081038ed 	.word	0x081038ed
 810381c:	081038ed 	.word	0x081038ed
 8103820:	081038ed 	.word	0x081038ed
 8103824:	081038ed 	.word	0x081038ed
 8103828:	081038ed 	.word	0x081038ed
 810382c:	081038b9 	.word	0x081038b9
 8103830:	081038ed 	.word	0x081038ed
 8103834:	081038ed 	.word	0x081038ed
 8103838:	081038ed 	.word	0x081038ed
 810383c:	081038ed 	.word	0x081038ed
 8103840:	081038ed 	.word	0x081038ed
 8103844:	081038ed 	.word	0x081038ed
 8103848:	081038ed 	.word	0x081038ed
 810384c:	081038ed 	.word	0x081038ed
 8103850:	081038ed 	.word	0x081038ed
 8103854:	081038ed 	.word	0x081038ed
 8103858:	081038ed 	.word	0x081038ed
 810385c:	081038ed 	.word	0x081038ed
 8103860:	081038ed 	.word	0x081038ed
 8103864:	081038ed 	.word	0x081038ed
 8103868:	081038ed 	.word	0x081038ed
 810386c:	081038df 	.word	0x081038df
 8103870:	2b40      	cmp	r3, #64	; 0x40
 8103872:	d037      	beq.n	81038e4 <UART_SetConfig+0xa28>
 8103874:	e03a      	b.n	81038ec <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103876:	f7fd fead 	bl	81015d4 <HAL_RCC_GetPCLK1Freq>
 810387a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810387c:	e03c      	b.n	81038f8 <UART_SetConfig+0xa3c>
 810387e:	bf00      	nop
 8103880:	003d0900 	.word	0x003d0900
 8103884:	08103f6c 	.word	0x08103f6c
 8103888:	58024400 	.word	0x58024400
 810388c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103890:	f7fd feb6 	bl	8101600 <HAL_RCC_GetPCLK2Freq>
 8103894:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8103896:	e02f      	b.n	81038f8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103898:	f107 0314 	add.w	r3, r7, #20
 810389c:	4618      	mov	r0, r3
 810389e:	f7fe fe1b 	bl	81024d8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81038a2:	69bb      	ldr	r3, [r7, #24]
 81038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81038a6:	e027      	b.n	81038f8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81038a8:	f107 0308 	add.w	r3, r7, #8
 81038ac:	4618      	mov	r0, r3
 81038ae:	f7fe ff67 	bl	8102780 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81038b2:	68fb      	ldr	r3, [r7, #12]
 81038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81038b6:	e01f      	b.n	81038f8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81038b8:	4b2c      	ldr	r3, [pc, #176]	; (810396c <UART_SetConfig+0xab0>)
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	f003 0320 	and.w	r3, r3, #32
 81038c0:	2b00      	cmp	r3, #0
 81038c2:	d009      	beq.n	81038d8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81038c4:	4b29      	ldr	r3, [pc, #164]	; (810396c <UART_SetConfig+0xab0>)
 81038c6:	681b      	ldr	r3, [r3, #0]
 81038c8:	08db      	lsrs	r3, r3, #3
 81038ca:	f003 0303 	and.w	r3, r3, #3
 81038ce:	4a28      	ldr	r2, [pc, #160]	; (8103970 <UART_SetConfig+0xab4>)
 81038d0:	fa22 f303 	lsr.w	r3, r2, r3
 81038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81038d6:	e00f      	b.n	81038f8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 81038d8:	4b25      	ldr	r3, [pc, #148]	; (8103970 <UART_SetConfig+0xab4>)
 81038da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81038dc:	e00c      	b.n	81038f8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81038de:	4b25      	ldr	r3, [pc, #148]	; (8103974 <UART_SetConfig+0xab8>)
 81038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81038e2:	e009      	b.n	81038f8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81038e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81038ea:	e005      	b.n	81038f8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 81038ec:	2300      	movs	r3, #0
 81038ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81038f0:	2301      	movs	r3, #1
 81038f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81038f6:	bf00      	nop
    }

    if (pclk != 0U)
 81038f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81038fa:	2b00      	cmp	r3, #0
 81038fc:	d021      	beq.n	8103942 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81038fe:	687b      	ldr	r3, [r7, #4]
 8103900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103902:	4a1d      	ldr	r2, [pc, #116]	; (8103978 <UART_SetConfig+0xabc>)
 8103904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103908:	461a      	mov	r2, r3
 810390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810390c:	fbb3 f2f2 	udiv	r2, r3, r2
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	685b      	ldr	r3, [r3, #4]
 8103914:	085b      	lsrs	r3, r3, #1
 8103916:	441a      	add	r2, r3
 8103918:	687b      	ldr	r3, [r7, #4]
 810391a:	685b      	ldr	r3, [r3, #4]
 810391c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103920:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103924:	2b0f      	cmp	r3, #15
 8103926:	d909      	bls.n	810393c <UART_SetConfig+0xa80>
 8103928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810392a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810392e:	d205      	bcs.n	810393c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8103930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103932:	b29a      	uxth	r2, r3
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	681b      	ldr	r3, [r3, #0]
 8103938:	60da      	str	r2, [r3, #12]
 810393a:	e002      	b.n	8103942 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810393c:	2301      	movs	r3, #1
 810393e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	2201      	movs	r2, #1
 8103946:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	2201      	movs	r2, #1
 810394e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	2200      	movs	r2, #0
 8103956:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	2200      	movs	r2, #0
 810395c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810395e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8103962:	4618      	mov	r0, r3
 8103964:	3738      	adds	r7, #56	; 0x38
 8103966:	46bd      	mov	sp, r7
 8103968:	bdb0      	pop	{r4, r5, r7, pc}
 810396a:	bf00      	nop
 810396c:	58024400 	.word	0x58024400
 8103970:	03d09000 	.word	0x03d09000
 8103974:	003d0900 	.word	0x003d0900
 8103978:	08103f6c 	.word	0x08103f6c

0810397c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810397c:	b480      	push	{r7}
 810397e:	b083      	sub	sp, #12
 8103980:	af00      	add	r7, sp, #0
 8103982:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103988:	f003 0301 	and.w	r3, r3, #1
 810398c:	2b00      	cmp	r3, #0
 810398e:	d00a      	beq.n	81039a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	685b      	ldr	r3, [r3, #4]
 8103996:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810399a:	687b      	ldr	r3, [r7, #4]
 810399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	430a      	orrs	r2, r1
 81039a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81039a6:	687b      	ldr	r3, [r7, #4]
 81039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039aa:	f003 0302 	and.w	r3, r3, #2
 81039ae:	2b00      	cmp	r3, #0
 81039b0:	d00a      	beq.n	81039c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81039b2:	687b      	ldr	r3, [r7, #4]
 81039b4:	681b      	ldr	r3, [r3, #0]
 81039b6:	685b      	ldr	r3, [r3, #4]
 81039b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	430a      	orrs	r2, r1
 81039c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039cc:	f003 0304 	and.w	r3, r3, #4
 81039d0:	2b00      	cmp	r3, #0
 81039d2:	d00a      	beq.n	81039ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81039d4:	687b      	ldr	r3, [r7, #4]
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	685b      	ldr	r3, [r3, #4]
 81039da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	681b      	ldr	r3, [r3, #0]
 81039e6:	430a      	orrs	r2, r1
 81039e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039ee:	f003 0308 	and.w	r3, r3, #8
 81039f2:	2b00      	cmp	r3, #0
 81039f4:	d00a      	beq.n	8103a0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	681b      	ldr	r3, [r3, #0]
 81039fa:	685b      	ldr	r3, [r3, #4]
 81039fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	681b      	ldr	r3, [r3, #0]
 8103a08:	430a      	orrs	r2, r1
 8103a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a10:	f003 0310 	and.w	r3, r3, #16
 8103a14:	2b00      	cmp	r3, #0
 8103a16:	d00a      	beq.n	8103a2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	689b      	ldr	r3, [r3, #8]
 8103a1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8103a22:	687b      	ldr	r3, [r7, #4]
 8103a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	681b      	ldr	r3, [r3, #0]
 8103a2a:	430a      	orrs	r2, r1
 8103a2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a32:	f003 0320 	and.w	r3, r3, #32
 8103a36:	2b00      	cmp	r3, #0
 8103a38:	d00a      	beq.n	8103a50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	689b      	ldr	r3, [r3, #8]
 8103a40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	681b      	ldr	r3, [r3, #0]
 8103a4c:	430a      	orrs	r2, r1
 8103a4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103a58:	2b00      	cmp	r3, #0
 8103a5a:	d01a      	beq.n	8103a92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	685b      	ldr	r3, [r3, #4]
 8103a62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103a6a:	687b      	ldr	r3, [r7, #4]
 8103a6c:	681b      	ldr	r3, [r3, #0]
 8103a6e:	430a      	orrs	r2, r1
 8103a70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103a7a:	d10a      	bne.n	8103a92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	685b      	ldr	r3, [r3, #4]
 8103a82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8103a8a:	687b      	ldr	r3, [r7, #4]
 8103a8c:	681b      	ldr	r3, [r3, #0]
 8103a8e:	430a      	orrs	r2, r1
 8103a90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8103a92:	687b      	ldr	r3, [r7, #4]
 8103a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103a9a:	2b00      	cmp	r3, #0
 8103a9c:	d00a      	beq.n	8103ab4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	681b      	ldr	r3, [r3, #0]
 8103aa2:	685b      	ldr	r3, [r3, #4]
 8103aa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	430a      	orrs	r2, r1
 8103ab2:	605a      	str	r2, [r3, #4]
  }
}
 8103ab4:	bf00      	nop
 8103ab6:	370c      	adds	r7, #12
 8103ab8:	46bd      	mov	sp, r7
 8103aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103abe:	4770      	bx	lr

08103ac0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8103ac0:	b580      	push	{r7, lr}
 8103ac2:	b086      	sub	sp, #24
 8103ac4:	af02      	add	r7, sp, #8
 8103ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	2200      	movs	r2, #0
 8103acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8103ad0:	f7fc ffe8 	bl	8100aa4 <HAL_GetTick>
 8103ad4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	681b      	ldr	r3, [r3, #0]
 8103ada:	681b      	ldr	r3, [r3, #0]
 8103adc:	f003 0308 	and.w	r3, r3, #8
 8103ae0:	2b08      	cmp	r3, #8
 8103ae2:	d10e      	bne.n	8103b02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8103ae8:	9300      	str	r3, [sp, #0]
 8103aea:	68fb      	ldr	r3, [r7, #12]
 8103aec:	2200      	movs	r2, #0
 8103aee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8103af2:	6878      	ldr	r0, [r7, #4]
 8103af4:	f000 f82f 	bl	8103b56 <UART_WaitOnFlagUntilTimeout>
 8103af8:	4603      	mov	r3, r0
 8103afa:	2b00      	cmp	r3, #0
 8103afc:	d001      	beq.n	8103b02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103afe:	2303      	movs	r3, #3
 8103b00:	e025      	b.n	8103b4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	681b      	ldr	r3, [r3, #0]
 8103b06:	681b      	ldr	r3, [r3, #0]
 8103b08:	f003 0304 	and.w	r3, r3, #4
 8103b0c:	2b04      	cmp	r3, #4
 8103b0e:	d10e      	bne.n	8103b2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103b10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8103b14:	9300      	str	r3, [sp, #0]
 8103b16:	68fb      	ldr	r3, [r7, #12]
 8103b18:	2200      	movs	r2, #0
 8103b1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8103b1e:	6878      	ldr	r0, [r7, #4]
 8103b20:	f000 f819 	bl	8103b56 <UART_WaitOnFlagUntilTimeout>
 8103b24:	4603      	mov	r3, r0
 8103b26:	2b00      	cmp	r3, #0
 8103b28:	d001      	beq.n	8103b2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103b2a:	2303      	movs	r3, #3
 8103b2c:	e00f      	b.n	8103b4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	2220      	movs	r2, #32
 8103b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	2220      	movs	r2, #32
 8103b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103b3e:	687b      	ldr	r3, [r7, #4]
 8103b40:	2200      	movs	r2, #0
 8103b42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	2200      	movs	r2, #0
 8103b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103b4c:	2300      	movs	r3, #0
}
 8103b4e:	4618      	mov	r0, r3
 8103b50:	3710      	adds	r7, #16
 8103b52:	46bd      	mov	sp, r7
 8103b54:	bd80      	pop	{r7, pc}

08103b56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8103b56:	b580      	push	{r7, lr}
 8103b58:	b09c      	sub	sp, #112	; 0x70
 8103b5a:	af00      	add	r7, sp, #0
 8103b5c:	60f8      	str	r0, [r7, #12]
 8103b5e:	60b9      	str	r1, [r7, #8]
 8103b60:	603b      	str	r3, [r7, #0]
 8103b62:	4613      	mov	r3, r2
 8103b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103b66:	e0a9      	b.n	8103cbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103b6e:	f000 80a5 	beq.w	8103cbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103b72:	f7fc ff97 	bl	8100aa4 <HAL_GetTick>
 8103b76:	4602      	mov	r2, r0
 8103b78:	683b      	ldr	r3, [r7, #0]
 8103b7a:	1ad3      	subs	r3, r2, r3
 8103b7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8103b7e:	429a      	cmp	r2, r3
 8103b80:	d302      	bcc.n	8103b88 <UART_WaitOnFlagUntilTimeout+0x32>
 8103b82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	d140      	bne.n	8103c0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8103b88:	68fb      	ldr	r3, [r7, #12]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103b90:	e853 3f00 	ldrex	r3, [r3]
 8103b94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8103b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103b98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8103b9e:	68fb      	ldr	r3, [r7, #12]
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	461a      	mov	r2, r3
 8103ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8103ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8103ba8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103baa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8103bac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8103bae:	e841 2300 	strex	r3, r2, [r1]
 8103bb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8103bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103bb6:	2b00      	cmp	r3, #0
 8103bb8:	d1e6      	bne.n	8103b88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103bba:	68fb      	ldr	r3, [r7, #12]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	3308      	adds	r3, #8
 8103bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103bc4:	e853 3f00 	ldrex	r3, [r3]
 8103bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8103bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103bcc:	f023 0301 	bic.w	r3, r3, #1
 8103bd0:	663b      	str	r3, [r7, #96]	; 0x60
 8103bd2:	68fb      	ldr	r3, [r7, #12]
 8103bd4:	681b      	ldr	r3, [r3, #0]
 8103bd6:	3308      	adds	r3, #8
 8103bd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8103bda:	64ba      	str	r2, [r7, #72]	; 0x48
 8103bdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103bde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8103be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8103be2:	e841 2300 	strex	r3, r2, [r1]
 8103be6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8103be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103bea:	2b00      	cmp	r3, #0
 8103bec:	d1e5      	bne.n	8103bba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8103bee:	68fb      	ldr	r3, [r7, #12]
 8103bf0:	2220      	movs	r2, #32
 8103bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8103bf6:	68fb      	ldr	r3, [r7, #12]
 8103bf8:	2220      	movs	r2, #32
 8103bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8103bfe:	68fb      	ldr	r3, [r7, #12]
 8103c00:	2200      	movs	r2, #0
 8103c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8103c06:	2303      	movs	r3, #3
 8103c08:	e069      	b.n	8103cde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8103c0a:	68fb      	ldr	r3, [r7, #12]
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	681b      	ldr	r3, [r3, #0]
 8103c10:	f003 0304 	and.w	r3, r3, #4
 8103c14:	2b00      	cmp	r3, #0
 8103c16:	d051      	beq.n	8103cbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8103c18:	68fb      	ldr	r3, [r7, #12]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	69db      	ldr	r3, [r3, #28]
 8103c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103c22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103c26:	d149      	bne.n	8103cbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8103c28:	68fb      	ldr	r3, [r7, #12]
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103c30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8103c32:	68fb      	ldr	r3, [r7, #12]
 8103c34:	681b      	ldr	r3, [r3, #0]
 8103c36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c3a:	e853 3f00 	ldrex	r3, [r3]
 8103c3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8103c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103c42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103c46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8103c48:	68fb      	ldr	r3, [r7, #12]
 8103c4a:	681b      	ldr	r3, [r3, #0]
 8103c4c:	461a      	mov	r2, r3
 8103c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c50:	637b      	str	r3, [r7, #52]	; 0x34
 8103c52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103c54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8103c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103c58:	e841 2300 	strex	r3, r2, [r1]
 8103c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8103c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103c60:	2b00      	cmp	r3, #0
 8103c62:	d1e6      	bne.n	8103c32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103c64:	68fb      	ldr	r3, [r7, #12]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	3308      	adds	r3, #8
 8103c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103c6c:	697b      	ldr	r3, [r7, #20]
 8103c6e:	e853 3f00 	ldrex	r3, [r3]
 8103c72:	613b      	str	r3, [r7, #16]
   return(result);
 8103c74:	693b      	ldr	r3, [r7, #16]
 8103c76:	f023 0301 	bic.w	r3, r3, #1
 8103c7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8103c7c:	68fb      	ldr	r3, [r7, #12]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	3308      	adds	r3, #8
 8103c82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8103c84:	623a      	str	r2, [r7, #32]
 8103c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103c88:	69f9      	ldr	r1, [r7, #28]
 8103c8a:	6a3a      	ldr	r2, [r7, #32]
 8103c8c:	e841 2300 	strex	r3, r2, [r1]
 8103c90:	61bb      	str	r3, [r7, #24]
   return(result);
 8103c92:	69bb      	ldr	r3, [r7, #24]
 8103c94:	2b00      	cmp	r3, #0
 8103c96:	d1e5      	bne.n	8103c64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8103c98:	68fb      	ldr	r3, [r7, #12]
 8103c9a:	2220      	movs	r2, #32
 8103c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8103ca0:	68fb      	ldr	r3, [r7, #12]
 8103ca2:	2220      	movs	r2, #32
 8103ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8103ca8:	68fb      	ldr	r3, [r7, #12]
 8103caa:	2220      	movs	r2, #32
 8103cac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8103cb0:	68fb      	ldr	r3, [r7, #12]
 8103cb2:	2200      	movs	r2, #0
 8103cb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8103cb8:	2303      	movs	r3, #3
 8103cba:	e010      	b.n	8103cde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103cbc:	68fb      	ldr	r3, [r7, #12]
 8103cbe:	681b      	ldr	r3, [r3, #0]
 8103cc0:	69da      	ldr	r2, [r3, #28]
 8103cc2:	68bb      	ldr	r3, [r7, #8]
 8103cc4:	4013      	ands	r3, r2
 8103cc6:	68ba      	ldr	r2, [r7, #8]
 8103cc8:	429a      	cmp	r2, r3
 8103cca:	bf0c      	ite	eq
 8103ccc:	2301      	moveq	r3, #1
 8103cce:	2300      	movne	r3, #0
 8103cd0:	b2db      	uxtb	r3, r3
 8103cd2:	461a      	mov	r2, r3
 8103cd4:	79fb      	ldrb	r3, [r7, #7]
 8103cd6:	429a      	cmp	r2, r3
 8103cd8:	f43f af46 	beq.w	8103b68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8103cdc:	2300      	movs	r3, #0
}
 8103cde:	4618      	mov	r0, r3
 8103ce0:	3770      	adds	r7, #112	; 0x70
 8103ce2:	46bd      	mov	sp, r7
 8103ce4:	bd80      	pop	{r7, pc}

08103ce6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8103ce6:	b480      	push	{r7}
 8103ce8:	b085      	sub	sp, #20
 8103cea:	af00      	add	r7, sp, #0
 8103cec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103cf4:	2b01      	cmp	r3, #1
 8103cf6:	d101      	bne.n	8103cfc <HAL_UARTEx_DisableFifoMode+0x16>
 8103cf8:	2302      	movs	r3, #2
 8103cfa:	e027      	b.n	8103d4c <HAL_UARTEx_DisableFifoMode+0x66>
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	2201      	movs	r2, #1
 8103d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103d04:	687b      	ldr	r3, [r7, #4]
 8103d06:	2224      	movs	r2, #36	; 0x24
 8103d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103d0c:	687b      	ldr	r3, [r7, #4]
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	681b      	ldr	r3, [r3, #0]
 8103d12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	681a      	ldr	r2, [r3, #0]
 8103d1a:	687b      	ldr	r3, [r7, #4]
 8103d1c:	681b      	ldr	r3, [r3, #0]
 8103d1e:	f022 0201 	bic.w	r2, r2, #1
 8103d22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8103d24:	68fb      	ldr	r3, [r7, #12]
 8103d26:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8103d2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	2200      	movs	r2, #0
 8103d30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103d32:	687b      	ldr	r3, [r7, #4]
 8103d34:	681b      	ldr	r3, [r3, #0]
 8103d36:	68fa      	ldr	r2, [r7, #12]
 8103d38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	2220      	movs	r2, #32
 8103d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103d42:	687b      	ldr	r3, [r7, #4]
 8103d44:	2200      	movs	r2, #0
 8103d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103d4a:	2300      	movs	r3, #0
}
 8103d4c:	4618      	mov	r0, r3
 8103d4e:	3714      	adds	r7, #20
 8103d50:	46bd      	mov	sp, r7
 8103d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d56:	4770      	bx	lr

08103d58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8103d58:	b580      	push	{r7, lr}
 8103d5a:	b084      	sub	sp, #16
 8103d5c:	af00      	add	r7, sp, #0
 8103d5e:	6078      	str	r0, [r7, #4]
 8103d60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103d68:	2b01      	cmp	r3, #1
 8103d6a:	d101      	bne.n	8103d70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8103d6c:	2302      	movs	r3, #2
 8103d6e:	e02d      	b.n	8103dcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	2201      	movs	r2, #1
 8103d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	2224      	movs	r2, #36	; 0x24
 8103d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103d80:	687b      	ldr	r3, [r7, #4]
 8103d82:	681b      	ldr	r3, [r3, #0]
 8103d84:	681b      	ldr	r3, [r3, #0]
 8103d86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103d88:	687b      	ldr	r3, [r7, #4]
 8103d8a:	681b      	ldr	r3, [r3, #0]
 8103d8c:	681a      	ldr	r2, [r3, #0]
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	f022 0201 	bic.w	r2, r2, #1
 8103d96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	689b      	ldr	r3, [r3, #8]
 8103d9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8103da2:	687b      	ldr	r3, [r7, #4]
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	683a      	ldr	r2, [r7, #0]
 8103da8:	430a      	orrs	r2, r1
 8103daa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8103dac:	6878      	ldr	r0, [r7, #4]
 8103dae:	f000 f84f 	bl	8103e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	681b      	ldr	r3, [r3, #0]
 8103db6:	68fa      	ldr	r2, [r7, #12]
 8103db8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	2220      	movs	r2, #32
 8103dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	2200      	movs	r2, #0
 8103dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103dca:	2300      	movs	r3, #0
}
 8103dcc:	4618      	mov	r0, r3
 8103dce:	3710      	adds	r7, #16
 8103dd0:	46bd      	mov	sp, r7
 8103dd2:	bd80      	pop	{r7, pc}

08103dd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8103dd4:	b580      	push	{r7, lr}
 8103dd6:	b084      	sub	sp, #16
 8103dd8:	af00      	add	r7, sp, #0
 8103dda:	6078      	str	r0, [r7, #4]
 8103ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103de4:	2b01      	cmp	r3, #1
 8103de6:	d101      	bne.n	8103dec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8103de8:	2302      	movs	r3, #2
 8103dea:	e02d      	b.n	8103e48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	2201      	movs	r2, #1
 8103df0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	2224      	movs	r2, #36	; 0x24
 8103df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	681b      	ldr	r3, [r3, #0]
 8103e00:	681b      	ldr	r3, [r3, #0]
 8103e02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	681b      	ldr	r3, [r3, #0]
 8103e08:	681a      	ldr	r2, [r3, #0]
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	681b      	ldr	r3, [r3, #0]
 8103e0e:	f022 0201 	bic.w	r2, r2, #1
 8103e12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	689b      	ldr	r3, [r3, #8]
 8103e1a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	683a      	ldr	r2, [r7, #0]
 8103e24:	430a      	orrs	r2, r1
 8103e26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8103e28:	6878      	ldr	r0, [r7, #4]
 8103e2a:	f000 f811 	bl	8103e50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	68fa      	ldr	r2, [r7, #12]
 8103e34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103e36:	687b      	ldr	r3, [r7, #4]
 8103e38:	2220      	movs	r2, #32
 8103e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103e3e:	687b      	ldr	r3, [r7, #4]
 8103e40:	2200      	movs	r2, #0
 8103e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103e46:	2300      	movs	r3, #0
}
 8103e48:	4618      	mov	r0, r3
 8103e4a:	3710      	adds	r7, #16
 8103e4c:	46bd      	mov	sp, r7
 8103e4e:	bd80      	pop	{r7, pc}

08103e50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8103e50:	b480      	push	{r7}
 8103e52:	b085      	sub	sp, #20
 8103e54:	af00      	add	r7, sp, #0
 8103e56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103e5c:	2b00      	cmp	r3, #0
 8103e5e:	d108      	bne.n	8103e72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	2201      	movs	r2, #1
 8103e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	2201      	movs	r2, #1
 8103e6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8103e70:	e031      	b.n	8103ed6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8103e72:	2310      	movs	r3, #16
 8103e74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8103e76:	2310      	movs	r3, #16
 8103e78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	681b      	ldr	r3, [r3, #0]
 8103e7e:	689b      	ldr	r3, [r3, #8]
 8103e80:	0e5b      	lsrs	r3, r3, #25
 8103e82:	b2db      	uxtb	r3, r3
 8103e84:	f003 0307 	and.w	r3, r3, #7
 8103e88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	689b      	ldr	r3, [r3, #8]
 8103e90:	0f5b      	lsrs	r3, r3, #29
 8103e92:	b2db      	uxtb	r3, r3
 8103e94:	f003 0307 	and.w	r3, r3, #7
 8103e98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8103e9a:	7bbb      	ldrb	r3, [r7, #14]
 8103e9c:	7b3a      	ldrb	r2, [r7, #12]
 8103e9e:	4911      	ldr	r1, [pc, #68]	; (8103ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8103ea0:	5c8a      	ldrb	r2, [r1, r2]
 8103ea2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8103ea6:	7b3a      	ldrb	r2, [r7, #12]
 8103ea8:	490f      	ldr	r1, [pc, #60]	; (8103ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8103eaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8103eac:	fb93 f3f2 	sdiv	r3, r3, r2
 8103eb0:	b29a      	uxth	r2, r3
 8103eb2:	687b      	ldr	r3, [r7, #4]
 8103eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8103eb8:	7bfb      	ldrb	r3, [r7, #15]
 8103eba:	7b7a      	ldrb	r2, [r7, #13]
 8103ebc:	4909      	ldr	r1, [pc, #36]	; (8103ee4 <UARTEx_SetNbDataToProcess+0x94>)
 8103ebe:	5c8a      	ldrb	r2, [r1, r2]
 8103ec0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8103ec4:	7b7a      	ldrb	r2, [r7, #13]
 8103ec6:	4908      	ldr	r1, [pc, #32]	; (8103ee8 <UARTEx_SetNbDataToProcess+0x98>)
 8103ec8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8103eca:	fb93 f3f2 	sdiv	r3, r3, r2
 8103ece:	b29a      	uxth	r2, r3
 8103ed0:	687b      	ldr	r3, [r7, #4]
 8103ed2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8103ed6:	bf00      	nop
 8103ed8:	3714      	adds	r7, #20
 8103eda:	46bd      	mov	sp, r7
 8103edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ee0:	4770      	bx	lr
 8103ee2:	bf00      	nop
 8103ee4:	08103f84 	.word	0x08103f84
 8103ee8:	08103f8c 	.word	0x08103f8c

08103eec <__libc_init_array>:
 8103eec:	b570      	push	{r4, r5, r6, lr}
 8103eee:	4d0d      	ldr	r5, [pc, #52]	; (8103f24 <__libc_init_array+0x38>)
 8103ef0:	4c0d      	ldr	r4, [pc, #52]	; (8103f28 <__libc_init_array+0x3c>)
 8103ef2:	1b64      	subs	r4, r4, r5
 8103ef4:	10a4      	asrs	r4, r4, #2
 8103ef6:	2600      	movs	r6, #0
 8103ef8:	42a6      	cmp	r6, r4
 8103efa:	d109      	bne.n	8103f10 <__libc_init_array+0x24>
 8103efc:	4d0b      	ldr	r5, [pc, #44]	; (8103f2c <__libc_init_array+0x40>)
 8103efe:	4c0c      	ldr	r4, [pc, #48]	; (8103f30 <__libc_init_array+0x44>)
 8103f00:	f000 f820 	bl	8103f44 <_init>
 8103f04:	1b64      	subs	r4, r4, r5
 8103f06:	10a4      	asrs	r4, r4, #2
 8103f08:	2600      	movs	r6, #0
 8103f0a:	42a6      	cmp	r6, r4
 8103f0c:	d105      	bne.n	8103f1a <__libc_init_array+0x2e>
 8103f0e:	bd70      	pop	{r4, r5, r6, pc}
 8103f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8103f14:	4798      	blx	r3
 8103f16:	3601      	adds	r6, #1
 8103f18:	e7ee      	b.n	8103ef8 <__libc_init_array+0xc>
 8103f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8103f1e:	4798      	blx	r3
 8103f20:	3601      	adds	r6, #1
 8103f22:	e7f2      	b.n	8103f0a <__libc_init_array+0x1e>
 8103f24:	08103f9c 	.word	0x08103f9c
 8103f28:	08103f9c 	.word	0x08103f9c
 8103f2c:	08103f9c 	.word	0x08103f9c
 8103f30:	08103fa0 	.word	0x08103fa0

08103f34 <memset>:
 8103f34:	4402      	add	r2, r0
 8103f36:	4603      	mov	r3, r0
 8103f38:	4293      	cmp	r3, r2
 8103f3a:	d100      	bne.n	8103f3e <memset+0xa>
 8103f3c:	4770      	bx	lr
 8103f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8103f42:	e7f9      	b.n	8103f38 <memset+0x4>

08103f44 <_init>:
 8103f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103f46:	bf00      	nop
 8103f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103f4a:	bc08      	pop	{r3}
 8103f4c:	469e      	mov	lr, r3
 8103f4e:	4770      	bx	lr

08103f50 <_fini>:
 8103f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103f52:	bf00      	nop
 8103f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103f56:	bc08      	pop	{r3}
 8103f58:	469e      	mov	lr, r3
 8103f5a:	4770      	bx	lr
