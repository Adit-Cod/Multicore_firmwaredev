
3_HSEMCoreDev_IsTaken_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d10  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08103fa8  08103fa8  00013fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08103fe0  08103fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08103fe8  08103fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08103fec  08103fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000030  10000000  08103ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  10000030  08104020  00020030  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100000e4  08104020  000200e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017bd8  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026c8  00000000  00000000  00037c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ae8  00000000  00000000  0003a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a40  00000000  00000000  0003ade8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000388d1  00000000  00000000  0003b828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e5ac  00000000  00000000  000740f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178acd  00000000  00000000  000826a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fb172  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c5c  00000000  00000000  001fb1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000030 	.word	0x10000030
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08103f90 	.word	0x08103f90

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000034 	.word	0x10000034
 81002d4:	08103f90 	.word	0x08103f90

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b96e 	b.w	81005cc <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	468c      	mov	ip, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	f040 8083 	bne.w	810041e <__udivmoddi4+0x116>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d947      	bls.n	81003ae <__udivmoddi4+0xa6>
 810031e:	fab2 f282 	clz	r2, r2
 8100322:	b142      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100324:	f1c2 0020 	rsb	r0, r2, #32
 8100328:	fa24 f000 	lsr.w	r0, r4, r0
 810032c:	4091      	lsls	r1, r2
 810032e:	4097      	lsls	r7, r2
 8100330:	ea40 0c01 	orr.w	ip, r0, r1
 8100334:	4094      	lsls	r4, r2
 8100336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 810033a:	0c23      	lsrs	r3, r4, #16
 810033c:	fbbc f6f8 	udiv	r6, ip, r8
 8100340:	fa1f fe87 	uxth.w	lr, r7
 8100344:	fb08 c116 	mls	r1, r8, r6, ip
 8100348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034c:	fb06 f10e 	mul.w	r1, r6, lr
 8100350:	4299      	cmp	r1, r3
 8100352:	d909      	bls.n	8100368 <__udivmoddi4+0x60>
 8100354:	18fb      	adds	r3, r7, r3
 8100356:	f106 30ff 	add.w	r0, r6, #4294967295
 810035a:	f080 8119 	bcs.w	8100590 <__udivmoddi4+0x288>
 810035e:	4299      	cmp	r1, r3
 8100360:	f240 8116 	bls.w	8100590 <__udivmoddi4+0x288>
 8100364:	3e02      	subs	r6, #2
 8100366:	443b      	add	r3, r7
 8100368:	1a5b      	subs	r3, r3, r1
 810036a:	b2a4      	uxth	r4, r4
 810036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100370:	fb08 3310 	mls	r3, r8, r0, r3
 8100374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100378:	fb00 fe0e 	mul.w	lr, r0, lr
 810037c:	45a6      	cmp	lr, r4
 810037e:	d909      	bls.n	8100394 <__udivmoddi4+0x8c>
 8100380:	193c      	adds	r4, r7, r4
 8100382:	f100 33ff 	add.w	r3, r0, #4294967295
 8100386:	f080 8105 	bcs.w	8100594 <__udivmoddi4+0x28c>
 810038a:	45a6      	cmp	lr, r4
 810038c:	f240 8102 	bls.w	8100594 <__udivmoddi4+0x28c>
 8100390:	3802      	subs	r0, #2
 8100392:	443c      	add	r4, r7
 8100394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100398:	eba4 040e 	sub.w	r4, r4, lr
 810039c:	2600      	movs	r6, #0
 810039e:	b11d      	cbz	r5, 81003a8 <__udivmoddi4+0xa0>
 81003a0:	40d4      	lsrs	r4, r2
 81003a2:	2300      	movs	r3, #0
 81003a4:	e9c5 4300 	strd	r4, r3, [r5]
 81003a8:	4631      	mov	r1, r6
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	b902      	cbnz	r2, 81003b2 <__udivmoddi4+0xaa>
 81003b0:	deff      	udf	#255	; 0xff
 81003b2:	fab2 f282 	clz	r2, r2
 81003b6:	2a00      	cmp	r2, #0
 81003b8:	d150      	bne.n	810045c <__udivmoddi4+0x154>
 81003ba:	1bcb      	subs	r3, r1, r7
 81003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003c0:	fa1f f887 	uxth.w	r8, r7
 81003c4:	2601      	movs	r6, #1
 81003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 81003ca:	0c21      	lsrs	r1, r4, #16
 81003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 81003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81003d4:	fb08 f30c 	mul.w	r3, r8, ip
 81003d8:	428b      	cmp	r3, r1
 81003da:	d907      	bls.n	81003ec <__udivmoddi4+0xe4>
 81003dc:	1879      	adds	r1, r7, r1
 81003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 81003e2:	d202      	bcs.n	81003ea <__udivmoddi4+0xe2>
 81003e4:	428b      	cmp	r3, r1
 81003e6:	f200 80e9 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 81003ea:	4684      	mov	ip, r0
 81003ec:	1ac9      	subs	r1, r1, r3
 81003ee:	b2a3      	uxth	r3, r4
 81003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 81003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 81003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81003fc:	fb08 f800 	mul.w	r8, r8, r0
 8100400:	45a0      	cmp	r8, r4
 8100402:	d907      	bls.n	8100414 <__udivmoddi4+0x10c>
 8100404:	193c      	adds	r4, r7, r4
 8100406:	f100 33ff 	add.w	r3, r0, #4294967295
 810040a:	d202      	bcs.n	8100412 <__udivmoddi4+0x10a>
 810040c:	45a0      	cmp	r8, r4
 810040e:	f200 80d9 	bhi.w	81005c4 <__udivmoddi4+0x2bc>
 8100412:	4618      	mov	r0, r3
 8100414:	eba4 0408 	sub.w	r4, r4, r8
 8100418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 810041c:	e7bf      	b.n	810039e <__udivmoddi4+0x96>
 810041e:	428b      	cmp	r3, r1
 8100420:	d909      	bls.n	8100436 <__udivmoddi4+0x12e>
 8100422:	2d00      	cmp	r5, #0
 8100424:	f000 80b1 	beq.w	810058a <__udivmoddi4+0x282>
 8100428:	2600      	movs	r6, #0
 810042a:	e9c5 0100 	strd	r0, r1, [r5]
 810042e:	4630      	mov	r0, r6
 8100430:	4631      	mov	r1, r6
 8100432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100436:	fab3 f683 	clz	r6, r3
 810043a:	2e00      	cmp	r6, #0
 810043c:	d14a      	bne.n	81004d4 <__udivmoddi4+0x1cc>
 810043e:	428b      	cmp	r3, r1
 8100440:	d302      	bcc.n	8100448 <__udivmoddi4+0x140>
 8100442:	4282      	cmp	r2, r0
 8100444:	f200 80b8 	bhi.w	81005b8 <__udivmoddi4+0x2b0>
 8100448:	1a84      	subs	r4, r0, r2
 810044a:	eb61 0103 	sbc.w	r1, r1, r3
 810044e:	2001      	movs	r0, #1
 8100450:	468c      	mov	ip, r1
 8100452:	2d00      	cmp	r5, #0
 8100454:	d0a8      	beq.n	81003a8 <__udivmoddi4+0xa0>
 8100456:	e9c5 4c00 	strd	r4, ip, [r5]
 810045a:	e7a5      	b.n	81003a8 <__udivmoddi4+0xa0>
 810045c:	f1c2 0320 	rsb	r3, r2, #32
 8100460:	fa20 f603 	lsr.w	r6, r0, r3
 8100464:	4097      	lsls	r7, r2
 8100466:	fa01 f002 	lsl.w	r0, r1, r2
 810046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810046e:	40d9      	lsrs	r1, r3
 8100470:	4330      	orrs	r0, r6
 8100472:	0c03      	lsrs	r3, r0, #16
 8100474:	fbb1 f6fe 	udiv	r6, r1, lr
 8100478:	fa1f f887 	uxth.w	r8, r7
 810047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8100480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100484:	fb06 f108 	mul.w	r1, r6, r8
 8100488:	4299      	cmp	r1, r3
 810048a:	fa04 f402 	lsl.w	r4, r4, r2
 810048e:	d909      	bls.n	81004a4 <__udivmoddi4+0x19c>
 8100490:	18fb      	adds	r3, r7, r3
 8100492:	f106 3cff 	add.w	ip, r6, #4294967295
 8100496:	f080 808d 	bcs.w	81005b4 <__udivmoddi4+0x2ac>
 810049a:	4299      	cmp	r1, r3
 810049c:	f240 808a 	bls.w	81005b4 <__udivmoddi4+0x2ac>
 81004a0:	3e02      	subs	r6, #2
 81004a2:	443b      	add	r3, r7
 81004a4:	1a5b      	subs	r3, r3, r1
 81004a6:	b281      	uxth	r1, r0
 81004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 81004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 81004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81004b4:	fb00 f308 	mul.w	r3, r0, r8
 81004b8:	428b      	cmp	r3, r1
 81004ba:	d907      	bls.n	81004cc <__udivmoddi4+0x1c4>
 81004bc:	1879      	adds	r1, r7, r1
 81004be:	f100 3cff 	add.w	ip, r0, #4294967295
 81004c2:	d273      	bcs.n	81005ac <__udivmoddi4+0x2a4>
 81004c4:	428b      	cmp	r3, r1
 81004c6:	d971      	bls.n	81005ac <__udivmoddi4+0x2a4>
 81004c8:	3802      	subs	r0, #2
 81004ca:	4439      	add	r1, r7
 81004cc:	1acb      	subs	r3, r1, r3
 81004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 81004d2:	e778      	b.n	81003c6 <__udivmoddi4+0xbe>
 81004d4:	f1c6 0c20 	rsb	ip, r6, #32
 81004d8:	fa03 f406 	lsl.w	r4, r3, r6
 81004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 81004e0:	431c      	orrs	r4, r3
 81004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 81004e6:	fa01 f306 	lsl.w	r3, r1, r6
 81004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 81004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 81004f2:	431f      	orrs	r7, r3
 81004f4:	0c3b      	lsrs	r3, r7, #16
 81004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81004fa:	fa1f f884 	uxth.w	r8, r4
 81004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8100502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100506:	fb09 fa08 	mul.w	sl, r9, r8
 810050a:	458a      	cmp	sl, r1
 810050c:	fa02 f206 	lsl.w	r2, r2, r6
 8100510:	fa00 f306 	lsl.w	r3, r0, r6
 8100514:	d908      	bls.n	8100528 <__udivmoddi4+0x220>
 8100516:	1861      	adds	r1, r4, r1
 8100518:	f109 30ff 	add.w	r0, r9, #4294967295
 810051c:	d248      	bcs.n	81005b0 <__udivmoddi4+0x2a8>
 810051e:	458a      	cmp	sl, r1
 8100520:	d946      	bls.n	81005b0 <__udivmoddi4+0x2a8>
 8100522:	f1a9 0902 	sub.w	r9, r9, #2
 8100526:	4421      	add	r1, r4
 8100528:	eba1 010a 	sub.w	r1, r1, sl
 810052c:	b2bf      	uxth	r7, r7
 810052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8100532:	fb0e 1110 	mls	r1, lr, r0, r1
 8100536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810053a:	fb00 f808 	mul.w	r8, r0, r8
 810053e:	45b8      	cmp	r8, r7
 8100540:	d907      	bls.n	8100552 <__udivmoddi4+0x24a>
 8100542:	19e7      	adds	r7, r4, r7
 8100544:	f100 31ff 	add.w	r1, r0, #4294967295
 8100548:	d22e      	bcs.n	81005a8 <__udivmoddi4+0x2a0>
 810054a:	45b8      	cmp	r8, r7
 810054c:	d92c      	bls.n	81005a8 <__udivmoddi4+0x2a0>
 810054e:	3802      	subs	r0, #2
 8100550:	4427      	add	r7, r4
 8100552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100556:	eba7 0708 	sub.w	r7, r7, r8
 810055a:	fba0 8902 	umull	r8, r9, r0, r2
 810055e:	454f      	cmp	r7, r9
 8100560:	46c6      	mov	lr, r8
 8100562:	4649      	mov	r1, r9
 8100564:	d31a      	bcc.n	810059c <__udivmoddi4+0x294>
 8100566:	d017      	beq.n	8100598 <__udivmoddi4+0x290>
 8100568:	b15d      	cbz	r5, 8100582 <__udivmoddi4+0x27a>
 810056a:	ebb3 020e 	subs.w	r2, r3, lr
 810056e:	eb67 0701 	sbc.w	r7, r7, r1
 8100572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100576:	40f2      	lsrs	r2, r6
 8100578:	ea4c 0202 	orr.w	r2, ip, r2
 810057c:	40f7      	lsrs	r7, r6
 810057e:	e9c5 2700 	strd	r2, r7, [r5]
 8100582:	2600      	movs	r6, #0
 8100584:	4631      	mov	r1, r6
 8100586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810058a:	462e      	mov	r6, r5
 810058c:	4628      	mov	r0, r5
 810058e:	e70b      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100590:	4606      	mov	r6, r0
 8100592:	e6e9      	b.n	8100368 <__udivmoddi4+0x60>
 8100594:	4618      	mov	r0, r3
 8100596:	e6fd      	b.n	8100394 <__udivmoddi4+0x8c>
 8100598:	4543      	cmp	r3, r8
 810059a:	d2e5      	bcs.n	8100568 <__udivmoddi4+0x260>
 810059c:	ebb8 0e02 	subs.w	lr, r8, r2
 81005a0:	eb69 0104 	sbc.w	r1, r9, r4
 81005a4:	3801      	subs	r0, #1
 81005a6:	e7df      	b.n	8100568 <__udivmoddi4+0x260>
 81005a8:	4608      	mov	r0, r1
 81005aa:	e7d2      	b.n	8100552 <__udivmoddi4+0x24a>
 81005ac:	4660      	mov	r0, ip
 81005ae:	e78d      	b.n	81004cc <__udivmoddi4+0x1c4>
 81005b0:	4681      	mov	r9, r0
 81005b2:	e7b9      	b.n	8100528 <__udivmoddi4+0x220>
 81005b4:	4666      	mov	r6, ip
 81005b6:	e775      	b.n	81004a4 <__udivmoddi4+0x19c>
 81005b8:	4630      	mov	r0, r6
 81005ba:	e74a      	b.n	8100452 <__udivmoddi4+0x14a>
 81005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 81005c0:	4439      	add	r1, r7
 81005c2:	e713      	b.n	81003ec <__udivmoddi4+0xe4>
 81005c4:	3802      	subs	r0, #2
 81005c6:	443c      	add	r4, r7
 81005c8:	e724      	b.n	8100414 <__udivmoddi4+0x10c>
 81005ca:	bf00      	nop

081005cc <__aeabi_idiv0>:
 81005cc:	4770      	bx	lr
 81005ce:	bf00      	nop

081005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005d0:	b480      	push	{r7}
 81005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005d4:	4b0b      	ldr	r3, [pc, #44]	; (8100604 <SystemInit+0x34>)
 81005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005da:	4a0a      	ldr	r2, [pc, #40]	; (8100604 <SystemInit+0x34>)
 81005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005e4:	4b07      	ldr	r3, [pc, #28]	; (8100604 <SystemInit+0x34>)
 81005e6:	691b      	ldr	r3, [r3, #16]
 81005e8:	4a06      	ldr	r2, [pc, #24]	; (8100604 <SystemInit+0x34>)
 81005ea:	f043 0310 	orr.w	r3, r3, #16
 81005ee:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81005f0:	4b04      	ldr	r3, [pc, #16]	; (8100604 <SystemInit+0x34>)
 81005f2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81005f6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81005f8:	bf00      	nop
 81005fa:	46bd      	mov	sp, r7
 81005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop
 8100604:	e000ed00 	.word	0xe000ed00

08100608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100608:	b580      	push	{r7, lr}
 810060a:	b082      	sub	sp, #8
 810060c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810060e:	4b31      	ldr	r3, [pc, #196]	; (81006d4 <main+0xcc>)
 8100610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100614:	4a2f      	ldr	r2, [pc, #188]	; (81006d4 <main+0xcc>)
 8100616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810061a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810061e:	4b2d      	ldr	r3, [pc, #180]	; (81006d4 <main+0xcc>)
 8100620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100628:	607b      	str	r3, [r7, #4]
 810062a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810062c:	2001      	movs	r0, #1
 810062e:	f000 fd8d 	bl	810114c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100632:	f000 fe3b 	bl	81012ac <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100636:	2201      	movs	r2, #1
 8100638:	2102      	movs	r1, #2
 810063a:	2000      	movs	r0, #0
 810063c:	f000 fdbc 	bl	81011b8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100640:	4b25      	ldr	r3, [pc, #148]	; (81006d8 <main+0xd0>)
 8100642:	681b      	ldr	r3, [r3, #0]
 8100644:	091b      	lsrs	r3, r3, #4
 8100646:	f003 030f 	and.w	r3, r3, #15
 810064a:	2b07      	cmp	r3, #7
 810064c:	d108      	bne.n	8100660 <main+0x58>
 810064e:	4b23      	ldr	r3, [pc, #140]	; (81006dc <main+0xd4>)
 8100650:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100654:	4a21      	ldr	r2, [pc, #132]	; (81006dc <main+0xd4>)
 8100656:	f043 0301 	orr.w	r3, r3, #1
 810065a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810065e:	e007      	b.n	8100670 <main+0x68>
 8100660:	4b1e      	ldr	r3, [pc, #120]	; (81006dc <main+0xd4>)
 8100662:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100666:	4a1d      	ldr	r2, [pc, #116]	; (81006dc <main+0xd4>)
 8100668:	f043 0301 	orr.w	r3, r3, #1
 810066c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100670:	f000 f976 	bl	8100960 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USART3_UART_Init();
 8100674:	f000 f83e 	bl	81006f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100678:	f000 f888 	bl	810078c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
    while(HAL_HSEM_IsSemTaken(HSEM_ID_1) == HSEM_ACTIVATED);
 810067c:	bf00      	nop
 810067e:	2001      	movs	r0, #1
 8100680:	f000 fd4e 	bl	8101120 <HAL_HSEM_IsSemTaken>
 8100684:	4603      	mov	r3, r0
 8100686:	2b00      	cmp	r3, #0
 8100688:	d0f9      	beq.n	810067e <main+0x76>
    HAL_UART_Transmit(&huart3,(uint8_t*)test_buff2,20,100);
 810068a:	2364      	movs	r3, #100	; 0x64
 810068c:	2214      	movs	r2, #20
 810068e:	4914      	ldr	r1, [pc, #80]	; (81006e0 <main+0xd8>)
 8100690:	4814      	ldr	r0, [pc, #80]	; (81006e4 <main+0xdc>)
 8100692:	f002 fba3 	bl	8102ddc <HAL_UART_Transmit>
    HAL_Delay(2000);
 8100696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 810069a:	f000 fa15 	bl	8100ac8 <HAL_Delay>
    callbackflag_u8 = 1;
 810069e:	4b12      	ldr	r3, [pc, #72]	; (81006e8 <main+0xe0>)
 81006a0:	2201      	movs	r2, #1
 81006a2:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(1 == callbackflag_u8)
 81006a4:	4b10      	ldr	r3, [pc, #64]	; (81006e8 <main+0xe0>)
 81006a6:	781b      	ldrb	r3, [r3, #0]
 81006a8:	2b01      	cmp	r3, #1
 81006aa:	d1fb      	bne.n	81006a4 <main+0x9c>
	  {
		  callbackflag_u8 = 0;
 81006ac:	4b0e      	ldr	r3, [pc, #56]	; (81006e8 <main+0xe0>)
 81006ae:	2200      	movs	r2, #0
 81006b0:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3,(uint8_t*)test_buff,12,100);
 81006b2:	2364      	movs	r3, #100	; 0x64
 81006b4:	220c      	movs	r2, #12
 81006b6:	490d      	ldr	r1, [pc, #52]	; (81006ec <main+0xe4>)
 81006b8:	480a      	ldr	r0, [pc, #40]	; (81006e4 <main+0xdc>)
 81006ba:	f002 fb8f 	bl	8102ddc <HAL_UART_Transmit>
		  HAL_Delay(200);
 81006be:	20c8      	movs	r0, #200	; 0xc8
 81006c0:	f000 fa02 	bl	8100ac8 <HAL_Delay>
		  HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 81006c4:	2101      	movs	r1, #1
 81006c6:	480a      	ldr	r0, [pc, #40]	; (81006f0 <main+0xe8>)
 81006c8:	f000 fd0f 	bl	81010ea <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 81006cc:	20c8      	movs	r0, #200	; 0xc8
 81006ce:	f000 f9fb 	bl	8100ac8 <HAL_Delay>
	  if(1 == callbackflag_u8)
 81006d2:	e7e7      	b.n	81006a4 <main+0x9c>
 81006d4:	58024400 	.word	0x58024400
 81006d8:	e000ed00 	.word	0xe000ed00
 81006dc:	58026400 	.word	0x58026400
 81006e0:	10000014 	.word	0x10000014
 81006e4:	10000050 	.word	0x10000050
 81006e8:	1000004c 	.word	0x1000004c
 81006ec:	10000008 	.word	0x10000008
 81006f0:	58020400 	.word	0x58020400

081006f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 81006f4:	b580      	push	{r7, lr}
 81006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81006f8:	4b22      	ldr	r3, [pc, #136]	; (8100784 <MX_USART3_UART_Init+0x90>)
 81006fa:	4a23      	ldr	r2, [pc, #140]	; (8100788 <MX_USART3_UART_Init+0x94>)
 81006fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81006fe:	4b21      	ldr	r3, [pc, #132]	; (8100784 <MX_USART3_UART_Init+0x90>)
 8100700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100706:	4b1f      	ldr	r3, [pc, #124]	; (8100784 <MX_USART3_UART_Init+0x90>)
 8100708:	2200      	movs	r2, #0
 810070a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810070c:	4b1d      	ldr	r3, [pc, #116]	; (8100784 <MX_USART3_UART_Init+0x90>)
 810070e:	2200      	movs	r2, #0
 8100710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100712:	4b1c      	ldr	r3, [pc, #112]	; (8100784 <MX_USART3_UART_Init+0x90>)
 8100714:	2200      	movs	r2, #0
 8100716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100718:	4b1a      	ldr	r3, [pc, #104]	; (8100784 <MX_USART3_UART_Init+0x90>)
 810071a:	220c      	movs	r2, #12
 810071c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810071e:	4b19      	ldr	r3, [pc, #100]	; (8100784 <MX_USART3_UART_Init+0x90>)
 8100720:	2200      	movs	r2, #0
 8100722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100724:	4b17      	ldr	r3, [pc, #92]	; (8100784 <MX_USART3_UART_Init+0x90>)
 8100726:	2200      	movs	r2, #0
 8100728:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810072a:	4b16      	ldr	r3, [pc, #88]	; (8100784 <MX_USART3_UART_Init+0x90>)
 810072c:	2200      	movs	r2, #0
 810072e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100730:	4b14      	ldr	r3, [pc, #80]	; (8100784 <MX_USART3_UART_Init+0x90>)
 8100732:	2200      	movs	r2, #0
 8100734:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100736:	4b13      	ldr	r3, [pc, #76]	; (8100784 <MX_USART3_UART_Init+0x90>)
 8100738:	2200      	movs	r2, #0
 810073a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 810073c:	4811      	ldr	r0, [pc, #68]	; (8100784 <MX_USART3_UART_Init+0x90>)
 810073e:	f002 fafd 	bl	8102d3c <HAL_UART_Init>
 8100742:	4603      	mov	r3, r0
 8100744:	2b00      	cmp	r3, #0
 8100746:	d001      	beq.n	810074c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100748:	f000 f854 	bl	81007f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810074c:	2100      	movs	r1, #0
 810074e:	480d      	ldr	r0, [pc, #52]	; (8100784 <MX_USART3_UART_Init+0x90>)
 8100750:	f003 fb28 	bl	8103da4 <HAL_UARTEx_SetTxFifoThreshold>
 8100754:	4603      	mov	r3, r0
 8100756:	2b00      	cmp	r3, #0
 8100758:	d001      	beq.n	810075e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810075a:	f000 f84b 	bl	81007f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810075e:	2100      	movs	r1, #0
 8100760:	4808      	ldr	r0, [pc, #32]	; (8100784 <MX_USART3_UART_Init+0x90>)
 8100762:	f003 fb5d 	bl	8103e20 <HAL_UARTEx_SetRxFifoThreshold>
 8100766:	4603      	mov	r3, r0
 8100768:	2b00      	cmp	r3, #0
 810076a:	d001      	beq.n	8100770 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 810076c:	f000 f842 	bl	81007f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100770:	4804      	ldr	r0, [pc, #16]	; (8100784 <MX_USART3_UART_Init+0x90>)
 8100772:	f003 fade 	bl	8103d32 <HAL_UARTEx_DisableFifoMode>
 8100776:	4603      	mov	r3, r0
 8100778:	2b00      	cmp	r3, #0
 810077a:	d001      	beq.n	8100780 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810077c:	f000 f83a 	bl	81007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100780:	bf00      	nop
 8100782:	bd80      	pop	{r7, pc}
 8100784:	10000050 	.word	0x10000050
 8100788:	40004800 	.word	0x40004800

0810078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810078c:	b580      	push	{r7, lr}
 810078e:	b086      	sub	sp, #24
 8100790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100792:	1d3b      	adds	r3, r7, #4
 8100794:	2200      	movs	r2, #0
 8100796:	601a      	str	r2, [r3, #0]
 8100798:	605a      	str	r2, [r3, #4]
 810079a:	609a      	str	r2, [r3, #8]
 810079c:	60da      	str	r2, [r3, #12]
 810079e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81007a0:	4b12      	ldr	r3, [pc, #72]	; (81007ec <MX_GPIO_Init+0x60>)
 81007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007a6:	4a11      	ldr	r2, [pc, #68]	; (81007ec <MX_GPIO_Init+0x60>)
 81007a8:	f043 0302 	orr.w	r3, r3, #2
 81007ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007b0:	4b0e      	ldr	r3, [pc, #56]	; (81007ec <MX_GPIO_Init+0x60>)
 81007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007b6:	f003 0302 	and.w	r3, r3, #2
 81007ba:	603b      	str	r3, [r7, #0]
 81007bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 81007be:	2200      	movs	r2, #0
 81007c0:	2101      	movs	r1, #1
 81007c2:	480b      	ldr	r0, [pc, #44]	; (81007f0 <MX_GPIO_Init+0x64>)
 81007c4:	f000 fc78 	bl	81010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 81007c8:	2301      	movs	r3, #1
 81007ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81007cc:	2301      	movs	r3, #1
 81007ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81007d0:	2300      	movs	r3, #0
 81007d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81007d4:	2300      	movs	r3, #0
 81007d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 81007d8:	1d3b      	adds	r3, r7, #4
 81007da:	4619      	mov	r1, r3
 81007dc:	4804      	ldr	r0, [pc, #16]	; (81007f0 <MX_GPIO_Init+0x64>)
 81007de:	f000 fabb 	bl	8100d58 <HAL_GPIO_Init>

}
 81007e2:	bf00      	nop
 81007e4:	3718      	adds	r7, #24
 81007e6:	46bd      	mov	sp, r7
 81007e8:	bd80      	pop	{r7, pc}
 81007ea:	bf00      	nop
 81007ec:	58024400 	.word	0x58024400
 81007f0:	58020400 	.word	0x58020400

081007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81007f4:	b480      	push	{r7}
 81007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81007f8:	b672      	cpsid	i
}
 81007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81007fc:	e7fe      	b.n	81007fc <Error_Handler+0x8>
	...

08100800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100800:	b580      	push	{r7, lr}
 8100802:	b082      	sub	sp, #8
 8100804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100806:	4b0d      	ldr	r3, [pc, #52]	; (810083c <HAL_MspInit+0x3c>)
 8100808:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810080c:	4a0b      	ldr	r2, [pc, #44]	; (810083c <HAL_MspInit+0x3c>)
 810080e:	f043 0302 	orr.w	r3, r3, #2
 8100812:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100816:	4b09      	ldr	r3, [pc, #36]	; (810083c <HAL_MspInit+0x3c>)
 8100818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810081c:	f003 0302 	and.w	r3, r3, #2
 8100820:	607b      	str	r3, [r7, #4]
 8100822:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8100824:	2200      	movs	r2, #0
 8100826:	2100      	movs	r1, #0
 8100828:	207e      	movs	r0, #126	; 0x7e
 810082a:	f000 fa4c 	bl	8100cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810082e:	207e      	movs	r0, #126	; 0x7e
 8100830:	f000 fa63 	bl	8100cfa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100834:	bf00      	nop
 8100836:	3708      	adds	r7, #8
 8100838:	46bd      	mov	sp, r7
 810083a:	bd80      	pop	{r7, pc}
 810083c:	58024400 	.word	0x58024400

08100840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100840:	b580      	push	{r7, lr}
 8100842:	b0b2      	sub	sp, #200	; 0xc8
 8100844:	af00      	add	r7, sp, #0
 8100846:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100848:	f107 030c 	add.w	r3, r7, #12
 810084c:	22bc      	movs	r2, #188	; 0xbc
 810084e:	2100      	movs	r1, #0
 8100850:	4618      	mov	r0, r3
 8100852:	f003 fb95 	bl	8103f80 <memset>
  if(huart->Instance==USART3)
 8100856:	687b      	ldr	r3, [r7, #4]
 8100858:	681b      	ldr	r3, [r3, #0]
 810085a:	4a12      	ldr	r2, [pc, #72]	; (81008a4 <HAL_UART_MspInit+0x64>)
 810085c:	4293      	cmp	r3, r2
 810085e:	d11d      	bne.n	810089c <HAL_UART_MspInit+0x5c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100860:	2302      	movs	r3, #2
 8100862:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100864:	2300      	movs	r3, #0
 8100866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810086a:	f107 030c 	add.w	r3, r7, #12
 810086e:	4618      	mov	r0, r3
 8100870:	f000 ff02 	bl	8101678 <HAL_RCCEx_PeriphCLKConfig>
 8100874:	4603      	mov	r3, r0
 8100876:	2b00      	cmp	r3, #0
 8100878:	d001      	beq.n	810087e <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
 810087a:	f7ff ffbb 	bl	81007f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810087e:	4b0a      	ldr	r3, [pc, #40]	; (81008a8 <HAL_UART_MspInit+0x68>)
 8100880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100884:	4a08      	ldr	r2, [pc, #32]	; (81008a8 <HAL_UART_MspInit+0x68>)
 8100886:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810088a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810088e:	4b06      	ldr	r3, [pc, #24]	; (81008a8 <HAL_UART_MspInit+0x68>)
 8100890:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100898:	60bb      	str	r3, [r7, #8]
 810089a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 810089c:	bf00      	nop
 810089e:	37c8      	adds	r7, #200	; 0xc8
 81008a0:	46bd      	mov	sp, r7
 81008a2:	bd80      	pop	{r7, pc}
 81008a4:	40004800 	.word	0x40004800
 81008a8:	58024400 	.word	0x58024400

081008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81008ac:	b480      	push	{r7}
 81008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81008b0:	e7fe      	b.n	81008b0 <NMI_Handler+0x4>

081008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81008b2:	b480      	push	{r7}
 81008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81008b6:	e7fe      	b.n	81008b6 <HardFault_Handler+0x4>

081008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81008b8:	b480      	push	{r7}
 81008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81008bc:	e7fe      	b.n	81008bc <MemManage_Handler+0x4>

081008be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81008be:	b480      	push	{r7}
 81008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81008c2:	e7fe      	b.n	81008c2 <BusFault_Handler+0x4>

081008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81008c4:	b480      	push	{r7}
 81008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81008c8:	e7fe      	b.n	81008c8 <UsageFault_Handler+0x4>

081008ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81008ca:	b480      	push	{r7}
 81008cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81008ce:	bf00      	nop
 81008d0:	46bd      	mov	sp, r7
 81008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008d6:	4770      	bx	lr

081008d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81008d8:	b480      	push	{r7}
 81008da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81008dc:	bf00      	nop
 81008de:	46bd      	mov	sp, r7
 81008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008e4:	4770      	bx	lr

081008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81008e6:	b480      	push	{r7}
 81008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81008ea:	bf00      	nop
 81008ec:	46bd      	mov	sp, r7
 81008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008f2:	4770      	bx	lr

081008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81008f4:	b580      	push	{r7, lr}
 81008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81008f8:	f000 f8c6 	bl	8100a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81008fc:	bf00      	nop
 81008fe:	bd80      	pop	{r7, pc}

08100900 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100900:	b580      	push	{r7, lr}
 8100902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100904:	f000 fc34 	bl	8101170 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100908:	bf00      	nop
 810090a:	bd80      	pop	{r7, pc}

0810090c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810090c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100944 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100910:	f7ff fe5e 	bl	81005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100914:	480c      	ldr	r0, [pc, #48]	; (8100948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100916:	490d      	ldr	r1, [pc, #52]	; (810094c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100918:	4a0d      	ldr	r2, [pc, #52]	; (8100950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810091c:	e002      	b.n	8100924 <LoopCopyDataInit>

0810091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100922:	3304      	adds	r3, #4

08100924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100928:	d3f9      	bcc.n	810091e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810092a:	4a0a      	ldr	r2, [pc, #40]	; (8100954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810092c:	4c0a      	ldr	r4, [pc, #40]	; (8100958 <LoopFillZerobss+0x22>)
  movs r3, #0
 810092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100930:	e001      	b.n	8100936 <LoopFillZerobss>

08100932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100934:	3204      	adds	r2, #4

08100936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100938:	d3fb      	bcc.n	8100932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810093a:	f003 fafd 	bl	8103f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810093e:	f7ff fe63 	bl	8100608 <main>
  bx  lr
 8100942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100944:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100948:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810094c:	10000030 	.word	0x10000030
  ldr r2, =_sidata
 8100950:	08103ff0 	.word	0x08103ff0
  ldr r2, =_sbss
 8100954:	10000030 	.word	0x10000030
  ldr r4, =_ebss
 8100958:	100000e4 	.word	0x100000e4

0810095c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810095c:	e7fe      	b.n	810095c <ADC3_IRQHandler>
	...

08100960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100960:	b580      	push	{r7, lr}
 8100962:	b082      	sub	sp, #8
 8100964:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100966:	4b28      	ldr	r3, [pc, #160]	; (8100a08 <HAL_Init+0xa8>)
 8100968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810096c:	4a26      	ldr	r2, [pc, #152]	; (8100a08 <HAL_Init+0xa8>)
 810096e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100972:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100976:	4b24      	ldr	r3, [pc, #144]	; (8100a08 <HAL_Init+0xa8>)
 8100978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100980:	603b      	str	r3, [r7, #0]
 8100982:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100984:	4b21      	ldr	r3, [pc, #132]	; (8100a0c <HAL_Init+0xac>)
 8100986:	681b      	ldr	r3, [r3, #0]
 8100988:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810098c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100990:	4a1e      	ldr	r2, [pc, #120]	; (8100a0c <HAL_Init+0xac>)
 8100992:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100996:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100998:	4b1c      	ldr	r3, [pc, #112]	; (8100a0c <HAL_Init+0xac>)
 810099a:	681b      	ldr	r3, [r3, #0]
 810099c:	4a1b      	ldr	r2, [pc, #108]	; (8100a0c <HAL_Init+0xac>)
 810099e:	f043 0301 	orr.w	r3, r3, #1
 81009a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81009a4:	2003      	movs	r0, #3
 81009a6:	f000 f983 	bl	8100cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81009aa:	f000 fc8d 	bl	81012c8 <HAL_RCC_GetSysClockFreq>
 81009ae:	4602      	mov	r2, r0
 81009b0:	4b15      	ldr	r3, [pc, #84]	; (8100a08 <HAL_Init+0xa8>)
 81009b2:	699b      	ldr	r3, [r3, #24]
 81009b4:	0a1b      	lsrs	r3, r3, #8
 81009b6:	f003 030f 	and.w	r3, r3, #15
 81009ba:	4915      	ldr	r1, [pc, #84]	; (8100a10 <HAL_Init+0xb0>)
 81009bc:	5ccb      	ldrb	r3, [r1, r3]
 81009be:	f003 031f 	and.w	r3, r3, #31
 81009c2:	fa22 f303 	lsr.w	r3, r2, r3
 81009c6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81009c8:	4b0f      	ldr	r3, [pc, #60]	; (8100a08 <HAL_Init+0xa8>)
 81009ca:	699b      	ldr	r3, [r3, #24]
 81009cc:	f003 030f 	and.w	r3, r3, #15
 81009d0:	4a0f      	ldr	r2, [pc, #60]	; (8100a10 <HAL_Init+0xb0>)
 81009d2:	5cd3      	ldrb	r3, [r2, r3]
 81009d4:	f003 031f 	and.w	r3, r3, #31
 81009d8:	687a      	ldr	r2, [r7, #4]
 81009da:	fa22 f303 	lsr.w	r3, r2, r3
 81009de:	4a0d      	ldr	r2, [pc, #52]	; (8100a14 <HAL_Init+0xb4>)
 81009e0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81009e2:	4b0c      	ldr	r3, [pc, #48]	; (8100a14 <HAL_Init+0xb4>)
 81009e4:	681b      	ldr	r3, [r3, #0]
 81009e6:	4a0c      	ldr	r2, [pc, #48]	; (8100a18 <HAL_Init+0xb8>)
 81009e8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81009ea:	200f      	movs	r0, #15
 81009ec:	f000 f816 	bl	8100a1c <HAL_InitTick>
 81009f0:	4603      	mov	r3, r0
 81009f2:	2b00      	cmp	r3, #0
 81009f4:	d001      	beq.n	81009fa <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81009f6:	2301      	movs	r3, #1
 81009f8:	e002      	b.n	8100a00 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81009fa:	f7ff ff01 	bl	8100800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81009fe:	2300      	movs	r3, #0
}
 8100a00:	4618      	mov	r0, r3
 8100a02:	3708      	adds	r7, #8
 8100a04:	46bd      	mov	sp, r7
 8100a06:	bd80      	pop	{r7, pc}
 8100a08:	58024400 	.word	0x58024400
 8100a0c:	40024400 	.word	0x40024400
 8100a10:	08103fa8 	.word	0x08103fa8
 8100a14:	10000004 	.word	0x10000004
 8100a18:	10000000 	.word	0x10000000

08100a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a1c:	b580      	push	{r7, lr}
 8100a1e:	b082      	sub	sp, #8
 8100a20:	af00      	add	r7, sp, #0
 8100a22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100a24:	4b15      	ldr	r3, [pc, #84]	; (8100a7c <HAL_InitTick+0x60>)
 8100a26:	781b      	ldrb	r3, [r3, #0]
 8100a28:	2b00      	cmp	r3, #0
 8100a2a:	d101      	bne.n	8100a30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100a2c:	2301      	movs	r3, #1
 8100a2e:	e021      	b.n	8100a74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100a30:	4b13      	ldr	r3, [pc, #76]	; (8100a80 <HAL_InitTick+0x64>)
 8100a32:	681a      	ldr	r2, [r3, #0]
 8100a34:	4b11      	ldr	r3, [pc, #68]	; (8100a7c <HAL_InitTick+0x60>)
 8100a36:	781b      	ldrb	r3, [r3, #0]
 8100a38:	4619      	mov	r1, r3
 8100a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a46:	4618      	mov	r0, r3
 8100a48:	f000 f965 	bl	8100d16 <HAL_SYSTICK_Config>
 8100a4c:	4603      	mov	r3, r0
 8100a4e:	2b00      	cmp	r3, #0
 8100a50:	d001      	beq.n	8100a56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100a52:	2301      	movs	r3, #1
 8100a54:	e00e      	b.n	8100a74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100a56:	687b      	ldr	r3, [r7, #4]
 8100a58:	2b0f      	cmp	r3, #15
 8100a5a:	d80a      	bhi.n	8100a72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100a5c:	2200      	movs	r2, #0
 8100a5e:	6879      	ldr	r1, [r7, #4]
 8100a60:	f04f 30ff 	mov.w	r0, #4294967295
 8100a64:	f000 f92f 	bl	8100cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100a68:	4a06      	ldr	r2, [pc, #24]	; (8100a84 <HAL_InitTick+0x68>)
 8100a6a:	687b      	ldr	r3, [r7, #4]
 8100a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100a6e:	2300      	movs	r3, #0
 8100a70:	e000      	b.n	8100a74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100a72:	2301      	movs	r3, #1
}
 8100a74:	4618      	mov	r0, r3
 8100a76:	3708      	adds	r7, #8
 8100a78:	46bd      	mov	sp, r7
 8100a7a:	bd80      	pop	{r7, pc}
 8100a7c:	1000002c 	.word	0x1000002c
 8100a80:	10000000 	.word	0x10000000
 8100a84:	10000028 	.word	0x10000028

08100a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100a88:	b480      	push	{r7}
 8100a8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100a8c:	4b06      	ldr	r3, [pc, #24]	; (8100aa8 <HAL_IncTick+0x20>)
 8100a8e:	781b      	ldrb	r3, [r3, #0]
 8100a90:	461a      	mov	r2, r3
 8100a92:	4b06      	ldr	r3, [pc, #24]	; (8100aac <HAL_IncTick+0x24>)
 8100a94:	681b      	ldr	r3, [r3, #0]
 8100a96:	4413      	add	r3, r2
 8100a98:	4a04      	ldr	r2, [pc, #16]	; (8100aac <HAL_IncTick+0x24>)
 8100a9a:	6013      	str	r3, [r2, #0]
}
 8100a9c:	bf00      	nop
 8100a9e:	46bd      	mov	sp, r7
 8100aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100aa4:	4770      	bx	lr
 8100aa6:	bf00      	nop
 8100aa8:	1000002c 	.word	0x1000002c
 8100aac:	100000e0 	.word	0x100000e0

08100ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100ab0:	b480      	push	{r7}
 8100ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8100ab4:	4b03      	ldr	r3, [pc, #12]	; (8100ac4 <HAL_GetTick+0x14>)
 8100ab6:	681b      	ldr	r3, [r3, #0]
}
 8100ab8:	4618      	mov	r0, r3
 8100aba:	46bd      	mov	sp, r7
 8100abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ac0:	4770      	bx	lr
 8100ac2:	bf00      	nop
 8100ac4:	100000e0 	.word	0x100000e0

08100ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100ac8:	b580      	push	{r7, lr}
 8100aca:	b084      	sub	sp, #16
 8100acc:	af00      	add	r7, sp, #0
 8100ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100ad0:	f7ff ffee 	bl	8100ab0 <HAL_GetTick>
 8100ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100ad6:	687b      	ldr	r3, [r7, #4]
 8100ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100ada:	68fb      	ldr	r3, [r7, #12]
 8100adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100ae0:	d005      	beq.n	8100aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100ae2:	4b0a      	ldr	r3, [pc, #40]	; (8100b0c <HAL_Delay+0x44>)
 8100ae4:	781b      	ldrb	r3, [r3, #0]
 8100ae6:	461a      	mov	r2, r3
 8100ae8:	68fb      	ldr	r3, [r7, #12]
 8100aea:	4413      	add	r3, r2
 8100aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100aee:	bf00      	nop
 8100af0:	f7ff ffde 	bl	8100ab0 <HAL_GetTick>
 8100af4:	4602      	mov	r2, r0
 8100af6:	68bb      	ldr	r3, [r7, #8]
 8100af8:	1ad3      	subs	r3, r2, r3
 8100afa:	68fa      	ldr	r2, [r7, #12]
 8100afc:	429a      	cmp	r2, r3
 8100afe:	d8f7      	bhi.n	8100af0 <HAL_Delay+0x28>
  {
  }
}
 8100b00:	bf00      	nop
 8100b02:	bf00      	nop
 8100b04:	3710      	adds	r7, #16
 8100b06:	46bd      	mov	sp, r7
 8100b08:	bd80      	pop	{r7, pc}
 8100b0a:	bf00      	nop
 8100b0c:	1000002c 	.word	0x1000002c

08100b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b10:	b480      	push	{r7}
 8100b12:	b085      	sub	sp, #20
 8100b14:	af00      	add	r7, sp, #0
 8100b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100b18:	687b      	ldr	r3, [r7, #4]
 8100b1a:	f003 0307 	and.w	r3, r3, #7
 8100b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100b20:	4b0c      	ldr	r3, [pc, #48]	; (8100b54 <__NVIC_SetPriorityGrouping+0x44>)
 8100b22:	68db      	ldr	r3, [r3, #12]
 8100b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100b26:	68ba      	ldr	r2, [r7, #8]
 8100b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100b2c:	4013      	ands	r3, r2
 8100b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100b30:	68fb      	ldr	r3, [r7, #12]
 8100b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100b34:	68bb      	ldr	r3, [r7, #8]
 8100b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100b42:	4a04      	ldr	r2, [pc, #16]	; (8100b54 <__NVIC_SetPriorityGrouping+0x44>)
 8100b44:	68bb      	ldr	r3, [r7, #8]
 8100b46:	60d3      	str	r3, [r2, #12]
}
 8100b48:	bf00      	nop
 8100b4a:	3714      	adds	r7, #20
 8100b4c:	46bd      	mov	sp, r7
 8100b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b52:	4770      	bx	lr
 8100b54:	e000ed00 	.word	0xe000ed00

08100b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100b58:	b480      	push	{r7}
 8100b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100b5c:	4b04      	ldr	r3, [pc, #16]	; (8100b70 <__NVIC_GetPriorityGrouping+0x18>)
 8100b5e:	68db      	ldr	r3, [r3, #12]
 8100b60:	0a1b      	lsrs	r3, r3, #8
 8100b62:	f003 0307 	and.w	r3, r3, #7
}
 8100b66:	4618      	mov	r0, r3
 8100b68:	46bd      	mov	sp, r7
 8100b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b6e:	4770      	bx	lr
 8100b70:	e000ed00 	.word	0xe000ed00

08100b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100b74:	b480      	push	{r7}
 8100b76:	b083      	sub	sp, #12
 8100b78:	af00      	add	r7, sp, #0
 8100b7a:	4603      	mov	r3, r0
 8100b7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b82:	2b00      	cmp	r3, #0
 8100b84:	db0b      	blt.n	8100b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100b86:	88fb      	ldrh	r3, [r7, #6]
 8100b88:	f003 021f 	and.w	r2, r3, #31
 8100b8c:	4907      	ldr	r1, [pc, #28]	; (8100bac <__NVIC_EnableIRQ+0x38>)
 8100b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b92:	095b      	lsrs	r3, r3, #5
 8100b94:	2001      	movs	r0, #1
 8100b96:	fa00 f202 	lsl.w	r2, r0, r2
 8100b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100b9e:	bf00      	nop
 8100ba0:	370c      	adds	r7, #12
 8100ba2:	46bd      	mov	sp, r7
 8100ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ba8:	4770      	bx	lr
 8100baa:	bf00      	nop
 8100bac:	e000e100 	.word	0xe000e100

08100bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100bb0:	b480      	push	{r7}
 8100bb2:	b083      	sub	sp, #12
 8100bb4:	af00      	add	r7, sp, #0
 8100bb6:	4603      	mov	r3, r0
 8100bb8:	6039      	str	r1, [r7, #0]
 8100bba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100bbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bc0:	2b00      	cmp	r3, #0
 8100bc2:	db0a      	blt.n	8100bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bc4:	683b      	ldr	r3, [r7, #0]
 8100bc6:	b2da      	uxtb	r2, r3
 8100bc8:	490c      	ldr	r1, [pc, #48]	; (8100bfc <__NVIC_SetPriority+0x4c>)
 8100bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100bce:	0112      	lsls	r2, r2, #4
 8100bd0:	b2d2      	uxtb	r2, r2
 8100bd2:	440b      	add	r3, r1
 8100bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100bd8:	e00a      	b.n	8100bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100bda:	683b      	ldr	r3, [r7, #0]
 8100bdc:	b2da      	uxtb	r2, r3
 8100bde:	4908      	ldr	r1, [pc, #32]	; (8100c00 <__NVIC_SetPriority+0x50>)
 8100be0:	88fb      	ldrh	r3, [r7, #6]
 8100be2:	f003 030f 	and.w	r3, r3, #15
 8100be6:	3b04      	subs	r3, #4
 8100be8:	0112      	lsls	r2, r2, #4
 8100bea:	b2d2      	uxtb	r2, r2
 8100bec:	440b      	add	r3, r1
 8100bee:	761a      	strb	r2, [r3, #24]
}
 8100bf0:	bf00      	nop
 8100bf2:	370c      	adds	r7, #12
 8100bf4:	46bd      	mov	sp, r7
 8100bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bfa:	4770      	bx	lr
 8100bfc:	e000e100 	.word	0xe000e100
 8100c00:	e000ed00 	.word	0xe000ed00

08100c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c04:	b480      	push	{r7}
 8100c06:	b089      	sub	sp, #36	; 0x24
 8100c08:	af00      	add	r7, sp, #0
 8100c0a:	60f8      	str	r0, [r7, #12]
 8100c0c:	60b9      	str	r1, [r7, #8]
 8100c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100c10:	68fb      	ldr	r3, [r7, #12]
 8100c12:	f003 0307 	and.w	r3, r3, #7
 8100c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100c18:	69fb      	ldr	r3, [r7, #28]
 8100c1a:	f1c3 0307 	rsb	r3, r3, #7
 8100c1e:	2b04      	cmp	r3, #4
 8100c20:	bf28      	it	cs
 8100c22:	2304      	movcs	r3, #4
 8100c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100c26:	69fb      	ldr	r3, [r7, #28]
 8100c28:	3304      	adds	r3, #4
 8100c2a:	2b06      	cmp	r3, #6
 8100c2c:	d902      	bls.n	8100c34 <NVIC_EncodePriority+0x30>
 8100c2e:	69fb      	ldr	r3, [r7, #28]
 8100c30:	3b03      	subs	r3, #3
 8100c32:	e000      	b.n	8100c36 <NVIC_EncodePriority+0x32>
 8100c34:	2300      	movs	r3, #0
 8100c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c38:	f04f 32ff 	mov.w	r2, #4294967295
 8100c3c:	69bb      	ldr	r3, [r7, #24]
 8100c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8100c42:	43da      	mvns	r2, r3
 8100c44:	68bb      	ldr	r3, [r7, #8]
 8100c46:	401a      	ands	r2, r3
 8100c48:	697b      	ldr	r3, [r7, #20]
 8100c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8100c50:	697b      	ldr	r3, [r7, #20]
 8100c52:	fa01 f303 	lsl.w	r3, r1, r3
 8100c56:	43d9      	mvns	r1, r3
 8100c58:	687b      	ldr	r3, [r7, #4]
 8100c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c5c:	4313      	orrs	r3, r2
         );
}
 8100c5e:	4618      	mov	r0, r3
 8100c60:	3724      	adds	r7, #36	; 0x24
 8100c62:	46bd      	mov	sp, r7
 8100c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c68:	4770      	bx	lr
	...

08100c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100c6c:	b580      	push	{r7, lr}
 8100c6e:	b082      	sub	sp, #8
 8100c70:	af00      	add	r7, sp, #0
 8100c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c74:	687b      	ldr	r3, [r7, #4]
 8100c76:	3b01      	subs	r3, #1
 8100c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100c7c:	d301      	bcc.n	8100c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100c7e:	2301      	movs	r3, #1
 8100c80:	e00f      	b.n	8100ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c82:	4a0a      	ldr	r2, [pc, #40]	; (8100cac <SysTick_Config+0x40>)
 8100c84:	687b      	ldr	r3, [r7, #4]
 8100c86:	3b01      	subs	r3, #1
 8100c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100c8a:	210f      	movs	r1, #15
 8100c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8100c90:	f7ff ff8e 	bl	8100bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100c94:	4b05      	ldr	r3, [pc, #20]	; (8100cac <SysTick_Config+0x40>)
 8100c96:	2200      	movs	r2, #0
 8100c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100c9a:	4b04      	ldr	r3, [pc, #16]	; (8100cac <SysTick_Config+0x40>)
 8100c9c:	2207      	movs	r2, #7
 8100c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100ca0:	2300      	movs	r3, #0
}
 8100ca2:	4618      	mov	r0, r3
 8100ca4:	3708      	adds	r7, #8
 8100ca6:	46bd      	mov	sp, r7
 8100ca8:	bd80      	pop	{r7, pc}
 8100caa:	bf00      	nop
 8100cac:	e000e010 	.word	0xe000e010

08100cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100cb0:	b580      	push	{r7, lr}
 8100cb2:	b082      	sub	sp, #8
 8100cb4:	af00      	add	r7, sp, #0
 8100cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100cb8:	6878      	ldr	r0, [r7, #4]
 8100cba:	f7ff ff29 	bl	8100b10 <__NVIC_SetPriorityGrouping>
}
 8100cbe:	bf00      	nop
 8100cc0:	3708      	adds	r7, #8
 8100cc2:	46bd      	mov	sp, r7
 8100cc4:	bd80      	pop	{r7, pc}

08100cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100cc6:	b580      	push	{r7, lr}
 8100cc8:	b086      	sub	sp, #24
 8100cca:	af00      	add	r7, sp, #0
 8100ccc:	4603      	mov	r3, r0
 8100cce:	60b9      	str	r1, [r7, #8]
 8100cd0:	607a      	str	r2, [r7, #4]
 8100cd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100cd4:	f7ff ff40 	bl	8100b58 <__NVIC_GetPriorityGrouping>
 8100cd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100cda:	687a      	ldr	r2, [r7, #4]
 8100cdc:	68b9      	ldr	r1, [r7, #8]
 8100cde:	6978      	ldr	r0, [r7, #20]
 8100ce0:	f7ff ff90 	bl	8100c04 <NVIC_EncodePriority>
 8100ce4:	4602      	mov	r2, r0
 8100ce6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100cea:	4611      	mov	r1, r2
 8100cec:	4618      	mov	r0, r3
 8100cee:	f7ff ff5f 	bl	8100bb0 <__NVIC_SetPriority>
}
 8100cf2:	bf00      	nop
 8100cf4:	3718      	adds	r7, #24
 8100cf6:	46bd      	mov	sp, r7
 8100cf8:	bd80      	pop	{r7, pc}

08100cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100cfa:	b580      	push	{r7, lr}
 8100cfc:	b082      	sub	sp, #8
 8100cfe:	af00      	add	r7, sp, #0
 8100d00:	4603      	mov	r3, r0
 8100d02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100d04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100d08:	4618      	mov	r0, r3
 8100d0a:	f7ff ff33 	bl	8100b74 <__NVIC_EnableIRQ>
}
 8100d0e:	bf00      	nop
 8100d10:	3708      	adds	r7, #8
 8100d12:	46bd      	mov	sp, r7
 8100d14:	bd80      	pop	{r7, pc}

08100d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100d16:	b580      	push	{r7, lr}
 8100d18:	b082      	sub	sp, #8
 8100d1a:	af00      	add	r7, sp, #0
 8100d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100d1e:	6878      	ldr	r0, [r7, #4]
 8100d20:	f7ff ffa4 	bl	8100c6c <SysTick_Config>
 8100d24:	4603      	mov	r3, r0
}
 8100d26:	4618      	mov	r0, r3
 8100d28:	3708      	adds	r7, #8
 8100d2a:	46bd      	mov	sp, r7
 8100d2c:	bd80      	pop	{r7, pc}
	...

08100d30 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100d30:	b480      	push	{r7}
 8100d32:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100d34:	4b07      	ldr	r3, [pc, #28]	; (8100d54 <HAL_GetCurrentCPUID+0x24>)
 8100d36:	681b      	ldr	r3, [r3, #0]
 8100d38:	091b      	lsrs	r3, r3, #4
 8100d3a:	f003 030f 	and.w	r3, r3, #15
 8100d3e:	2b07      	cmp	r3, #7
 8100d40:	d101      	bne.n	8100d46 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100d42:	2303      	movs	r3, #3
 8100d44:	e000      	b.n	8100d48 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100d46:	2301      	movs	r3, #1
  }
}
 8100d48:	4618      	mov	r0, r3
 8100d4a:	46bd      	mov	sp, r7
 8100d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d50:	4770      	bx	lr
 8100d52:	bf00      	nop
 8100d54:	e000ed00 	.word	0xe000ed00

08100d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100d58:	b480      	push	{r7}
 8100d5a:	b089      	sub	sp, #36	; 0x24
 8100d5c:	af00      	add	r7, sp, #0
 8100d5e:	6078      	str	r0, [r7, #4]
 8100d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100d62:	2300      	movs	r3, #0
 8100d64:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100d66:	4b89      	ldr	r3, [pc, #548]	; (8100f8c <HAL_GPIO_Init+0x234>)
 8100d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100d6a:	e194      	b.n	8101096 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100d6c:	683b      	ldr	r3, [r7, #0]
 8100d6e:	681a      	ldr	r2, [r3, #0]
 8100d70:	2101      	movs	r1, #1
 8100d72:	69fb      	ldr	r3, [r7, #28]
 8100d74:	fa01 f303 	lsl.w	r3, r1, r3
 8100d78:	4013      	ands	r3, r2
 8100d7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100d7c:	693b      	ldr	r3, [r7, #16]
 8100d7e:	2b00      	cmp	r3, #0
 8100d80:	f000 8186 	beq.w	8101090 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100d84:	683b      	ldr	r3, [r7, #0]
 8100d86:	685b      	ldr	r3, [r3, #4]
 8100d88:	f003 0303 	and.w	r3, r3, #3
 8100d8c:	2b01      	cmp	r3, #1
 8100d8e:	d005      	beq.n	8100d9c <HAL_GPIO_Init+0x44>
 8100d90:	683b      	ldr	r3, [r7, #0]
 8100d92:	685b      	ldr	r3, [r3, #4]
 8100d94:	f003 0303 	and.w	r3, r3, #3
 8100d98:	2b02      	cmp	r3, #2
 8100d9a:	d130      	bne.n	8100dfe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100d9c:	687b      	ldr	r3, [r7, #4]
 8100d9e:	689b      	ldr	r3, [r3, #8]
 8100da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100da2:	69fb      	ldr	r3, [r7, #28]
 8100da4:	005b      	lsls	r3, r3, #1
 8100da6:	2203      	movs	r2, #3
 8100da8:	fa02 f303 	lsl.w	r3, r2, r3
 8100dac:	43db      	mvns	r3, r3
 8100dae:	69ba      	ldr	r2, [r7, #24]
 8100db0:	4013      	ands	r3, r2
 8100db2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100db4:	683b      	ldr	r3, [r7, #0]
 8100db6:	68da      	ldr	r2, [r3, #12]
 8100db8:	69fb      	ldr	r3, [r7, #28]
 8100dba:	005b      	lsls	r3, r3, #1
 8100dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8100dc0:	69ba      	ldr	r2, [r7, #24]
 8100dc2:	4313      	orrs	r3, r2
 8100dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100dc6:	687b      	ldr	r3, [r7, #4]
 8100dc8:	69ba      	ldr	r2, [r7, #24]
 8100dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100dcc:	687b      	ldr	r3, [r7, #4]
 8100dce:	685b      	ldr	r3, [r3, #4]
 8100dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100dd2:	2201      	movs	r2, #1
 8100dd4:	69fb      	ldr	r3, [r7, #28]
 8100dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8100dda:	43db      	mvns	r3, r3
 8100ddc:	69ba      	ldr	r2, [r7, #24]
 8100dde:	4013      	ands	r3, r2
 8100de0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100de2:	683b      	ldr	r3, [r7, #0]
 8100de4:	685b      	ldr	r3, [r3, #4]
 8100de6:	091b      	lsrs	r3, r3, #4
 8100de8:	f003 0201 	and.w	r2, r3, #1
 8100dec:	69fb      	ldr	r3, [r7, #28]
 8100dee:	fa02 f303 	lsl.w	r3, r2, r3
 8100df2:	69ba      	ldr	r2, [r7, #24]
 8100df4:	4313      	orrs	r3, r2
 8100df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100df8:	687b      	ldr	r3, [r7, #4]
 8100dfa:	69ba      	ldr	r2, [r7, #24]
 8100dfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100dfe:	683b      	ldr	r3, [r7, #0]
 8100e00:	685b      	ldr	r3, [r3, #4]
 8100e02:	f003 0303 	and.w	r3, r3, #3
 8100e06:	2b03      	cmp	r3, #3
 8100e08:	d017      	beq.n	8100e3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100e0a:	687b      	ldr	r3, [r7, #4]
 8100e0c:	68db      	ldr	r3, [r3, #12]
 8100e0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100e10:	69fb      	ldr	r3, [r7, #28]
 8100e12:	005b      	lsls	r3, r3, #1
 8100e14:	2203      	movs	r2, #3
 8100e16:	fa02 f303 	lsl.w	r3, r2, r3
 8100e1a:	43db      	mvns	r3, r3
 8100e1c:	69ba      	ldr	r2, [r7, #24]
 8100e1e:	4013      	ands	r3, r2
 8100e20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100e22:	683b      	ldr	r3, [r7, #0]
 8100e24:	689a      	ldr	r2, [r3, #8]
 8100e26:	69fb      	ldr	r3, [r7, #28]
 8100e28:	005b      	lsls	r3, r3, #1
 8100e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e2e:	69ba      	ldr	r2, [r7, #24]
 8100e30:	4313      	orrs	r3, r2
 8100e32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100e34:	687b      	ldr	r3, [r7, #4]
 8100e36:	69ba      	ldr	r2, [r7, #24]
 8100e38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100e3a:	683b      	ldr	r3, [r7, #0]
 8100e3c:	685b      	ldr	r3, [r3, #4]
 8100e3e:	f003 0303 	and.w	r3, r3, #3
 8100e42:	2b02      	cmp	r3, #2
 8100e44:	d123      	bne.n	8100e8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100e46:	69fb      	ldr	r3, [r7, #28]
 8100e48:	08da      	lsrs	r2, r3, #3
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	3208      	adds	r2, #8
 8100e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100e54:	69fb      	ldr	r3, [r7, #28]
 8100e56:	f003 0307 	and.w	r3, r3, #7
 8100e5a:	009b      	lsls	r3, r3, #2
 8100e5c:	220f      	movs	r2, #15
 8100e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e62:	43db      	mvns	r3, r3
 8100e64:	69ba      	ldr	r2, [r7, #24]
 8100e66:	4013      	ands	r3, r2
 8100e68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100e6a:	683b      	ldr	r3, [r7, #0]
 8100e6c:	691a      	ldr	r2, [r3, #16]
 8100e6e:	69fb      	ldr	r3, [r7, #28]
 8100e70:	f003 0307 	and.w	r3, r3, #7
 8100e74:	009b      	lsls	r3, r3, #2
 8100e76:	fa02 f303 	lsl.w	r3, r2, r3
 8100e7a:	69ba      	ldr	r2, [r7, #24]
 8100e7c:	4313      	orrs	r3, r2
 8100e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100e80:	69fb      	ldr	r3, [r7, #28]
 8100e82:	08da      	lsrs	r2, r3, #3
 8100e84:	687b      	ldr	r3, [r7, #4]
 8100e86:	3208      	adds	r2, #8
 8100e88:	69b9      	ldr	r1, [r7, #24]
 8100e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100e8e:	687b      	ldr	r3, [r7, #4]
 8100e90:	681b      	ldr	r3, [r3, #0]
 8100e92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100e94:	69fb      	ldr	r3, [r7, #28]
 8100e96:	005b      	lsls	r3, r3, #1
 8100e98:	2203      	movs	r2, #3
 8100e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e9e:	43db      	mvns	r3, r3
 8100ea0:	69ba      	ldr	r2, [r7, #24]
 8100ea2:	4013      	ands	r3, r2
 8100ea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100ea6:	683b      	ldr	r3, [r7, #0]
 8100ea8:	685b      	ldr	r3, [r3, #4]
 8100eaa:	f003 0203 	and.w	r2, r3, #3
 8100eae:	69fb      	ldr	r3, [r7, #28]
 8100eb0:	005b      	lsls	r3, r3, #1
 8100eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8100eb6:	69ba      	ldr	r2, [r7, #24]
 8100eb8:	4313      	orrs	r3, r2
 8100eba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100ebc:	687b      	ldr	r3, [r7, #4]
 8100ebe:	69ba      	ldr	r2, [r7, #24]
 8100ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100ec2:	683b      	ldr	r3, [r7, #0]
 8100ec4:	685b      	ldr	r3, [r3, #4]
 8100ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100eca:	2b00      	cmp	r3, #0
 8100ecc:	f000 80e0 	beq.w	8101090 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100ed0:	4b2f      	ldr	r3, [pc, #188]	; (8100f90 <HAL_GPIO_Init+0x238>)
 8100ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100ed6:	4a2e      	ldr	r2, [pc, #184]	; (8100f90 <HAL_GPIO_Init+0x238>)
 8100ed8:	f043 0302 	orr.w	r3, r3, #2
 8100edc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100ee0:	4b2b      	ldr	r3, [pc, #172]	; (8100f90 <HAL_GPIO_Init+0x238>)
 8100ee2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100ee6:	f003 0302 	and.w	r3, r3, #2
 8100eea:	60fb      	str	r3, [r7, #12]
 8100eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100eee:	4a29      	ldr	r2, [pc, #164]	; (8100f94 <HAL_GPIO_Init+0x23c>)
 8100ef0:	69fb      	ldr	r3, [r7, #28]
 8100ef2:	089b      	lsrs	r3, r3, #2
 8100ef4:	3302      	adds	r3, #2
 8100ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100efc:	69fb      	ldr	r3, [r7, #28]
 8100efe:	f003 0303 	and.w	r3, r3, #3
 8100f02:	009b      	lsls	r3, r3, #2
 8100f04:	220f      	movs	r2, #15
 8100f06:	fa02 f303 	lsl.w	r3, r2, r3
 8100f0a:	43db      	mvns	r3, r3
 8100f0c:	69ba      	ldr	r2, [r7, #24]
 8100f0e:	4013      	ands	r3, r2
 8100f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100f12:	687b      	ldr	r3, [r7, #4]
 8100f14:	4a20      	ldr	r2, [pc, #128]	; (8100f98 <HAL_GPIO_Init+0x240>)
 8100f16:	4293      	cmp	r3, r2
 8100f18:	d052      	beq.n	8100fc0 <HAL_GPIO_Init+0x268>
 8100f1a:	687b      	ldr	r3, [r7, #4]
 8100f1c:	4a1f      	ldr	r2, [pc, #124]	; (8100f9c <HAL_GPIO_Init+0x244>)
 8100f1e:	4293      	cmp	r3, r2
 8100f20:	d031      	beq.n	8100f86 <HAL_GPIO_Init+0x22e>
 8100f22:	687b      	ldr	r3, [r7, #4]
 8100f24:	4a1e      	ldr	r2, [pc, #120]	; (8100fa0 <HAL_GPIO_Init+0x248>)
 8100f26:	4293      	cmp	r3, r2
 8100f28:	d02b      	beq.n	8100f82 <HAL_GPIO_Init+0x22a>
 8100f2a:	687b      	ldr	r3, [r7, #4]
 8100f2c:	4a1d      	ldr	r2, [pc, #116]	; (8100fa4 <HAL_GPIO_Init+0x24c>)
 8100f2e:	4293      	cmp	r3, r2
 8100f30:	d025      	beq.n	8100f7e <HAL_GPIO_Init+0x226>
 8100f32:	687b      	ldr	r3, [r7, #4]
 8100f34:	4a1c      	ldr	r2, [pc, #112]	; (8100fa8 <HAL_GPIO_Init+0x250>)
 8100f36:	4293      	cmp	r3, r2
 8100f38:	d01f      	beq.n	8100f7a <HAL_GPIO_Init+0x222>
 8100f3a:	687b      	ldr	r3, [r7, #4]
 8100f3c:	4a1b      	ldr	r2, [pc, #108]	; (8100fac <HAL_GPIO_Init+0x254>)
 8100f3e:	4293      	cmp	r3, r2
 8100f40:	d019      	beq.n	8100f76 <HAL_GPIO_Init+0x21e>
 8100f42:	687b      	ldr	r3, [r7, #4]
 8100f44:	4a1a      	ldr	r2, [pc, #104]	; (8100fb0 <HAL_GPIO_Init+0x258>)
 8100f46:	4293      	cmp	r3, r2
 8100f48:	d013      	beq.n	8100f72 <HAL_GPIO_Init+0x21a>
 8100f4a:	687b      	ldr	r3, [r7, #4]
 8100f4c:	4a19      	ldr	r2, [pc, #100]	; (8100fb4 <HAL_GPIO_Init+0x25c>)
 8100f4e:	4293      	cmp	r3, r2
 8100f50:	d00d      	beq.n	8100f6e <HAL_GPIO_Init+0x216>
 8100f52:	687b      	ldr	r3, [r7, #4]
 8100f54:	4a18      	ldr	r2, [pc, #96]	; (8100fb8 <HAL_GPIO_Init+0x260>)
 8100f56:	4293      	cmp	r3, r2
 8100f58:	d007      	beq.n	8100f6a <HAL_GPIO_Init+0x212>
 8100f5a:	687b      	ldr	r3, [r7, #4]
 8100f5c:	4a17      	ldr	r2, [pc, #92]	; (8100fbc <HAL_GPIO_Init+0x264>)
 8100f5e:	4293      	cmp	r3, r2
 8100f60:	d101      	bne.n	8100f66 <HAL_GPIO_Init+0x20e>
 8100f62:	2309      	movs	r3, #9
 8100f64:	e02d      	b.n	8100fc2 <HAL_GPIO_Init+0x26a>
 8100f66:	230a      	movs	r3, #10
 8100f68:	e02b      	b.n	8100fc2 <HAL_GPIO_Init+0x26a>
 8100f6a:	2308      	movs	r3, #8
 8100f6c:	e029      	b.n	8100fc2 <HAL_GPIO_Init+0x26a>
 8100f6e:	2307      	movs	r3, #7
 8100f70:	e027      	b.n	8100fc2 <HAL_GPIO_Init+0x26a>
 8100f72:	2306      	movs	r3, #6
 8100f74:	e025      	b.n	8100fc2 <HAL_GPIO_Init+0x26a>
 8100f76:	2305      	movs	r3, #5
 8100f78:	e023      	b.n	8100fc2 <HAL_GPIO_Init+0x26a>
 8100f7a:	2304      	movs	r3, #4
 8100f7c:	e021      	b.n	8100fc2 <HAL_GPIO_Init+0x26a>
 8100f7e:	2303      	movs	r3, #3
 8100f80:	e01f      	b.n	8100fc2 <HAL_GPIO_Init+0x26a>
 8100f82:	2302      	movs	r3, #2
 8100f84:	e01d      	b.n	8100fc2 <HAL_GPIO_Init+0x26a>
 8100f86:	2301      	movs	r3, #1
 8100f88:	e01b      	b.n	8100fc2 <HAL_GPIO_Init+0x26a>
 8100f8a:	bf00      	nop
 8100f8c:	580000c0 	.word	0x580000c0
 8100f90:	58024400 	.word	0x58024400
 8100f94:	58000400 	.word	0x58000400
 8100f98:	58020000 	.word	0x58020000
 8100f9c:	58020400 	.word	0x58020400
 8100fa0:	58020800 	.word	0x58020800
 8100fa4:	58020c00 	.word	0x58020c00
 8100fa8:	58021000 	.word	0x58021000
 8100fac:	58021400 	.word	0x58021400
 8100fb0:	58021800 	.word	0x58021800
 8100fb4:	58021c00 	.word	0x58021c00
 8100fb8:	58022000 	.word	0x58022000
 8100fbc:	58022400 	.word	0x58022400
 8100fc0:	2300      	movs	r3, #0
 8100fc2:	69fa      	ldr	r2, [r7, #28]
 8100fc4:	f002 0203 	and.w	r2, r2, #3
 8100fc8:	0092      	lsls	r2, r2, #2
 8100fca:	4093      	lsls	r3, r2
 8100fcc:	69ba      	ldr	r2, [r7, #24]
 8100fce:	4313      	orrs	r3, r2
 8100fd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100fd2:	4938      	ldr	r1, [pc, #224]	; (81010b4 <HAL_GPIO_Init+0x35c>)
 8100fd4:	69fb      	ldr	r3, [r7, #28]
 8100fd6:	089b      	lsrs	r3, r3, #2
 8100fd8:	3302      	adds	r3, #2
 8100fda:	69ba      	ldr	r2, [r7, #24]
 8100fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100fe4:	681b      	ldr	r3, [r3, #0]
 8100fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100fe8:	693b      	ldr	r3, [r7, #16]
 8100fea:	43db      	mvns	r3, r3
 8100fec:	69ba      	ldr	r2, [r7, #24]
 8100fee:	4013      	ands	r3, r2
 8100ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100ff2:	683b      	ldr	r3, [r7, #0]
 8100ff4:	685b      	ldr	r3, [r3, #4]
 8100ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100ffa:	2b00      	cmp	r3, #0
 8100ffc:	d003      	beq.n	8101006 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100ffe:	69ba      	ldr	r2, [r7, #24]
 8101000:	693b      	ldr	r3, [r7, #16]
 8101002:	4313      	orrs	r3, r2
 8101004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101006:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810100a:	69bb      	ldr	r3, [r7, #24]
 810100c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810100e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101012:	685b      	ldr	r3, [r3, #4]
 8101014:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101016:	693b      	ldr	r3, [r7, #16]
 8101018:	43db      	mvns	r3, r3
 810101a:	69ba      	ldr	r2, [r7, #24]
 810101c:	4013      	ands	r3, r2
 810101e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101020:	683b      	ldr	r3, [r7, #0]
 8101022:	685b      	ldr	r3, [r3, #4]
 8101024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101028:	2b00      	cmp	r3, #0
 810102a:	d003      	beq.n	8101034 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810102c:	69ba      	ldr	r2, [r7, #24]
 810102e:	693b      	ldr	r3, [r7, #16]
 8101030:	4313      	orrs	r3, r2
 8101032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101038:	69bb      	ldr	r3, [r7, #24]
 810103a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810103c:	697b      	ldr	r3, [r7, #20]
 810103e:	685b      	ldr	r3, [r3, #4]
 8101040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101042:	693b      	ldr	r3, [r7, #16]
 8101044:	43db      	mvns	r3, r3
 8101046:	69ba      	ldr	r2, [r7, #24]
 8101048:	4013      	ands	r3, r2
 810104a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810104c:	683b      	ldr	r3, [r7, #0]
 810104e:	685b      	ldr	r3, [r3, #4]
 8101050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101054:	2b00      	cmp	r3, #0
 8101056:	d003      	beq.n	8101060 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101058:	69ba      	ldr	r2, [r7, #24]
 810105a:	693b      	ldr	r3, [r7, #16]
 810105c:	4313      	orrs	r3, r2
 810105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101060:	697b      	ldr	r3, [r7, #20]
 8101062:	69ba      	ldr	r2, [r7, #24]
 8101064:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101066:	697b      	ldr	r3, [r7, #20]
 8101068:	681b      	ldr	r3, [r3, #0]
 810106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810106c:	693b      	ldr	r3, [r7, #16]
 810106e:	43db      	mvns	r3, r3
 8101070:	69ba      	ldr	r2, [r7, #24]
 8101072:	4013      	ands	r3, r2
 8101074:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101076:	683b      	ldr	r3, [r7, #0]
 8101078:	685b      	ldr	r3, [r3, #4]
 810107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810107e:	2b00      	cmp	r3, #0
 8101080:	d003      	beq.n	810108a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101082:	69ba      	ldr	r2, [r7, #24]
 8101084:	693b      	ldr	r3, [r7, #16]
 8101086:	4313      	orrs	r3, r2
 8101088:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810108a:	697b      	ldr	r3, [r7, #20]
 810108c:	69ba      	ldr	r2, [r7, #24]
 810108e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101090:	69fb      	ldr	r3, [r7, #28]
 8101092:	3301      	adds	r3, #1
 8101094:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101096:	683b      	ldr	r3, [r7, #0]
 8101098:	681a      	ldr	r2, [r3, #0]
 810109a:	69fb      	ldr	r3, [r7, #28]
 810109c:	fa22 f303 	lsr.w	r3, r2, r3
 81010a0:	2b00      	cmp	r3, #0
 81010a2:	f47f ae63 	bne.w	8100d6c <HAL_GPIO_Init+0x14>
  }
}
 81010a6:	bf00      	nop
 81010a8:	bf00      	nop
 81010aa:	3724      	adds	r7, #36	; 0x24
 81010ac:	46bd      	mov	sp, r7
 81010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010b2:	4770      	bx	lr
 81010b4:	58000400 	.word	0x58000400

081010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81010b8:	b480      	push	{r7}
 81010ba:	b083      	sub	sp, #12
 81010bc:	af00      	add	r7, sp, #0
 81010be:	6078      	str	r0, [r7, #4]
 81010c0:	460b      	mov	r3, r1
 81010c2:	807b      	strh	r3, [r7, #2]
 81010c4:	4613      	mov	r3, r2
 81010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81010c8:	787b      	ldrb	r3, [r7, #1]
 81010ca:	2b00      	cmp	r3, #0
 81010cc:	d003      	beq.n	81010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81010ce:	887a      	ldrh	r2, [r7, #2]
 81010d0:	687b      	ldr	r3, [r7, #4]
 81010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81010d4:	e003      	b.n	81010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81010d6:	887b      	ldrh	r3, [r7, #2]
 81010d8:	041a      	lsls	r2, r3, #16
 81010da:	687b      	ldr	r3, [r7, #4]
 81010dc:	619a      	str	r2, [r3, #24]
}
 81010de:	bf00      	nop
 81010e0:	370c      	adds	r7, #12
 81010e2:	46bd      	mov	sp, r7
 81010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010e8:	4770      	bx	lr

081010ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 81010ea:	b480      	push	{r7}
 81010ec:	b085      	sub	sp, #20
 81010ee:	af00      	add	r7, sp, #0
 81010f0:	6078      	str	r0, [r7, #4]
 81010f2:	460b      	mov	r3, r1
 81010f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 81010f6:	687b      	ldr	r3, [r7, #4]
 81010f8:	695b      	ldr	r3, [r3, #20]
 81010fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 81010fc:	887a      	ldrh	r2, [r7, #2]
 81010fe:	68fb      	ldr	r3, [r7, #12]
 8101100:	4013      	ands	r3, r2
 8101102:	041a      	lsls	r2, r3, #16
 8101104:	68fb      	ldr	r3, [r7, #12]
 8101106:	43d9      	mvns	r1, r3
 8101108:	887b      	ldrh	r3, [r7, #2]
 810110a:	400b      	ands	r3, r1
 810110c:	431a      	orrs	r2, r3
 810110e:	687b      	ldr	r3, [r7, #4]
 8101110:	619a      	str	r2, [r3, #24]
}
 8101112:	bf00      	nop
 8101114:	3714      	adds	r7, #20
 8101116:	46bd      	mov	sp, r7
 8101118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111c:	4770      	bx	lr
	...

08101120 <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 8101120:	b480      	push	{r7}
 8101122:	b083      	sub	sp, #12
 8101124:	af00      	add	r7, sp, #0
 8101126:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8101128:	4a07      	ldr	r2, [pc, #28]	; (8101148 <HAL_HSEM_IsSemTaken+0x28>)
 810112a:	687b      	ldr	r3, [r7, #4]
 810112c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101130:	2b00      	cmp	r3, #0
 8101132:	da01      	bge.n	8101138 <HAL_HSEM_IsSemTaken+0x18>
 8101134:	2301      	movs	r3, #1
 8101136:	e000      	b.n	810113a <HAL_HSEM_IsSemTaken+0x1a>
 8101138:	2300      	movs	r3, #0
}
 810113a:	4618      	mov	r0, r3
 810113c:	370c      	adds	r7, #12
 810113e:	46bd      	mov	sp, r7
 8101140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101144:	4770      	bx	lr
 8101146:	bf00      	nop
 8101148:	58026400 	.word	0x58026400

0810114c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810114c:	b480      	push	{r7}
 810114e:	b083      	sub	sp, #12
 8101150:	af00      	add	r7, sp, #0
 8101152:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101154:	4b05      	ldr	r3, [pc, #20]	; (810116c <HAL_HSEM_ActivateNotification+0x20>)
 8101156:	681a      	ldr	r2, [r3, #0]
 8101158:	4904      	ldr	r1, [pc, #16]	; (810116c <HAL_HSEM_ActivateNotification+0x20>)
 810115a:	687b      	ldr	r3, [r7, #4]
 810115c:	4313      	orrs	r3, r2
 810115e:	600b      	str	r3, [r1, #0]
#endif
}
 8101160:	bf00      	nop
 8101162:	370c      	adds	r7, #12
 8101164:	46bd      	mov	sp, r7
 8101166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810116a:	4770      	bx	lr
 810116c:	58026510 	.word	0x58026510

08101170 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8101170:	b580      	push	{r7, lr}
 8101172:	b082      	sub	sp, #8
 8101174:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8101176:	4b0a      	ldr	r3, [pc, #40]	; (81011a0 <HAL_HSEM_IRQHandler+0x30>)
 8101178:	68db      	ldr	r3, [r3, #12]
 810117a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 810117c:	4b08      	ldr	r3, [pc, #32]	; (81011a0 <HAL_HSEM_IRQHandler+0x30>)
 810117e:	681a      	ldr	r2, [r3, #0]
 8101180:	687b      	ldr	r3, [r7, #4]
 8101182:	43db      	mvns	r3, r3
 8101184:	4906      	ldr	r1, [pc, #24]	; (81011a0 <HAL_HSEM_IRQHandler+0x30>)
 8101186:	4013      	ands	r3, r2
 8101188:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810118a:	4a05      	ldr	r2, [pc, #20]	; (81011a0 <HAL_HSEM_IRQHandler+0x30>)
 810118c:	687b      	ldr	r3, [r7, #4]
 810118e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8101190:	6878      	ldr	r0, [r7, #4]
 8101192:	f000 f807 	bl	81011a4 <HAL_HSEM_FreeCallback>
}
 8101196:	bf00      	nop
 8101198:	3708      	adds	r7, #8
 810119a:	46bd      	mov	sp, r7
 810119c:	bd80      	pop	{r7, pc}
 810119e:	bf00      	nop
 81011a0:	58026510 	.word	0x58026510

081011a4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81011a4:	b480      	push	{r7}
 81011a6:	b083      	sub	sp, #12
 81011a8:	af00      	add	r7, sp, #0
 81011aa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 81011ac:	bf00      	nop
 81011ae:	370c      	adds	r7, #12
 81011b0:	46bd      	mov	sp, r7
 81011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011b6:	4770      	bx	lr

081011b8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81011b8:	b580      	push	{r7, lr}
 81011ba:	b084      	sub	sp, #16
 81011bc:	af00      	add	r7, sp, #0
 81011be:	60f8      	str	r0, [r7, #12]
 81011c0:	460b      	mov	r3, r1
 81011c2:	607a      	str	r2, [r7, #4]
 81011c4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81011c6:	4b37      	ldr	r3, [pc, #220]	; (81012a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011c8:	681b      	ldr	r3, [r3, #0]
 81011ca:	f023 0201 	bic.w	r2, r3, #1
 81011ce:	4935      	ldr	r1, [pc, #212]	; (81012a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011d0:	68fb      	ldr	r3, [r7, #12]
 81011d2:	4313      	orrs	r3, r2
 81011d4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81011d6:	687b      	ldr	r3, [r7, #4]
 81011d8:	2b00      	cmp	r3, #0
 81011da:	d123      	bne.n	8101224 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81011dc:	f7ff fda8 	bl	8100d30 <HAL_GetCurrentCPUID>
 81011e0:	4603      	mov	r3, r0
 81011e2:	2b03      	cmp	r3, #3
 81011e4:	d158      	bne.n	8101298 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81011e6:	4b2f      	ldr	r3, [pc, #188]	; (81012a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011e8:	691b      	ldr	r3, [r3, #16]
 81011ea:	4a2e      	ldr	r2, [pc, #184]	; (81012a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011ec:	f023 0301 	bic.w	r3, r3, #1
 81011f0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011f2:	4b2d      	ldr	r3, [pc, #180]	; (81012a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011f4:	691b      	ldr	r3, [r3, #16]
 81011f6:	4a2c      	ldr	r2, [pc, #176]	; (81012a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011f8:	f043 0304 	orr.w	r3, r3, #4
 81011fc:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81011fe:	f3bf 8f4f 	dsb	sy
}
 8101202:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101204:	f3bf 8f6f 	isb	sy
}
 8101208:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810120a:	7afb      	ldrb	r3, [r7, #11]
 810120c:	2b01      	cmp	r3, #1
 810120e:	d101      	bne.n	8101214 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101210:	bf30      	wfi
 8101212:	e000      	b.n	8101216 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101214:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101216:	4b24      	ldr	r3, [pc, #144]	; (81012a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101218:	691b      	ldr	r3, [r3, #16]
 810121a:	4a23      	ldr	r2, [pc, #140]	; (81012a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810121c:	f023 0304 	bic.w	r3, r3, #4
 8101220:	6113      	str	r3, [r2, #16]
 8101222:	e03c      	b.n	810129e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101224:	687b      	ldr	r3, [r7, #4]
 8101226:	2b01      	cmp	r3, #1
 8101228:	d123      	bne.n	8101272 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810122a:	f7ff fd81 	bl	8100d30 <HAL_GetCurrentCPUID>
 810122e:	4603      	mov	r3, r0
 8101230:	2b01      	cmp	r3, #1
 8101232:	d133      	bne.n	810129c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101234:	4b1b      	ldr	r3, [pc, #108]	; (81012a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101236:	695b      	ldr	r3, [r3, #20]
 8101238:	4a1a      	ldr	r2, [pc, #104]	; (81012a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810123a:	f023 0302 	bic.w	r3, r3, #2
 810123e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101240:	4b19      	ldr	r3, [pc, #100]	; (81012a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101242:	691b      	ldr	r3, [r3, #16]
 8101244:	4a18      	ldr	r2, [pc, #96]	; (81012a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101246:	f043 0304 	orr.w	r3, r3, #4
 810124a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810124c:	f3bf 8f4f 	dsb	sy
}
 8101250:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101252:	f3bf 8f6f 	isb	sy
}
 8101256:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101258:	7afb      	ldrb	r3, [r7, #11]
 810125a:	2b01      	cmp	r3, #1
 810125c:	d101      	bne.n	8101262 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810125e:	bf30      	wfi
 8101260:	e000      	b.n	8101264 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101262:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101264:	4b10      	ldr	r3, [pc, #64]	; (81012a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101266:	691b      	ldr	r3, [r3, #16]
 8101268:	4a0f      	ldr	r2, [pc, #60]	; (81012a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810126a:	f023 0304 	bic.w	r3, r3, #4
 810126e:	6113      	str	r3, [r2, #16]
 8101270:	e015      	b.n	810129e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101272:	f7ff fd5d 	bl	8100d30 <HAL_GetCurrentCPUID>
 8101276:	4603      	mov	r3, r0
 8101278:	2b03      	cmp	r3, #3
 810127a:	d106      	bne.n	810128a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810127c:	4b09      	ldr	r3, [pc, #36]	; (81012a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810127e:	691b      	ldr	r3, [r3, #16]
 8101280:	4a08      	ldr	r2, [pc, #32]	; (81012a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101282:	f023 0304 	bic.w	r3, r3, #4
 8101286:	6113      	str	r3, [r2, #16]
 8101288:	e009      	b.n	810129e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810128a:	4b06      	ldr	r3, [pc, #24]	; (81012a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810128c:	695b      	ldr	r3, [r3, #20]
 810128e:	4a05      	ldr	r2, [pc, #20]	; (81012a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101290:	f023 0304 	bic.w	r3, r3, #4
 8101294:	6153      	str	r3, [r2, #20]
 8101296:	e002      	b.n	810129e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101298:	bf00      	nop
 810129a:	e000      	b.n	810129e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810129c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810129e:	3710      	adds	r7, #16
 81012a0:	46bd      	mov	sp, r7
 81012a2:	bd80      	pop	{r7, pc}
 81012a4:	58024800 	.word	0x58024800
 81012a8:	e000ed00 	.word	0xe000ed00

081012ac <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81012ac:	b580      	push	{r7, lr}
 81012ae:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81012b0:	f7ff fd3e 	bl	8100d30 <HAL_GetCurrentCPUID>
 81012b4:	4603      	mov	r3, r0
 81012b6:	2b03      	cmp	r3, #3
 81012b8:	d101      	bne.n	81012be <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81012ba:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81012bc:	e001      	b.n	81012c2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81012be:	bf40      	sev
    __WFE ();
 81012c0:	bf20      	wfe
}
 81012c2:	bf00      	nop
 81012c4:	bd80      	pop	{r7, pc}
	...

081012c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81012c8:	b480      	push	{r7}
 81012ca:	b089      	sub	sp, #36	; 0x24
 81012cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81012ce:	4bb3      	ldr	r3, [pc, #716]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012d0:	691b      	ldr	r3, [r3, #16]
 81012d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81012d6:	2b18      	cmp	r3, #24
 81012d8:	f200 8155 	bhi.w	8101586 <HAL_RCC_GetSysClockFreq+0x2be>
 81012dc:	a201      	add	r2, pc, #4	; (adr r2, 81012e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81012de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81012e2:	bf00      	nop
 81012e4:	08101349 	.word	0x08101349
 81012e8:	08101587 	.word	0x08101587
 81012ec:	08101587 	.word	0x08101587
 81012f0:	08101587 	.word	0x08101587
 81012f4:	08101587 	.word	0x08101587
 81012f8:	08101587 	.word	0x08101587
 81012fc:	08101587 	.word	0x08101587
 8101300:	08101587 	.word	0x08101587
 8101304:	0810136f 	.word	0x0810136f
 8101308:	08101587 	.word	0x08101587
 810130c:	08101587 	.word	0x08101587
 8101310:	08101587 	.word	0x08101587
 8101314:	08101587 	.word	0x08101587
 8101318:	08101587 	.word	0x08101587
 810131c:	08101587 	.word	0x08101587
 8101320:	08101587 	.word	0x08101587
 8101324:	08101375 	.word	0x08101375
 8101328:	08101587 	.word	0x08101587
 810132c:	08101587 	.word	0x08101587
 8101330:	08101587 	.word	0x08101587
 8101334:	08101587 	.word	0x08101587
 8101338:	08101587 	.word	0x08101587
 810133c:	08101587 	.word	0x08101587
 8101340:	08101587 	.word	0x08101587
 8101344:	0810137b 	.word	0x0810137b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101348:	4b94      	ldr	r3, [pc, #592]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810134a:	681b      	ldr	r3, [r3, #0]
 810134c:	f003 0320 	and.w	r3, r3, #32
 8101350:	2b00      	cmp	r3, #0
 8101352:	d009      	beq.n	8101368 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101354:	4b91      	ldr	r3, [pc, #580]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101356:	681b      	ldr	r3, [r3, #0]
 8101358:	08db      	lsrs	r3, r3, #3
 810135a:	f003 0303 	and.w	r3, r3, #3
 810135e:	4a90      	ldr	r2, [pc, #576]	; (81015a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101360:	fa22 f303 	lsr.w	r3, r2, r3
 8101364:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8101366:	e111      	b.n	810158c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101368:	4b8d      	ldr	r3, [pc, #564]	; (81015a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810136a:	61bb      	str	r3, [r7, #24]
    break;
 810136c:	e10e      	b.n	810158c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810136e:	4b8d      	ldr	r3, [pc, #564]	; (81015a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101370:	61bb      	str	r3, [r7, #24]
    break;
 8101372:	e10b      	b.n	810158c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101374:	4b8c      	ldr	r3, [pc, #560]	; (81015a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101376:	61bb      	str	r3, [r7, #24]
    break;
 8101378:	e108      	b.n	810158c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810137a:	4b88      	ldr	r3, [pc, #544]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810137e:	f003 0303 	and.w	r3, r3, #3
 8101382:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101384:	4b85      	ldr	r3, [pc, #532]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101388:	091b      	lsrs	r3, r3, #4
 810138a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810138e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101390:	4b82      	ldr	r3, [pc, #520]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101394:	f003 0301 	and.w	r3, r3, #1
 8101398:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810139a:	4b80      	ldr	r3, [pc, #512]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810139c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810139e:	08db      	lsrs	r3, r3, #3
 81013a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81013a4:	68fa      	ldr	r2, [r7, #12]
 81013a6:	fb02 f303 	mul.w	r3, r2, r3
 81013aa:	ee07 3a90 	vmov	s15, r3
 81013ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81013b6:	693b      	ldr	r3, [r7, #16]
 81013b8:	2b00      	cmp	r3, #0
 81013ba:	f000 80e1 	beq.w	8101580 <HAL_RCC_GetSysClockFreq+0x2b8>
 81013be:	697b      	ldr	r3, [r7, #20]
 81013c0:	2b02      	cmp	r3, #2
 81013c2:	f000 8083 	beq.w	81014cc <HAL_RCC_GetSysClockFreq+0x204>
 81013c6:	697b      	ldr	r3, [r7, #20]
 81013c8:	2b02      	cmp	r3, #2
 81013ca:	f200 80a1 	bhi.w	8101510 <HAL_RCC_GetSysClockFreq+0x248>
 81013ce:	697b      	ldr	r3, [r7, #20]
 81013d0:	2b00      	cmp	r3, #0
 81013d2:	d003      	beq.n	81013dc <HAL_RCC_GetSysClockFreq+0x114>
 81013d4:	697b      	ldr	r3, [r7, #20]
 81013d6:	2b01      	cmp	r3, #1
 81013d8:	d056      	beq.n	8101488 <HAL_RCC_GetSysClockFreq+0x1c0>
 81013da:	e099      	b.n	8101510 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81013dc:	4b6f      	ldr	r3, [pc, #444]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013de:	681b      	ldr	r3, [r3, #0]
 81013e0:	f003 0320 	and.w	r3, r3, #32
 81013e4:	2b00      	cmp	r3, #0
 81013e6:	d02d      	beq.n	8101444 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81013e8:	4b6c      	ldr	r3, [pc, #432]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013ea:	681b      	ldr	r3, [r3, #0]
 81013ec:	08db      	lsrs	r3, r3, #3
 81013ee:	f003 0303 	and.w	r3, r3, #3
 81013f2:	4a6b      	ldr	r2, [pc, #428]	; (81015a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81013f4:	fa22 f303 	lsr.w	r3, r2, r3
 81013f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81013fa:	687b      	ldr	r3, [r7, #4]
 81013fc:	ee07 3a90 	vmov	s15, r3
 8101400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101404:	693b      	ldr	r3, [r7, #16]
 8101406:	ee07 3a90 	vmov	s15, r3
 810140a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810140e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101412:	4b62      	ldr	r3, [pc, #392]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810141a:	ee07 3a90 	vmov	s15, r3
 810141e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101422:	ed97 6a02 	vldr	s12, [r7, #8]
 8101426:	eddf 5a61 	vldr	s11, [pc, #388]	; 81015ac <HAL_RCC_GetSysClockFreq+0x2e4>
 810142a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810142e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810143e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101442:	e087      	b.n	8101554 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101444:	693b      	ldr	r3, [r7, #16]
 8101446:	ee07 3a90 	vmov	s15, r3
 810144a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810144e:	eddf 6a58 	vldr	s13, [pc, #352]	; 81015b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101456:	4b51      	ldr	r3, [pc, #324]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810145a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810145e:	ee07 3a90 	vmov	s15, r3
 8101462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101466:	ed97 6a02 	vldr	s12, [r7, #8]
 810146a:	eddf 5a50 	vldr	s11, [pc, #320]	; 81015ac <HAL_RCC_GetSysClockFreq+0x2e4>
 810146e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810147a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810147e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101486:	e065      	b.n	8101554 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101488:	693b      	ldr	r3, [r7, #16]
 810148a:	ee07 3a90 	vmov	s15, r3
 810148e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101492:	eddf 6a48 	vldr	s13, [pc, #288]	; 81015b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810149a:	4b40      	ldr	r3, [pc, #256]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810149e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014a2:	ee07 3a90 	vmov	s15, r3
 81014a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81014ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81015ac <HAL_RCC_GetSysClockFreq+0x2e4>
 81014b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81014ca:	e043      	b.n	8101554 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81014cc:	693b      	ldr	r3, [r7, #16]
 81014ce:	ee07 3a90 	vmov	s15, r3
 81014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 81015b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 81014da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014de:	4b2f      	ldr	r3, [pc, #188]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014e6:	ee07 3a90 	vmov	s15, r3
 81014ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81014f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81015ac <HAL_RCC_GetSysClockFreq+0x2e4>
 81014f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101506:	ee67 7a27 	vmul.f32	s15, s14, s15
 810150a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810150e:	e021      	b.n	8101554 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101510:	693b      	ldr	r3, [r7, #16]
 8101512:	ee07 3a90 	vmov	s15, r3
 8101516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810151a:	eddf 6a26 	vldr	s13, [pc, #152]	; 81015b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810151e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101522:	4b1e      	ldr	r3, [pc, #120]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810152a:	ee07 3a90 	vmov	s15, r3
 810152e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101532:	ed97 6a02 	vldr	s12, [r7, #8]
 8101536:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81015ac <HAL_RCC_GetSysClockFreq+0x2e4>
 810153a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810153e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810154a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810154e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101552:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101554:	4b11      	ldr	r3, [pc, #68]	; (810159c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101558:	0a5b      	lsrs	r3, r3, #9
 810155a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810155e:	3301      	adds	r3, #1
 8101560:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101562:	683b      	ldr	r3, [r7, #0]
 8101564:	ee07 3a90 	vmov	s15, r3
 8101568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810156c:	edd7 6a07 	vldr	s13, [r7, #28]
 8101570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101578:	ee17 3a90 	vmov	r3, s15
 810157c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810157e:	e005      	b.n	810158c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101580:	2300      	movs	r3, #0
 8101582:	61bb      	str	r3, [r7, #24]
    break;
 8101584:	e002      	b.n	810158c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8101586:	4b07      	ldr	r3, [pc, #28]	; (81015a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101588:	61bb      	str	r3, [r7, #24]
    break;
 810158a:	bf00      	nop
  }

  return sysclockfreq;
 810158c:	69bb      	ldr	r3, [r7, #24]
}
 810158e:	4618      	mov	r0, r3
 8101590:	3724      	adds	r7, #36	; 0x24
 8101592:	46bd      	mov	sp, r7
 8101594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101598:	4770      	bx	lr
 810159a:	bf00      	nop
 810159c:	58024400 	.word	0x58024400
 81015a0:	03d09000 	.word	0x03d09000
 81015a4:	003d0900 	.word	0x003d0900
 81015a8:	017d7840 	.word	0x017d7840
 81015ac:	46000000 	.word	0x46000000
 81015b0:	4c742400 	.word	0x4c742400
 81015b4:	4a742400 	.word	0x4a742400
 81015b8:	4bbebc20 	.word	0x4bbebc20

081015bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81015bc:	b580      	push	{r7, lr}
 81015be:	b082      	sub	sp, #8
 81015c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81015c2:	f7ff fe81 	bl	81012c8 <HAL_RCC_GetSysClockFreq>
 81015c6:	4602      	mov	r2, r0
 81015c8:	4b11      	ldr	r3, [pc, #68]	; (8101610 <HAL_RCC_GetHCLKFreq+0x54>)
 81015ca:	699b      	ldr	r3, [r3, #24]
 81015cc:	0a1b      	lsrs	r3, r3, #8
 81015ce:	f003 030f 	and.w	r3, r3, #15
 81015d2:	4910      	ldr	r1, [pc, #64]	; (8101614 <HAL_RCC_GetHCLKFreq+0x58>)
 81015d4:	5ccb      	ldrb	r3, [r1, r3]
 81015d6:	f003 031f 	and.w	r3, r3, #31
 81015da:	fa22 f303 	lsr.w	r3, r2, r3
 81015de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81015e0:	4b0b      	ldr	r3, [pc, #44]	; (8101610 <HAL_RCC_GetHCLKFreq+0x54>)
 81015e2:	699b      	ldr	r3, [r3, #24]
 81015e4:	f003 030f 	and.w	r3, r3, #15
 81015e8:	4a0a      	ldr	r2, [pc, #40]	; (8101614 <HAL_RCC_GetHCLKFreq+0x58>)
 81015ea:	5cd3      	ldrb	r3, [r2, r3]
 81015ec:	f003 031f 	and.w	r3, r3, #31
 81015f0:	687a      	ldr	r2, [r7, #4]
 81015f2:	fa22 f303 	lsr.w	r3, r2, r3
 81015f6:	4a08      	ldr	r2, [pc, #32]	; (8101618 <HAL_RCC_GetHCLKFreq+0x5c>)
 81015f8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81015fa:	4b07      	ldr	r3, [pc, #28]	; (8101618 <HAL_RCC_GetHCLKFreq+0x5c>)
 81015fc:	681b      	ldr	r3, [r3, #0]
 81015fe:	4a07      	ldr	r2, [pc, #28]	; (810161c <HAL_RCC_GetHCLKFreq+0x60>)
 8101600:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101602:	4b05      	ldr	r3, [pc, #20]	; (8101618 <HAL_RCC_GetHCLKFreq+0x5c>)
 8101604:	681b      	ldr	r3, [r3, #0]
}
 8101606:	4618      	mov	r0, r3
 8101608:	3708      	adds	r7, #8
 810160a:	46bd      	mov	sp, r7
 810160c:	bd80      	pop	{r7, pc}
 810160e:	bf00      	nop
 8101610:	58024400 	.word	0x58024400
 8101614:	08103fa8 	.word	0x08103fa8
 8101618:	10000004 	.word	0x10000004
 810161c:	10000000 	.word	0x10000000

08101620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101620:	b580      	push	{r7, lr}
 8101622:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101624:	f7ff ffca 	bl	81015bc <HAL_RCC_GetHCLKFreq>
 8101628:	4602      	mov	r2, r0
 810162a:	4b06      	ldr	r3, [pc, #24]	; (8101644 <HAL_RCC_GetPCLK1Freq+0x24>)
 810162c:	69db      	ldr	r3, [r3, #28]
 810162e:	091b      	lsrs	r3, r3, #4
 8101630:	f003 0307 	and.w	r3, r3, #7
 8101634:	4904      	ldr	r1, [pc, #16]	; (8101648 <HAL_RCC_GetPCLK1Freq+0x28>)
 8101636:	5ccb      	ldrb	r3, [r1, r3]
 8101638:	f003 031f 	and.w	r3, r3, #31
 810163c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101640:	4618      	mov	r0, r3
 8101642:	bd80      	pop	{r7, pc}
 8101644:	58024400 	.word	0x58024400
 8101648:	08103fa8 	.word	0x08103fa8

0810164c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810164c:	b580      	push	{r7, lr}
 810164e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101650:	f7ff ffb4 	bl	81015bc <HAL_RCC_GetHCLKFreq>
 8101654:	4602      	mov	r2, r0
 8101656:	4b06      	ldr	r3, [pc, #24]	; (8101670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8101658:	69db      	ldr	r3, [r3, #28]
 810165a:	0a1b      	lsrs	r3, r3, #8
 810165c:	f003 0307 	and.w	r3, r3, #7
 8101660:	4904      	ldr	r1, [pc, #16]	; (8101674 <HAL_RCC_GetPCLK2Freq+0x28>)
 8101662:	5ccb      	ldrb	r3, [r1, r3]
 8101664:	f003 031f 	and.w	r3, r3, #31
 8101668:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810166c:	4618      	mov	r0, r3
 810166e:	bd80      	pop	{r7, pc}
 8101670:	58024400 	.word	0x58024400
 8101674:	08103fa8 	.word	0x08103fa8

08101678 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101678:	b580      	push	{r7, lr}
 810167a:	b086      	sub	sp, #24
 810167c:	af00      	add	r7, sp, #0
 810167e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101680:	2300      	movs	r3, #0
 8101682:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101684:	2300      	movs	r3, #0
 8101686:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101688:	687b      	ldr	r3, [r7, #4]
 810168a:	681b      	ldr	r3, [r3, #0]
 810168c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101690:	2b00      	cmp	r3, #0
 8101692:	d03f      	beq.n	8101714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8101694:	687b      	ldr	r3, [r7, #4]
 8101696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101698:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810169c:	d02a      	beq.n	81016f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810169e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81016a2:	d824      	bhi.n	81016ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 81016a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81016a8:	d018      	beq.n	81016dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 81016aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81016ae:	d81e      	bhi.n	81016ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 81016b0:	2b00      	cmp	r3, #0
 81016b2:	d003      	beq.n	81016bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 81016b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81016b8:	d007      	beq.n	81016ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 81016ba:	e018      	b.n	81016ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81016bc:	4bab      	ldr	r3, [pc, #684]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81016c0:	4aaa      	ldr	r2, [pc, #680]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81016c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81016c8:	e015      	b.n	81016f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81016ca:	687b      	ldr	r3, [r7, #4]
 81016cc:	3304      	adds	r3, #4
 81016ce:	2102      	movs	r1, #2
 81016d0:	4618      	mov	r0, r3
 81016d2:	f001 f9cf 	bl	8102a74 <RCCEx_PLL2_Config>
 81016d6:	4603      	mov	r3, r0
 81016d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81016da:	e00c      	b.n	81016f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81016dc:	687b      	ldr	r3, [r7, #4]
 81016de:	3324      	adds	r3, #36	; 0x24
 81016e0:	2102      	movs	r1, #2
 81016e2:	4618      	mov	r0, r3
 81016e4:	f001 fa78 	bl	8102bd8 <RCCEx_PLL3_Config>
 81016e8:	4603      	mov	r3, r0
 81016ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81016ec:	e003      	b.n	81016f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81016ee:	2301      	movs	r3, #1
 81016f0:	75fb      	strb	r3, [r7, #23]
      break;
 81016f2:	e000      	b.n	81016f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81016f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81016f6:	7dfb      	ldrb	r3, [r7, #23]
 81016f8:	2b00      	cmp	r3, #0
 81016fa:	d109      	bne.n	8101710 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81016fc:	4b9b      	ldr	r3, [pc, #620]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8101704:	687b      	ldr	r3, [r7, #4]
 8101706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101708:	4998      	ldr	r1, [pc, #608]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810170a:	4313      	orrs	r3, r2
 810170c:	650b      	str	r3, [r1, #80]	; 0x50
 810170e:	e001      	b.n	8101714 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101710:	7dfb      	ldrb	r3, [r7, #23]
 8101712:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101714:	687b      	ldr	r3, [r7, #4]
 8101716:	681b      	ldr	r3, [r3, #0]
 8101718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810171c:	2b00      	cmp	r3, #0
 810171e:	d03d      	beq.n	810179c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101724:	2b04      	cmp	r3, #4
 8101726:	d826      	bhi.n	8101776 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8101728:	a201      	add	r2, pc, #4	; (adr r2, 8101730 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810172e:	bf00      	nop
 8101730:	08101745 	.word	0x08101745
 8101734:	08101753 	.word	0x08101753
 8101738:	08101765 	.word	0x08101765
 810173c:	0810177d 	.word	0x0810177d
 8101740:	0810177d 	.word	0x0810177d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101744:	4b89      	ldr	r3, [pc, #548]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101748:	4a88      	ldr	r2, [pc, #544]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810174a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810174e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101750:	e015      	b.n	810177e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101752:	687b      	ldr	r3, [r7, #4]
 8101754:	3304      	adds	r3, #4
 8101756:	2100      	movs	r1, #0
 8101758:	4618      	mov	r0, r3
 810175a:	f001 f98b 	bl	8102a74 <RCCEx_PLL2_Config>
 810175e:	4603      	mov	r3, r0
 8101760:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101762:	e00c      	b.n	810177e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101764:	687b      	ldr	r3, [r7, #4]
 8101766:	3324      	adds	r3, #36	; 0x24
 8101768:	2100      	movs	r1, #0
 810176a:	4618      	mov	r0, r3
 810176c:	f001 fa34 	bl	8102bd8 <RCCEx_PLL3_Config>
 8101770:	4603      	mov	r3, r0
 8101772:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101774:	e003      	b.n	810177e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101776:	2301      	movs	r3, #1
 8101778:	75fb      	strb	r3, [r7, #23]
      break;
 810177a:	e000      	b.n	810177e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 810177c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810177e:	7dfb      	ldrb	r3, [r7, #23]
 8101780:	2b00      	cmp	r3, #0
 8101782:	d109      	bne.n	8101798 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101784:	4b79      	ldr	r3, [pc, #484]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101788:	f023 0207 	bic.w	r2, r3, #7
 810178c:	687b      	ldr	r3, [r7, #4]
 810178e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101790:	4976      	ldr	r1, [pc, #472]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101792:	4313      	orrs	r3, r2
 8101794:	650b      	str	r3, [r1, #80]	; 0x50
 8101796:	e001      	b.n	810179c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101798:	7dfb      	ldrb	r3, [r7, #23]
 810179a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810179c:	687b      	ldr	r3, [r7, #4]
 810179e:	681b      	ldr	r3, [r3, #0]
 81017a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81017a4:	2b00      	cmp	r3, #0
 81017a6:	d042      	beq.n	810182e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81017a8:	687b      	ldr	r3, [r7, #4]
 81017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81017ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81017b0:	d02b      	beq.n	810180a <HAL_RCCEx_PeriphCLKConfig+0x192>
 81017b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81017b6:	d825      	bhi.n	8101804 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81017b8:	2bc0      	cmp	r3, #192	; 0xc0
 81017ba:	d028      	beq.n	810180e <HAL_RCCEx_PeriphCLKConfig+0x196>
 81017bc:	2bc0      	cmp	r3, #192	; 0xc0
 81017be:	d821      	bhi.n	8101804 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81017c0:	2b80      	cmp	r3, #128	; 0x80
 81017c2:	d016      	beq.n	81017f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81017c4:	2b80      	cmp	r3, #128	; 0x80
 81017c6:	d81d      	bhi.n	8101804 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81017c8:	2b00      	cmp	r3, #0
 81017ca:	d002      	beq.n	81017d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81017cc:	2b40      	cmp	r3, #64	; 0x40
 81017ce:	d007      	beq.n	81017e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81017d0:	e018      	b.n	8101804 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81017d2:	4b66      	ldr	r3, [pc, #408]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017d6:	4a65      	ldr	r2, [pc, #404]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81017dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81017de:	e017      	b.n	8101810 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81017e0:	687b      	ldr	r3, [r7, #4]
 81017e2:	3304      	adds	r3, #4
 81017e4:	2100      	movs	r1, #0
 81017e6:	4618      	mov	r0, r3
 81017e8:	f001 f944 	bl	8102a74 <RCCEx_PLL2_Config>
 81017ec:	4603      	mov	r3, r0
 81017ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81017f0:	e00e      	b.n	8101810 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81017f2:	687b      	ldr	r3, [r7, #4]
 81017f4:	3324      	adds	r3, #36	; 0x24
 81017f6:	2100      	movs	r1, #0
 81017f8:	4618      	mov	r0, r3
 81017fa:	f001 f9ed 	bl	8102bd8 <RCCEx_PLL3_Config>
 81017fe:	4603      	mov	r3, r0
 8101800:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101802:	e005      	b.n	8101810 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101804:	2301      	movs	r3, #1
 8101806:	75fb      	strb	r3, [r7, #23]
      break;
 8101808:	e002      	b.n	8101810 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810180a:	bf00      	nop
 810180c:	e000      	b.n	8101810 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810180e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101810:	7dfb      	ldrb	r3, [r7, #23]
 8101812:	2b00      	cmp	r3, #0
 8101814:	d109      	bne.n	810182a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101816:	4b55      	ldr	r3, [pc, #340]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810181a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810181e:	687b      	ldr	r3, [r7, #4]
 8101820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101822:	4952      	ldr	r1, [pc, #328]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101824:	4313      	orrs	r3, r2
 8101826:	650b      	str	r3, [r1, #80]	; 0x50
 8101828:	e001      	b.n	810182e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810182a:	7dfb      	ldrb	r3, [r7, #23]
 810182c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810182e:	687b      	ldr	r3, [r7, #4]
 8101830:	681b      	ldr	r3, [r3, #0]
 8101832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101836:	2b00      	cmp	r3, #0
 8101838:	d049      	beq.n	81018ce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810183a:	687b      	ldr	r3, [r7, #4]
 810183c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101840:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101844:	d030      	beq.n	81018a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8101846:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810184a:	d82a      	bhi.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810184c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101850:	d02c      	beq.n	81018ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8101852:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101856:	d824      	bhi.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810185c:	d018      	beq.n	8101890 <HAL_RCCEx_PeriphCLKConfig+0x218>
 810185e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101862:	d81e      	bhi.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101864:	2b00      	cmp	r3, #0
 8101866:	d003      	beq.n	8101870 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8101868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810186c:	d007      	beq.n	810187e <HAL_RCCEx_PeriphCLKConfig+0x206>
 810186e:	e018      	b.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101870:	4b3e      	ldr	r3, [pc, #248]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101874:	4a3d      	ldr	r2, [pc, #244]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810187a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810187c:	e017      	b.n	81018ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810187e:	687b      	ldr	r3, [r7, #4]
 8101880:	3304      	adds	r3, #4
 8101882:	2100      	movs	r1, #0
 8101884:	4618      	mov	r0, r3
 8101886:	f001 f8f5 	bl	8102a74 <RCCEx_PLL2_Config>
 810188a:	4603      	mov	r3, r0
 810188c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810188e:	e00e      	b.n	81018ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101890:	687b      	ldr	r3, [r7, #4]
 8101892:	3324      	adds	r3, #36	; 0x24
 8101894:	2100      	movs	r1, #0
 8101896:	4618      	mov	r0, r3
 8101898:	f001 f99e 	bl	8102bd8 <RCCEx_PLL3_Config>
 810189c:	4603      	mov	r3, r0
 810189e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81018a0:	e005      	b.n	81018ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81018a2:	2301      	movs	r3, #1
 81018a4:	75fb      	strb	r3, [r7, #23]
      break;
 81018a6:	e002      	b.n	81018ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81018a8:	bf00      	nop
 81018aa:	e000      	b.n	81018ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81018ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 81018ae:	7dfb      	ldrb	r3, [r7, #23]
 81018b0:	2b00      	cmp	r3, #0
 81018b2:	d10a      	bne.n	81018ca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81018b4:	4b2d      	ldr	r3, [pc, #180]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81018b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81018bc:	687b      	ldr	r3, [r7, #4]
 81018be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81018c2:	492a      	ldr	r1, [pc, #168]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81018c4:	4313      	orrs	r3, r2
 81018c6:	658b      	str	r3, [r1, #88]	; 0x58
 81018c8:	e001      	b.n	81018ce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81018ca:	7dfb      	ldrb	r3, [r7, #23]
 81018cc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81018ce:	687b      	ldr	r3, [r7, #4]
 81018d0:	681b      	ldr	r3, [r3, #0]
 81018d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81018d6:	2b00      	cmp	r3, #0
 81018d8:	d04c      	beq.n	8101974 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81018da:	687b      	ldr	r3, [r7, #4]
 81018dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81018e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81018e4:	d030      	beq.n	8101948 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81018e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81018ea:	d82a      	bhi.n	8101942 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81018ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81018f0:	d02c      	beq.n	810194c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 81018f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81018f6:	d824      	bhi.n	8101942 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81018f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81018fc:	d018      	beq.n	8101930 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81018fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101902:	d81e      	bhi.n	8101942 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101904:	2b00      	cmp	r3, #0
 8101906:	d003      	beq.n	8101910 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8101908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810190c:	d007      	beq.n	810191e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810190e:	e018      	b.n	8101942 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101910:	4b16      	ldr	r3, [pc, #88]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101914:	4a15      	ldr	r2, [pc, #84]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810191a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810191c:	e017      	b.n	810194e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	3304      	adds	r3, #4
 8101922:	2100      	movs	r1, #0
 8101924:	4618      	mov	r0, r3
 8101926:	f001 f8a5 	bl	8102a74 <RCCEx_PLL2_Config>
 810192a:	4603      	mov	r3, r0
 810192c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810192e:	e00e      	b.n	810194e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	3324      	adds	r3, #36	; 0x24
 8101934:	2100      	movs	r1, #0
 8101936:	4618      	mov	r0, r3
 8101938:	f001 f94e 	bl	8102bd8 <RCCEx_PLL3_Config>
 810193c:	4603      	mov	r3, r0
 810193e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101940:	e005      	b.n	810194e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101942:	2301      	movs	r3, #1
 8101944:	75fb      	strb	r3, [r7, #23]
      break;
 8101946:	e002      	b.n	810194e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8101948:	bf00      	nop
 810194a:	e000      	b.n	810194e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810194c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810194e:	7dfb      	ldrb	r3, [r7, #23]
 8101950:	2b00      	cmp	r3, #0
 8101952:	d10d      	bne.n	8101970 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101954:	4b05      	ldr	r3, [pc, #20]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101958:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 810195c:	687b      	ldr	r3, [r7, #4]
 810195e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101962:	4902      	ldr	r1, [pc, #8]	; (810196c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101964:	4313      	orrs	r3, r2
 8101966:	658b      	str	r3, [r1, #88]	; 0x58
 8101968:	e004      	b.n	8101974 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810196a:	bf00      	nop
 810196c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101970:	7dfb      	ldrb	r3, [r7, #23]
 8101972:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101974:	687b      	ldr	r3, [r7, #4]
 8101976:	681b      	ldr	r3, [r3, #0]
 8101978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810197c:	2b00      	cmp	r3, #0
 810197e:	d032      	beq.n	81019e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8101980:	687b      	ldr	r3, [r7, #4]
 8101982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101984:	2b30      	cmp	r3, #48	; 0x30
 8101986:	d01c      	beq.n	81019c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101988:	2b30      	cmp	r3, #48	; 0x30
 810198a:	d817      	bhi.n	81019bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 810198c:	2b20      	cmp	r3, #32
 810198e:	d00c      	beq.n	81019aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8101990:	2b20      	cmp	r3, #32
 8101992:	d813      	bhi.n	81019bc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8101994:	2b00      	cmp	r3, #0
 8101996:	d016      	beq.n	81019c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8101998:	2b10      	cmp	r3, #16
 810199a:	d10f      	bne.n	81019bc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810199c:	4baf      	ldr	r3, [pc, #700]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81019a0:	4aae      	ldr	r2, [pc, #696]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81019a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81019a8:	e00e      	b.n	81019c8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	3304      	adds	r3, #4
 81019ae:	2102      	movs	r1, #2
 81019b0:	4618      	mov	r0, r3
 81019b2:	f001 f85f 	bl	8102a74 <RCCEx_PLL2_Config>
 81019b6:	4603      	mov	r3, r0
 81019b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81019ba:	e005      	b.n	81019c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81019bc:	2301      	movs	r3, #1
 81019be:	75fb      	strb	r3, [r7, #23]
      break;
 81019c0:	e002      	b.n	81019c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81019c2:	bf00      	nop
 81019c4:	e000      	b.n	81019c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81019c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81019c8:	7dfb      	ldrb	r3, [r7, #23]
 81019ca:	2b00      	cmp	r3, #0
 81019cc:	d109      	bne.n	81019e2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81019ce:	4ba3      	ldr	r3, [pc, #652]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81019d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81019d6:	687b      	ldr	r3, [r7, #4]
 81019d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81019da:	49a0      	ldr	r1, [pc, #640]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019dc:	4313      	orrs	r3, r2
 81019de:	64cb      	str	r3, [r1, #76]	; 0x4c
 81019e0:	e001      	b.n	81019e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81019e2:	7dfb      	ldrb	r3, [r7, #23]
 81019e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81019e6:	687b      	ldr	r3, [r7, #4]
 81019e8:	681b      	ldr	r3, [r3, #0]
 81019ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81019ee:	2b00      	cmp	r3, #0
 81019f0:	d047      	beq.n	8101a82 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81019f2:	687b      	ldr	r3, [r7, #4]
 81019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81019f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81019fa:	d030      	beq.n	8101a5e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81019fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101a00:	d82a      	bhi.n	8101a58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8101a02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101a06:	d02c      	beq.n	8101a62 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8101a08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8101a0c:	d824      	bhi.n	8101a58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8101a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101a12:	d018      	beq.n	8101a46 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8101a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101a18:	d81e      	bhi.n	8101a58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8101a1a:	2b00      	cmp	r3, #0
 8101a1c:	d003      	beq.n	8101a26 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8101a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101a22:	d007      	beq.n	8101a34 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8101a24:	e018      	b.n	8101a58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101a26:	4b8d      	ldr	r3, [pc, #564]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101a2a:	4a8c      	ldr	r2, [pc, #560]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a30:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101a32:	e017      	b.n	8101a64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101a34:	687b      	ldr	r3, [r7, #4]
 8101a36:	3304      	adds	r3, #4
 8101a38:	2100      	movs	r1, #0
 8101a3a:	4618      	mov	r0, r3
 8101a3c:	f001 f81a 	bl	8102a74 <RCCEx_PLL2_Config>
 8101a40:	4603      	mov	r3, r0
 8101a42:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101a44:	e00e      	b.n	8101a64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101a46:	687b      	ldr	r3, [r7, #4]
 8101a48:	3324      	adds	r3, #36	; 0x24
 8101a4a:	2100      	movs	r1, #0
 8101a4c:	4618      	mov	r0, r3
 8101a4e:	f001 f8c3 	bl	8102bd8 <RCCEx_PLL3_Config>
 8101a52:	4603      	mov	r3, r0
 8101a54:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101a56:	e005      	b.n	8101a64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101a58:	2301      	movs	r3, #1
 8101a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8101a5c:	e002      	b.n	8101a64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8101a5e:	bf00      	nop
 8101a60:	e000      	b.n	8101a64 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8101a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101a64:	7dfb      	ldrb	r3, [r7, #23]
 8101a66:	2b00      	cmp	r3, #0
 8101a68:	d109      	bne.n	8101a7e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101a6a:	4b7c      	ldr	r3, [pc, #496]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101a6e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8101a72:	687b      	ldr	r3, [r7, #4]
 8101a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101a76:	4979      	ldr	r1, [pc, #484]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a78:	4313      	orrs	r3, r2
 8101a7a:	650b      	str	r3, [r1, #80]	; 0x50
 8101a7c:	e001      	b.n	8101a82 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a7e:	7dfb      	ldrb	r3, [r7, #23]
 8101a80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101a82:	687b      	ldr	r3, [r7, #4]
 8101a84:	681b      	ldr	r3, [r3, #0]
 8101a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101a8a:	2b00      	cmp	r3, #0
 8101a8c:	d049      	beq.n	8101b22 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8101a8e:	687b      	ldr	r3, [r7, #4]
 8101a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101a96:	d02e      	beq.n	8101af6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8101a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101a9c:	d828      	bhi.n	8101af0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101a9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101aa2:	d02a      	beq.n	8101afa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8101aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101aa8:	d822      	bhi.n	8101af0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101aaa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101aae:	d026      	beq.n	8101afe <HAL_RCCEx_PeriphCLKConfig+0x486>
 8101ab0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101ab4:	d81c      	bhi.n	8101af0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101aba:	d010      	beq.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x466>
 8101abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101ac0:	d816      	bhi.n	8101af0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101ac2:	2b00      	cmp	r3, #0
 8101ac4:	d01d      	beq.n	8101b02 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8101ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101aca:	d111      	bne.n	8101af0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101acc:	687b      	ldr	r3, [r7, #4]
 8101ace:	3304      	adds	r3, #4
 8101ad0:	2101      	movs	r1, #1
 8101ad2:	4618      	mov	r0, r3
 8101ad4:	f000 ffce 	bl	8102a74 <RCCEx_PLL2_Config>
 8101ad8:	4603      	mov	r3, r0
 8101ada:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101adc:	e012      	b.n	8101b04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	3324      	adds	r3, #36	; 0x24
 8101ae2:	2101      	movs	r1, #1
 8101ae4:	4618      	mov	r0, r3
 8101ae6:	f001 f877 	bl	8102bd8 <RCCEx_PLL3_Config>
 8101aea:	4603      	mov	r3, r0
 8101aec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101aee:	e009      	b.n	8101b04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101af0:	2301      	movs	r3, #1
 8101af2:	75fb      	strb	r3, [r7, #23]
      break;
 8101af4:	e006      	b.n	8101b04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101af6:	bf00      	nop
 8101af8:	e004      	b.n	8101b04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101afa:	bf00      	nop
 8101afc:	e002      	b.n	8101b04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101afe:	bf00      	nop
 8101b00:	e000      	b.n	8101b04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101b04:	7dfb      	ldrb	r3, [r7, #23]
 8101b06:	2b00      	cmp	r3, #0
 8101b08:	d109      	bne.n	8101b1e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101b0a:	4b54      	ldr	r3, [pc, #336]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101b0e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8101b12:	687b      	ldr	r3, [r7, #4]
 8101b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101b16:	4951      	ldr	r1, [pc, #324]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101b18:	4313      	orrs	r3, r2
 8101b1a:	650b      	str	r3, [r1, #80]	; 0x50
 8101b1c:	e001      	b.n	8101b22 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b1e:	7dfb      	ldrb	r3, [r7, #23]
 8101b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101b22:	687b      	ldr	r3, [r7, #4]
 8101b24:	681b      	ldr	r3, [r3, #0]
 8101b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101b2a:	2b00      	cmp	r3, #0
 8101b2c:	d04b      	beq.n	8101bc6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8101b2e:	687b      	ldr	r3, [r7, #4]
 8101b30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101b38:	d02e      	beq.n	8101b98 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8101b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101b3e:	d828      	bhi.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b44:	d02a      	beq.n	8101b9c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8101b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b4a:	d822      	bhi.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101b50:	d026      	beq.n	8101ba0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8101b52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101b56:	d81c      	bhi.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101b5c:	d010      	beq.n	8101b80 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8101b5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101b62:	d816      	bhi.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b64:	2b00      	cmp	r3, #0
 8101b66:	d01d      	beq.n	8101ba4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8101b68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101b6c:	d111      	bne.n	8101b92 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101b6e:	687b      	ldr	r3, [r7, #4]
 8101b70:	3304      	adds	r3, #4
 8101b72:	2101      	movs	r1, #1
 8101b74:	4618      	mov	r0, r3
 8101b76:	f000 ff7d 	bl	8102a74 <RCCEx_PLL2_Config>
 8101b7a:	4603      	mov	r3, r0
 8101b7c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101b7e:	e012      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	3324      	adds	r3, #36	; 0x24
 8101b84:	2101      	movs	r1, #1
 8101b86:	4618      	mov	r0, r3
 8101b88:	f001 f826 	bl	8102bd8 <RCCEx_PLL3_Config>
 8101b8c:	4603      	mov	r3, r0
 8101b8e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101b90:	e009      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8101b92:	2301      	movs	r3, #1
 8101b94:	75fb      	strb	r3, [r7, #23]
      break;
 8101b96:	e006      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101b98:	bf00      	nop
 8101b9a:	e004      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101b9c:	bf00      	nop
 8101b9e:	e002      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101ba0:	bf00      	nop
 8101ba2:	e000      	b.n	8101ba6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ba6:	7dfb      	ldrb	r3, [r7, #23]
 8101ba8:	2b00      	cmp	r3, #0
 8101baa:	d10a      	bne.n	8101bc2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101bac:	4b2b      	ldr	r3, [pc, #172]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101bb0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101bba:	4928      	ldr	r1, [pc, #160]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bbc:	4313      	orrs	r3, r2
 8101bbe:	658b      	str	r3, [r1, #88]	; 0x58
 8101bc0:	e001      	b.n	8101bc6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101bc2:	7dfb      	ldrb	r3, [r7, #23]
 8101bc4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	681b      	ldr	r3, [r3, #0]
 8101bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101bce:	2b00      	cmp	r3, #0
 8101bd0:	d02f      	beq.n	8101c32 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8101bd2:	687b      	ldr	r3, [r7, #4]
 8101bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101bda:	d00e      	beq.n	8101bfa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8101bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101be0:	d814      	bhi.n	8101c0c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8101be2:	2b00      	cmp	r3, #0
 8101be4:	d015      	beq.n	8101c12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101bea:	d10f      	bne.n	8101c0c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101bec:	4b1b      	ldr	r3, [pc, #108]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101bf0:	4a1a      	ldr	r2, [pc, #104]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101bf8:	e00c      	b.n	8101c14 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101bfa:	687b      	ldr	r3, [r7, #4]
 8101bfc:	3304      	adds	r3, #4
 8101bfe:	2101      	movs	r1, #1
 8101c00:	4618      	mov	r0, r3
 8101c02:	f000 ff37 	bl	8102a74 <RCCEx_PLL2_Config>
 8101c06:	4603      	mov	r3, r0
 8101c08:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101c0a:	e003      	b.n	8101c14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101c0c:	2301      	movs	r3, #1
 8101c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8101c10:	e000      	b.n	8101c14 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8101c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c14:	7dfb      	ldrb	r3, [r7, #23]
 8101c16:	2b00      	cmp	r3, #0
 8101c18:	d109      	bne.n	8101c2e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101c1a:	4b10      	ldr	r3, [pc, #64]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101c1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8101c22:	687b      	ldr	r3, [r7, #4]
 8101c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101c26:	490d      	ldr	r1, [pc, #52]	; (8101c5c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101c28:	4313      	orrs	r3, r2
 8101c2a:	650b      	str	r3, [r1, #80]	; 0x50
 8101c2c:	e001      	b.n	8101c32 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c2e:	7dfb      	ldrb	r3, [r7, #23]
 8101c30:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	681b      	ldr	r3, [r3, #0]
 8101c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101c3a:	2b00      	cmp	r3, #0
 8101c3c:	d033      	beq.n	8101ca6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8101c3e:	687b      	ldr	r3, [r7, #4]
 8101c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101c42:	2b03      	cmp	r3, #3
 8101c44:	d81c      	bhi.n	8101c80 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8101c46:	a201      	add	r2, pc, #4	; (adr r2, 8101c4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8101c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c4c:	08101c87 	.word	0x08101c87
 8101c50:	08101c61 	.word	0x08101c61
 8101c54:	08101c6f 	.word	0x08101c6f
 8101c58:	08101c87 	.word	0x08101c87
 8101c5c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c60:	4bb9      	ldr	r3, [pc, #740]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c64:	4ab8      	ldr	r2, [pc, #736]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101c6c:	e00c      	b.n	8101c88 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	3304      	adds	r3, #4
 8101c72:	2102      	movs	r1, #2
 8101c74:	4618      	mov	r0, r3
 8101c76:	f000 fefd 	bl	8102a74 <RCCEx_PLL2_Config>
 8101c7a:	4603      	mov	r3, r0
 8101c7c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101c7e:	e003      	b.n	8101c88 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101c80:	2301      	movs	r3, #1
 8101c82:	75fb      	strb	r3, [r7, #23]
      break;
 8101c84:	e000      	b.n	8101c88 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8101c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c88:	7dfb      	ldrb	r3, [r7, #23]
 8101c8a:	2b00      	cmp	r3, #0
 8101c8c:	d109      	bne.n	8101ca2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101c8e:	4bae      	ldr	r3, [pc, #696]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101c92:	f023 0203 	bic.w	r2, r3, #3
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101c9a:	49ab      	ldr	r1, [pc, #684]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c9c:	4313      	orrs	r3, r2
 8101c9e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101ca0:	e001      	b.n	8101ca6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ca2:	7dfb      	ldrb	r3, [r7, #23]
 8101ca4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	681b      	ldr	r3, [r3, #0]
 8101caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101cae:	2b00      	cmp	r3, #0
 8101cb0:	f000 8088 	beq.w	8101dc4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101cb4:	4ba5      	ldr	r3, [pc, #660]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101cb6:	681b      	ldr	r3, [r3, #0]
 8101cb8:	4aa4      	ldr	r2, [pc, #656]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101cbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101cc0:	f7fe fef6 	bl	8100ab0 <HAL_GetTick>
 8101cc4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101cc6:	e009      	b.n	8101cdc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101cc8:	f7fe fef2 	bl	8100ab0 <HAL_GetTick>
 8101ccc:	4602      	mov	r2, r0
 8101cce:	693b      	ldr	r3, [r7, #16]
 8101cd0:	1ad3      	subs	r3, r2, r3
 8101cd2:	2b64      	cmp	r3, #100	; 0x64
 8101cd4:	d902      	bls.n	8101cdc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8101cd6:	2303      	movs	r3, #3
 8101cd8:	75fb      	strb	r3, [r7, #23]
        break;
 8101cda:	e005      	b.n	8101ce8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101cdc:	4b9b      	ldr	r3, [pc, #620]	; (8101f4c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101cde:	681b      	ldr	r3, [r3, #0]
 8101ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101ce4:	2b00      	cmp	r3, #0
 8101ce6:	d0ef      	beq.n	8101cc8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8101ce8:	7dfb      	ldrb	r3, [r7, #23]
 8101cea:	2b00      	cmp	r3, #0
 8101cec:	d168      	bne.n	8101dc0 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101cee:	4b96      	ldr	r3, [pc, #600]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101cf2:	687b      	ldr	r3, [r7, #4]
 8101cf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101cf8:	4053      	eors	r3, r2
 8101cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101cfe:	2b00      	cmp	r3, #0
 8101d00:	d013      	beq.n	8101d2a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101d02:	4b91      	ldr	r3, [pc, #580]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101d0a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101d0c:	4b8e      	ldr	r3, [pc, #568]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d10:	4a8d      	ldr	r2, [pc, #564]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101d16:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101d18:	4b8b      	ldr	r3, [pc, #556]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d1c:	4a8a      	ldr	r2, [pc, #552]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101d22:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101d24:	4a88      	ldr	r2, [pc, #544]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d26:	68fb      	ldr	r3, [r7, #12]
 8101d28:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101d2a:	687b      	ldr	r3, [r7, #4]
 8101d2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101d34:	d115      	bne.n	8101d62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101d36:	f7fe febb 	bl	8100ab0 <HAL_GetTick>
 8101d3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101d3c:	e00b      	b.n	8101d56 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101d3e:	f7fe feb7 	bl	8100ab0 <HAL_GetTick>
 8101d42:	4602      	mov	r2, r0
 8101d44:	693b      	ldr	r3, [r7, #16]
 8101d46:	1ad3      	subs	r3, r2, r3
 8101d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8101d4c:	4293      	cmp	r3, r2
 8101d4e:	d902      	bls.n	8101d56 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8101d50:	2303      	movs	r3, #3
 8101d52:	75fb      	strb	r3, [r7, #23]
            break;
 8101d54:	e005      	b.n	8101d62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101d56:	4b7c      	ldr	r3, [pc, #496]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d5a:	f003 0302 	and.w	r3, r3, #2
 8101d5e:	2b00      	cmp	r3, #0
 8101d60:	d0ed      	beq.n	8101d3e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8101d62:	7dfb      	ldrb	r3, [r7, #23]
 8101d64:	2b00      	cmp	r3, #0
 8101d66:	d128      	bne.n	8101dba <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101d76:	d10f      	bne.n	8101d98 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8101d78:	4b73      	ldr	r3, [pc, #460]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d7a:	691b      	ldr	r3, [r3, #16]
 8101d7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8101d80:	687b      	ldr	r3, [r7, #4]
 8101d82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d86:	091b      	lsrs	r3, r3, #4
 8101d88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8101d8c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8101d90:	496d      	ldr	r1, [pc, #436]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d92:	4313      	orrs	r3, r2
 8101d94:	610b      	str	r3, [r1, #16]
 8101d96:	e005      	b.n	8101da4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8101d98:	4b6b      	ldr	r3, [pc, #428]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d9a:	691b      	ldr	r3, [r3, #16]
 8101d9c:	4a6a      	ldr	r2, [pc, #424]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8101da2:	6113      	str	r3, [r2, #16]
 8101da4:	4b68      	ldr	r3, [pc, #416]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101da6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101da8:	687b      	ldr	r3, [r7, #4]
 8101daa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101db2:	4965      	ldr	r1, [pc, #404]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101db4:	4313      	orrs	r3, r2
 8101db6:	670b      	str	r3, [r1, #112]	; 0x70
 8101db8:	e004      	b.n	8101dc4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101dba:	7dfb      	ldrb	r3, [r7, #23]
 8101dbc:	75bb      	strb	r3, [r7, #22]
 8101dbe:	e001      	b.n	8101dc4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101dc0:	7dfb      	ldrb	r3, [r7, #23]
 8101dc2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101dc4:	687b      	ldr	r3, [r7, #4]
 8101dc6:	681b      	ldr	r3, [r3, #0]
 8101dc8:	f003 0301 	and.w	r3, r3, #1
 8101dcc:	2b00      	cmp	r3, #0
 8101dce:	d07e      	beq.n	8101ece <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8101dd0:	687b      	ldr	r3, [r7, #4]
 8101dd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101dd4:	2b28      	cmp	r3, #40	; 0x28
 8101dd6:	d867      	bhi.n	8101ea8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8101dd8:	a201      	add	r2, pc, #4	; (adr r2, 8101de0 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8101dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101dde:	bf00      	nop
 8101de0:	08101eaf 	.word	0x08101eaf
 8101de4:	08101ea9 	.word	0x08101ea9
 8101de8:	08101ea9 	.word	0x08101ea9
 8101dec:	08101ea9 	.word	0x08101ea9
 8101df0:	08101ea9 	.word	0x08101ea9
 8101df4:	08101ea9 	.word	0x08101ea9
 8101df8:	08101ea9 	.word	0x08101ea9
 8101dfc:	08101ea9 	.word	0x08101ea9
 8101e00:	08101e85 	.word	0x08101e85
 8101e04:	08101ea9 	.word	0x08101ea9
 8101e08:	08101ea9 	.word	0x08101ea9
 8101e0c:	08101ea9 	.word	0x08101ea9
 8101e10:	08101ea9 	.word	0x08101ea9
 8101e14:	08101ea9 	.word	0x08101ea9
 8101e18:	08101ea9 	.word	0x08101ea9
 8101e1c:	08101ea9 	.word	0x08101ea9
 8101e20:	08101e97 	.word	0x08101e97
 8101e24:	08101ea9 	.word	0x08101ea9
 8101e28:	08101ea9 	.word	0x08101ea9
 8101e2c:	08101ea9 	.word	0x08101ea9
 8101e30:	08101ea9 	.word	0x08101ea9
 8101e34:	08101ea9 	.word	0x08101ea9
 8101e38:	08101ea9 	.word	0x08101ea9
 8101e3c:	08101ea9 	.word	0x08101ea9
 8101e40:	08101eaf 	.word	0x08101eaf
 8101e44:	08101ea9 	.word	0x08101ea9
 8101e48:	08101ea9 	.word	0x08101ea9
 8101e4c:	08101ea9 	.word	0x08101ea9
 8101e50:	08101ea9 	.word	0x08101ea9
 8101e54:	08101ea9 	.word	0x08101ea9
 8101e58:	08101ea9 	.word	0x08101ea9
 8101e5c:	08101ea9 	.word	0x08101ea9
 8101e60:	08101eaf 	.word	0x08101eaf
 8101e64:	08101ea9 	.word	0x08101ea9
 8101e68:	08101ea9 	.word	0x08101ea9
 8101e6c:	08101ea9 	.word	0x08101ea9
 8101e70:	08101ea9 	.word	0x08101ea9
 8101e74:	08101ea9 	.word	0x08101ea9
 8101e78:	08101ea9 	.word	0x08101ea9
 8101e7c:	08101ea9 	.word	0x08101ea9
 8101e80:	08101eaf 	.word	0x08101eaf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	3304      	adds	r3, #4
 8101e88:	2101      	movs	r1, #1
 8101e8a:	4618      	mov	r0, r3
 8101e8c:	f000 fdf2 	bl	8102a74 <RCCEx_PLL2_Config>
 8101e90:	4603      	mov	r3, r0
 8101e92:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101e94:	e00c      	b.n	8101eb0 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101e96:	687b      	ldr	r3, [r7, #4]
 8101e98:	3324      	adds	r3, #36	; 0x24
 8101e9a:	2101      	movs	r1, #1
 8101e9c:	4618      	mov	r0, r3
 8101e9e:	f000 fe9b 	bl	8102bd8 <RCCEx_PLL3_Config>
 8101ea2:	4603      	mov	r3, r0
 8101ea4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101ea6:	e003      	b.n	8101eb0 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101ea8:	2301      	movs	r3, #1
 8101eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8101eac:	e000      	b.n	8101eb0 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8101eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101eb0:	7dfb      	ldrb	r3, [r7, #23]
 8101eb2:	2b00      	cmp	r3, #0
 8101eb4:	d109      	bne.n	8101eca <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8101eb6:	4b24      	ldr	r3, [pc, #144]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101eba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8101ebe:	687b      	ldr	r3, [r7, #4]
 8101ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101ec2:	4921      	ldr	r1, [pc, #132]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101ec4:	4313      	orrs	r3, r2
 8101ec6:	654b      	str	r3, [r1, #84]	; 0x54
 8101ec8:	e001      	b.n	8101ece <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101eca:	7dfb      	ldrb	r3, [r7, #23]
 8101ecc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	f003 0302 	and.w	r3, r3, #2
 8101ed6:	2b00      	cmp	r3, #0
 8101ed8:	d03c      	beq.n	8101f54 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8101eda:	687b      	ldr	r3, [r7, #4]
 8101edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101ede:	2b05      	cmp	r3, #5
 8101ee0:	d820      	bhi.n	8101f24 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8101ee2:	a201      	add	r2, pc, #4	; (adr r2, 8101ee8 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8101ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101ee8:	08101f2b 	.word	0x08101f2b
 8101eec:	08101f01 	.word	0x08101f01
 8101ef0:	08101f13 	.word	0x08101f13
 8101ef4:	08101f2b 	.word	0x08101f2b
 8101ef8:	08101f2b 	.word	0x08101f2b
 8101efc:	08101f2b 	.word	0x08101f2b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	3304      	adds	r3, #4
 8101f04:	2101      	movs	r1, #1
 8101f06:	4618      	mov	r0, r3
 8101f08:	f000 fdb4 	bl	8102a74 <RCCEx_PLL2_Config>
 8101f0c:	4603      	mov	r3, r0
 8101f0e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101f10:	e00c      	b.n	8101f2c <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	3324      	adds	r3, #36	; 0x24
 8101f16:	2101      	movs	r1, #1
 8101f18:	4618      	mov	r0, r3
 8101f1a:	f000 fe5d 	bl	8102bd8 <RCCEx_PLL3_Config>
 8101f1e:	4603      	mov	r3, r0
 8101f20:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101f22:	e003      	b.n	8101f2c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101f24:	2301      	movs	r3, #1
 8101f26:	75fb      	strb	r3, [r7, #23]
      break;
 8101f28:	e000      	b.n	8101f2c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8101f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f2c:	7dfb      	ldrb	r3, [r7, #23]
 8101f2e:	2b00      	cmp	r3, #0
 8101f30:	d10e      	bne.n	8101f50 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8101f32:	4b05      	ldr	r3, [pc, #20]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f36:	f023 0207 	bic.w	r2, r3, #7
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101f3e:	4902      	ldr	r1, [pc, #8]	; (8101f48 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101f40:	4313      	orrs	r3, r2
 8101f42:	654b      	str	r3, [r1, #84]	; 0x54
 8101f44:	e006      	b.n	8101f54 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8101f46:	bf00      	nop
 8101f48:	58024400 	.word	0x58024400
 8101f4c:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f50:	7dfb      	ldrb	r3, [r7, #23]
 8101f52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8101f54:	687b      	ldr	r3, [r7, #4]
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	f003 0304 	and.w	r3, r3, #4
 8101f5c:	2b00      	cmp	r3, #0
 8101f5e:	d039      	beq.n	8101fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101f66:	2b05      	cmp	r3, #5
 8101f68:	d820      	bhi.n	8101fac <HAL_RCCEx_PeriphCLKConfig+0x934>
 8101f6a:	a201      	add	r2, pc, #4	; (adr r2, 8101f70 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8101f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101f70:	08101fb3 	.word	0x08101fb3
 8101f74:	08101f89 	.word	0x08101f89
 8101f78:	08101f9b 	.word	0x08101f9b
 8101f7c:	08101fb3 	.word	0x08101fb3
 8101f80:	08101fb3 	.word	0x08101fb3
 8101f84:	08101fb3 	.word	0x08101fb3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	3304      	adds	r3, #4
 8101f8c:	2101      	movs	r1, #1
 8101f8e:	4618      	mov	r0, r3
 8101f90:	f000 fd70 	bl	8102a74 <RCCEx_PLL2_Config>
 8101f94:	4603      	mov	r3, r0
 8101f96:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101f98:	e00c      	b.n	8101fb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	3324      	adds	r3, #36	; 0x24
 8101f9e:	2101      	movs	r1, #1
 8101fa0:	4618      	mov	r0, r3
 8101fa2:	f000 fe19 	bl	8102bd8 <RCCEx_PLL3_Config>
 8101fa6:	4603      	mov	r3, r0
 8101fa8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101faa:	e003      	b.n	8101fb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101fac:	2301      	movs	r3, #1
 8101fae:	75fb      	strb	r3, [r7, #23]
      break;
 8101fb0:	e000      	b.n	8101fb4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8101fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101fb4:	7dfb      	ldrb	r3, [r7, #23]
 8101fb6:	2b00      	cmp	r3, #0
 8101fb8:	d10a      	bne.n	8101fd0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8101fba:	4bb7      	ldr	r3, [pc, #732]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8101fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101fbe:	f023 0207 	bic.w	r2, r3, #7
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101fc8:	49b3      	ldr	r1, [pc, #716]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8101fca:	4313      	orrs	r3, r2
 8101fcc:	658b      	str	r3, [r1, #88]	; 0x58
 8101fce:	e001      	b.n	8101fd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fd0:	7dfb      	ldrb	r3, [r7, #23]
 8101fd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	f003 0320 	and.w	r3, r3, #32
 8101fdc:	2b00      	cmp	r3, #0
 8101fde:	d04b      	beq.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8101fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101fea:	d02e      	beq.n	810204a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8101fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101ff0:	d828      	bhi.n	8102044 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8101ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101ff6:	d02a      	beq.n	810204e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8101ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101ffc:	d822      	bhi.n	8102044 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8101ffe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102002:	d026      	beq.n	8102052 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8102004:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102008:	d81c      	bhi.n	8102044 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810200a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810200e:	d010      	beq.n	8102032 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8102010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102014:	d816      	bhi.n	8102044 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102016:	2b00      	cmp	r3, #0
 8102018:	d01d      	beq.n	8102056 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810201a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810201e:	d111      	bne.n	8102044 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102020:	687b      	ldr	r3, [r7, #4]
 8102022:	3304      	adds	r3, #4
 8102024:	2100      	movs	r1, #0
 8102026:	4618      	mov	r0, r3
 8102028:	f000 fd24 	bl	8102a74 <RCCEx_PLL2_Config>
 810202c:	4603      	mov	r3, r0
 810202e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102030:	e012      	b.n	8102058 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	3324      	adds	r3, #36	; 0x24
 8102036:	2102      	movs	r1, #2
 8102038:	4618      	mov	r0, r3
 810203a:	f000 fdcd 	bl	8102bd8 <RCCEx_PLL3_Config>
 810203e:	4603      	mov	r3, r0
 8102040:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102042:	e009      	b.n	8102058 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102044:	2301      	movs	r3, #1
 8102046:	75fb      	strb	r3, [r7, #23]
      break;
 8102048:	e006      	b.n	8102058 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810204a:	bf00      	nop
 810204c:	e004      	b.n	8102058 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810204e:	bf00      	nop
 8102050:	e002      	b.n	8102058 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102052:	bf00      	nop
 8102054:	e000      	b.n	8102058 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102058:	7dfb      	ldrb	r3, [r7, #23]
 810205a:	2b00      	cmp	r3, #0
 810205c:	d10a      	bne.n	8102074 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810205e:	4b8e      	ldr	r3, [pc, #568]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102062:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102066:	687b      	ldr	r3, [r7, #4]
 8102068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810206c:	498a      	ldr	r1, [pc, #552]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810206e:	4313      	orrs	r3, r2
 8102070:	654b      	str	r3, [r1, #84]	; 0x54
 8102072:	e001      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102074:	7dfb      	ldrb	r3, [r7, #23]
 8102076:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	681b      	ldr	r3, [r3, #0]
 810207c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102080:	2b00      	cmp	r3, #0
 8102082:	d04b      	beq.n	810211c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102084:	687b      	ldr	r3, [r7, #4]
 8102086:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810208a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810208e:	d02e      	beq.n	81020ee <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8102090:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102094:	d828      	bhi.n	81020e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810209a:	d02a      	beq.n	81020f2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 810209c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81020a0:	d822      	bhi.n	81020e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81020a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81020a6:	d026      	beq.n	81020f6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81020a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81020ac:	d81c      	bhi.n	81020e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81020ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81020b2:	d010      	beq.n	81020d6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81020b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81020b8:	d816      	bhi.n	81020e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81020ba:	2b00      	cmp	r3, #0
 81020bc:	d01d      	beq.n	81020fa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81020c2:	d111      	bne.n	81020e8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81020c4:	687b      	ldr	r3, [r7, #4]
 81020c6:	3304      	adds	r3, #4
 81020c8:	2100      	movs	r1, #0
 81020ca:	4618      	mov	r0, r3
 81020cc:	f000 fcd2 	bl	8102a74 <RCCEx_PLL2_Config>
 81020d0:	4603      	mov	r3, r0
 81020d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81020d4:	e012      	b.n	81020fc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	3324      	adds	r3, #36	; 0x24
 81020da:	2102      	movs	r1, #2
 81020dc:	4618      	mov	r0, r3
 81020de:	f000 fd7b 	bl	8102bd8 <RCCEx_PLL3_Config>
 81020e2:	4603      	mov	r3, r0
 81020e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81020e6:	e009      	b.n	81020fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81020e8:	2301      	movs	r3, #1
 81020ea:	75fb      	strb	r3, [r7, #23]
      break;
 81020ec:	e006      	b.n	81020fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020ee:	bf00      	nop
 81020f0:	e004      	b.n	81020fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020f2:	bf00      	nop
 81020f4:	e002      	b.n	81020fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020f6:	bf00      	nop
 81020f8:	e000      	b.n	81020fc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81020fc:	7dfb      	ldrb	r3, [r7, #23]
 81020fe:	2b00      	cmp	r3, #0
 8102100:	d10a      	bne.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102102:	4b65      	ldr	r3, [pc, #404]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102106:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810210a:	687b      	ldr	r3, [r7, #4]
 810210c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102110:	4961      	ldr	r1, [pc, #388]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102112:	4313      	orrs	r3, r2
 8102114:	658b      	str	r3, [r1, #88]	; 0x58
 8102116:	e001      	b.n	810211c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102118:	7dfb      	ldrb	r3, [r7, #23]
 810211a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	681b      	ldr	r3, [r3, #0]
 8102120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102124:	2b00      	cmp	r3, #0
 8102126:	d04b      	beq.n	81021c0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810212e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102132:	d02e      	beq.n	8102192 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8102134:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102138:	d828      	bhi.n	810218c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810213a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810213e:	d02a      	beq.n	8102196 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8102140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102144:	d822      	bhi.n	810218c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102146:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810214a:	d026      	beq.n	810219a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 810214c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102150:	d81c      	bhi.n	810218c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102156:	d010      	beq.n	810217a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8102158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810215c:	d816      	bhi.n	810218c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810215e:	2b00      	cmp	r3, #0
 8102160:	d01d      	beq.n	810219e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102166:	d111      	bne.n	810218c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	3304      	adds	r3, #4
 810216c:	2100      	movs	r1, #0
 810216e:	4618      	mov	r0, r3
 8102170:	f000 fc80 	bl	8102a74 <RCCEx_PLL2_Config>
 8102174:	4603      	mov	r3, r0
 8102176:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102178:	e012      	b.n	81021a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810217a:	687b      	ldr	r3, [r7, #4]
 810217c:	3324      	adds	r3, #36	; 0x24
 810217e:	2102      	movs	r1, #2
 8102180:	4618      	mov	r0, r3
 8102182:	f000 fd29 	bl	8102bd8 <RCCEx_PLL3_Config>
 8102186:	4603      	mov	r3, r0
 8102188:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810218a:	e009      	b.n	81021a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810218c:	2301      	movs	r3, #1
 810218e:	75fb      	strb	r3, [r7, #23]
      break;
 8102190:	e006      	b.n	81021a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102192:	bf00      	nop
 8102194:	e004      	b.n	81021a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102196:	bf00      	nop
 8102198:	e002      	b.n	81021a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810219a:	bf00      	nop
 810219c:	e000      	b.n	81021a0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810219e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81021a0:	7dfb      	ldrb	r3, [r7, #23]
 81021a2:	2b00      	cmp	r3, #0
 81021a4:	d10a      	bne.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81021a6:	4b3c      	ldr	r3, [pc, #240]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81021aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81021b4:	4938      	ldr	r1, [pc, #224]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021b6:	4313      	orrs	r3, r2
 81021b8:	658b      	str	r3, [r1, #88]	; 0x58
 81021ba:	e001      	b.n	81021c0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021bc:	7dfb      	ldrb	r3, [r7, #23]
 81021be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81021c0:	687b      	ldr	r3, [r7, #4]
 81021c2:	681b      	ldr	r3, [r3, #0]
 81021c4:	f003 0308 	and.w	r3, r3, #8
 81021c8:	2b00      	cmp	r3, #0
 81021ca:	d01a      	beq.n	8102202 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81021d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81021d6:	d10a      	bne.n	81021ee <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81021d8:	687b      	ldr	r3, [r7, #4]
 81021da:	3324      	adds	r3, #36	; 0x24
 81021dc:	2102      	movs	r1, #2
 81021de:	4618      	mov	r0, r3
 81021e0:	f000 fcfa 	bl	8102bd8 <RCCEx_PLL3_Config>
 81021e4:	4603      	mov	r3, r0
 81021e6:	2b00      	cmp	r3, #0
 81021e8:	d001      	beq.n	81021ee <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 81021ea:	2301      	movs	r3, #1
 81021ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81021ee:	4b2a      	ldr	r3, [pc, #168]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81021f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81021f6:	687b      	ldr	r3, [r7, #4]
 81021f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81021fc:	4926      	ldr	r1, [pc, #152]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021fe:	4313      	orrs	r3, r2
 8102200:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	681b      	ldr	r3, [r3, #0]
 8102206:	f003 0310 	and.w	r3, r3, #16
 810220a:	2b00      	cmp	r3, #0
 810220c:	d01a      	beq.n	8102244 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102218:	d10a      	bne.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	3324      	adds	r3, #36	; 0x24
 810221e:	2102      	movs	r1, #2
 8102220:	4618      	mov	r0, r3
 8102222:	f000 fcd9 	bl	8102bd8 <RCCEx_PLL3_Config>
 8102226:	4603      	mov	r3, r0
 8102228:	2b00      	cmp	r3, #0
 810222a:	d001      	beq.n	8102230 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 810222c:	2301      	movs	r3, #1
 810222e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102230:	4b19      	ldr	r3, [pc, #100]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102234:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810223e:	4916      	ldr	r1, [pc, #88]	; (8102298 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102240:	4313      	orrs	r3, r2
 8102242:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810224c:	2b00      	cmp	r3, #0
 810224e:	d036      	beq.n	81022be <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810225a:	d01f      	beq.n	810229c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 810225c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102260:	d817      	bhi.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8102262:	2b00      	cmp	r3, #0
 8102264:	d003      	beq.n	810226e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8102266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810226a:	d009      	beq.n	8102280 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 810226c:	e011      	b.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	3304      	adds	r3, #4
 8102272:	2100      	movs	r1, #0
 8102274:	4618      	mov	r0, r3
 8102276:	f000 fbfd 	bl	8102a74 <RCCEx_PLL2_Config>
 810227a:	4603      	mov	r3, r0
 810227c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810227e:	e00e      	b.n	810229e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	3324      	adds	r3, #36	; 0x24
 8102284:	2102      	movs	r1, #2
 8102286:	4618      	mov	r0, r3
 8102288:	f000 fca6 	bl	8102bd8 <RCCEx_PLL3_Config>
 810228c:	4603      	mov	r3, r0
 810228e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102290:	e005      	b.n	810229e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102292:	2301      	movs	r3, #1
 8102294:	75fb      	strb	r3, [r7, #23]
      break;
 8102296:	e002      	b.n	810229e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8102298:	58024400 	.word	0x58024400
      break;
 810229c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810229e:	7dfb      	ldrb	r3, [r7, #23]
 81022a0:	2b00      	cmp	r3, #0
 81022a2:	d10a      	bne.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81022a4:	4b93      	ldr	r3, [pc, #588]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81022a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81022ac:	687b      	ldr	r3, [r7, #4]
 81022ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81022b2:	4990      	ldr	r1, [pc, #576]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022b4:	4313      	orrs	r3, r2
 81022b6:	658b      	str	r3, [r1, #88]	; 0x58
 81022b8:	e001      	b.n	81022be <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022ba:	7dfb      	ldrb	r3, [r7, #23]
 81022bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81022be:	687b      	ldr	r3, [r7, #4]
 81022c0:	681b      	ldr	r3, [r3, #0]
 81022c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81022c6:	2b00      	cmp	r3, #0
 81022c8:	d033      	beq.n	8102332 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81022d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81022d4:	d01c      	beq.n	8102310 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 81022d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81022da:	d816      	bhi.n	810230a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 81022dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81022e0:	d003      	beq.n	81022ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
 81022e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81022e6:	d007      	beq.n	81022f8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 81022e8:	e00f      	b.n	810230a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81022ea:	4b82      	ldr	r3, [pc, #520]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022ee:	4a81      	ldr	r2, [pc, #516]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81022f6:	e00c      	b.n	8102312 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	3324      	adds	r3, #36	; 0x24
 81022fc:	2101      	movs	r1, #1
 81022fe:	4618      	mov	r0, r3
 8102300:	f000 fc6a 	bl	8102bd8 <RCCEx_PLL3_Config>
 8102304:	4603      	mov	r3, r0
 8102306:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8102308:	e003      	b.n	8102312 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810230a:	2301      	movs	r3, #1
 810230c:	75fb      	strb	r3, [r7, #23]
      break;
 810230e:	e000      	b.n	8102312 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8102310:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102312:	7dfb      	ldrb	r3, [r7, #23]
 8102314:	2b00      	cmp	r3, #0
 8102316:	d10a      	bne.n	810232e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102318:	4b76      	ldr	r3, [pc, #472]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810231c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102326:	4973      	ldr	r1, [pc, #460]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102328:	4313      	orrs	r3, r2
 810232a:	654b      	str	r3, [r1, #84]	; 0x54
 810232c:	e001      	b.n	8102332 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810232e:	7dfb      	ldrb	r3, [r7, #23]
 8102330:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	681b      	ldr	r3, [r3, #0]
 8102336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810233a:	2b00      	cmp	r3, #0
 810233c:	d029      	beq.n	8102392 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102342:	2b00      	cmp	r3, #0
 8102344:	d003      	beq.n	810234e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8102346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810234a:	d007      	beq.n	810235c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 810234c:	e00f      	b.n	810236e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810234e:	4b69      	ldr	r3, [pc, #420]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102352:	4a68      	ldr	r2, [pc, #416]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102358:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810235a:	e00b      	b.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	3304      	adds	r3, #4
 8102360:	2102      	movs	r1, #2
 8102362:	4618      	mov	r0, r3
 8102364:	f000 fb86 	bl	8102a74 <RCCEx_PLL2_Config>
 8102368:	4603      	mov	r3, r0
 810236a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810236c:	e002      	b.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810236e:	2301      	movs	r3, #1
 8102370:	75fb      	strb	r3, [r7, #23]
      break;
 8102372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102374:	7dfb      	ldrb	r3, [r7, #23]
 8102376:	2b00      	cmp	r3, #0
 8102378:	d109      	bne.n	810238e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810237a:	4b5e      	ldr	r3, [pc, #376]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810237e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102382:	687b      	ldr	r3, [r7, #4]
 8102384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102386:	495b      	ldr	r1, [pc, #364]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102388:	4313      	orrs	r3, r2
 810238a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810238c:	e001      	b.n	8102392 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810238e:	7dfb      	ldrb	r3, [r7, #23]
 8102390:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	681b      	ldr	r3, [r3, #0]
 8102396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810239a:	2b00      	cmp	r3, #0
 810239c:	d00a      	beq.n	81023b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810239e:	687b      	ldr	r3, [r7, #4]
 81023a0:	3324      	adds	r3, #36	; 0x24
 81023a2:	2102      	movs	r1, #2
 81023a4:	4618      	mov	r0, r3
 81023a6:	f000 fc17 	bl	8102bd8 <RCCEx_PLL3_Config>
 81023aa:	4603      	mov	r3, r0
 81023ac:	2b00      	cmp	r3, #0
 81023ae:	d001      	beq.n	81023b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81023b0:	2301      	movs	r3, #1
 81023b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	681b      	ldr	r3, [r3, #0]
 81023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81023bc:	2b00      	cmp	r3, #0
 81023be:	d030      	beq.n	8102422 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81023c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81023c8:	d017      	beq.n	81023fa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 81023ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81023ce:	d811      	bhi.n	81023f4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81023d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81023d4:	d013      	beq.n	81023fe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81023d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81023da:	d80b      	bhi.n	81023f4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81023dc:	2b00      	cmp	r3, #0
 81023de:	d010      	beq.n	8102402 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81023e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81023e4:	d106      	bne.n	81023f4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023e6:	4b43      	ldr	r3, [pc, #268]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023ea:	4a42      	ldr	r2, [pc, #264]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81023f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81023f2:	e007      	b.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81023f4:	2301      	movs	r3, #1
 81023f6:	75fb      	strb	r3, [r7, #23]
      break;
 81023f8:	e004      	b.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81023fa:	bf00      	nop
 81023fc:	e002      	b.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81023fe:	bf00      	nop
 8102400:	e000      	b.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102402:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102404:	7dfb      	ldrb	r3, [r7, #23]
 8102406:	2b00      	cmp	r3, #0
 8102408:	d109      	bne.n	810241e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810240a:	4b3a      	ldr	r3, [pc, #232]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810240e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102416:	4937      	ldr	r1, [pc, #220]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102418:	4313      	orrs	r3, r2
 810241a:	654b      	str	r3, [r1, #84]	; 0x54
 810241c:	e001      	b.n	8102422 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810241e:	7dfb      	ldrb	r3, [r7, #23]
 8102420:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102422:	687b      	ldr	r3, [r7, #4]
 8102424:	681b      	ldr	r3, [r3, #0]
 8102426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810242a:	2b00      	cmp	r3, #0
 810242c:	d008      	beq.n	8102440 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810242e:	4b31      	ldr	r3, [pc, #196]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102432:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102436:	687b      	ldr	r3, [r7, #4]
 8102438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810243a:	492e      	ldr	r1, [pc, #184]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810243c:	4313      	orrs	r3, r2
 810243e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102440:	687b      	ldr	r3, [r7, #4]
 8102442:	681b      	ldr	r3, [r3, #0]
 8102444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102448:	2b00      	cmp	r3, #0
 810244a:	d009      	beq.n	8102460 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810244c:	4b29      	ldr	r3, [pc, #164]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810244e:	691b      	ldr	r3, [r3, #16]
 8102450:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810245a:	4926      	ldr	r1, [pc, #152]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810245c:	4313      	orrs	r3, r2
 810245e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102460:	687b      	ldr	r3, [r7, #4]
 8102462:	681b      	ldr	r3, [r3, #0]
 8102464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102468:	2b00      	cmp	r3, #0
 810246a:	d008      	beq.n	810247e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810246c:	4b21      	ldr	r3, [pc, #132]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810246e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102470:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102478:	491e      	ldr	r1, [pc, #120]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810247a:	4313      	orrs	r3, r2
 810247c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	681b      	ldr	r3, [r3, #0]
 8102482:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102486:	2b00      	cmp	r3, #0
 8102488:	d00d      	beq.n	81024a6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810248a:	4b1a      	ldr	r3, [pc, #104]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810248c:	691b      	ldr	r3, [r3, #16]
 810248e:	4a19      	ldr	r2, [pc, #100]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102490:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102494:	6113      	str	r3, [r2, #16]
 8102496:	4b17      	ldr	r3, [pc, #92]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102498:	691a      	ldr	r2, [r3, #16]
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81024a0:	4914      	ldr	r1, [pc, #80]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024a2:	4313      	orrs	r3, r2
 81024a4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	681b      	ldr	r3, [r3, #0]
 81024aa:	2b00      	cmp	r3, #0
 81024ac:	da08      	bge.n	81024c0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81024ae:	4b11      	ldr	r3, [pc, #68]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81024b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024ba:	490e      	ldr	r1, [pc, #56]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024bc:	4313      	orrs	r3, r2
 81024be:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	681b      	ldr	r3, [r3, #0]
 81024c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81024c8:	2b00      	cmp	r3, #0
 81024ca:	d009      	beq.n	81024e0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81024cc:	4b09      	ldr	r3, [pc, #36]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81024da:	4906      	ldr	r1, [pc, #24]	; (81024f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024dc:	4313      	orrs	r3, r2
 81024de:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81024e0:	7dbb      	ldrb	r3, [r7, #22]
 81024e2:	2b00      	cmp	r3, #0
 81024e4:	d101      	bne.n	81024ea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 81024e6:	2300      	movs	r3, #0
 81024e8:	e000      	b.n	81024ec <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 81024ea:	2301      	movs	r3, #1
}
 81024ec:	4618      	mov	r0, r3
 81024ee:	3718      	adds	r7, #24
 81024f0:	46bd      	mov	sp, r7
 81024f2:	bd80      	pop	{r7, pc}
 81024f4:	58024400 	.word	0x58024400

081024f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81024f8:	b580      	push	{r7, lr}
 81024fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81024fc:	f7ff f85e 	bl	81015bc <HAL_RCC_GetHCLKFreq>
 8102500:	4602      	mov	r2, r0
 8102502:	4b06      	ldr	r3, [pc, #24]	; (810251c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102504:	6a1b      	ldr	r3, [r3, #32]
 8102506:	091b      	lsrs	r3, r3, #4
 8102508:	f003 0307 	and.w	r3, r3, #7
 810250c:	4904      	ldr	r1, [pc, #16]	; (8102520 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810250e:	5ccb      	ldrb	r3, [r1, r3]
 8102510:	f003 031f 	and.w	r3, r3, #31
 8102514:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8102518:	4618      	mov	r0, r3
 810251a:	bd80      	pop	{r7, pc}
 810251c:	58024400 	.word	0x58024400
 8102520:	08103fa8 	.word	0x08103fa8

08102524 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8102524:	b480      	push	{r7}
 8102526:	b089      	sub	sp, #36	; 0x24
 8102528:	af00      	add	r7, sp, #0
 810252a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810252c:	4ba1      	ldr	r3, [pc, #644]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102530:	f003 0303 	and.w	r3, r3, #3
 8102534:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8102536:	4b9f      	ldr	r3, [pc, #636]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810253a:	0b1b      	lsrs	r3, r3, #12
 810253c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102540:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8102542:	4b9c      	ldr	r3, [pc, #624]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102546:	091b      	lsrs	r3, r3, #4
 8102548:	f003 0301 	and.w	r3, r3, #1
 810254c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810254e:	4b99      	ldr	r3, [pc, #612]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102552:	08db      	lsrs	r3, r3, #3
 8102554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102558:	693a      	ldr	r2, [r7, #16]
 810255a:	fb02 f303 	mul.w	r3, r2, r3
 810255e:	ee07 3a90 	vmov	s15, r3
 8102562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102566:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810256a:	697b      	ldr	r3, [r7, #20]
 810256c:	2b00      	cmp	r3, #0
 810256e:	f000 8111 	beq.w	8102794 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102572:	69bb      	ldr	r3, [r7, #24]
 8102574:	2b02      	cmp	r3, #2
 8102576:	f000 8083 	beq.w	8102680 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810257a:	69bb      	ldr	r3, [r7, #24]
 810257c:	2b02      	cmp	r3, #2
 810257e:	f200 80a1 	bhi.w	81026c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102582:	69bb      	ldr	r3, [r7, #24]
 8102584:	2b00      	cmp	r3, #0
 8102586:	d003      	beq.n	8102590 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8102588:	69bb      	ldr	r3, [r7, #24]
 810258a:	2b01      	cmp	r3, #1
 810258c:	d056      	beq.n	810263c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810258e:	e099      	b.n	81026c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102590:	4b88      	ldr	r3, [pc, #544]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102592:	681b      	ldr	r3, [r3, #0]
 8102594:	f003 0320 	and.w	r3, r3, #32
 8102598:	2b00      	cmp	r3, #0
 810259a:	d02d      	beq.n	81025f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810259c:	4b85      	ldr	r3, [pc, #532]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	08db      	lsrs	r3, r3, #3
 81025a2:	f003 0303 	and.w	r3, r3, #3
 81025a6:	4a84      	ldr	r2, [pc, #528]	; (81027b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81025a8:	fa22 f303 	lsr.w	r3, r2, r3
 81025ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81025ae:	68bb      	ldr	r3, [r7, #8]
 81025b0:	ee07 3a90 	vmov	s15, r3
 81025b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81025b8:	697b      	ldr	r3, [r7, #20]
 81025ba:	ee07 3a90 	vmov	s15, r3
 81025be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81025c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81025c6:	4b7b      	ldr	r3, [pc, #492]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81025ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81025ce:	ee07 3a90 	vmov	s15, r3
 81025d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81025d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81025da:	eddf 5a78 	vldr	s11, [pc, #480]	; 81027bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81025de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81025e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81025e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81025ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81025ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81025f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81025f6:	e087      	b.n	8102708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81025f8:	697b      	ldr	r3, [r7, #20]
 81025fa:	ee07 3a90 	vmov	s15, r3
 81025fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102602:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81027c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8102606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810260a:	4b6a      	ldr	r3, [pc, #424]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810260e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102612:	ee07 3a90 	vmov	s15, r3
 8102616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810261a:	ed97 6a03 	vldr	s12, [r7, #12]
 810261e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81027bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810262a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810262e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102636:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810263a:	e065      	b.n	8102708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810263c:	697b      	ldr	r3, [r7, #20]
 810263e:	ee07 3a90 	vmov	s15, r3
 8102642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102646:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81027c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810264a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810264e:	4b59      	ldr	r3, [pc, #356]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102656:	ee07 3a90 	vmov	s15, r3
 810265a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810265e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102662:	eddf 5a56 	vldr	s11, [pc, #344]	; 81027bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810266a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810266e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102676:	ee67 7a27 	vmul.f32	s15, s14, s15
 810267a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810267e:	e043      	b.n	8102708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102680:	697b      	ldr	r3, [r7, #20]
 8102682:	ee07 3a90 	vmov	s15, r3
 8102686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810268a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81027c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810268e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102692:	4b48      	ldr	r3, [pc, #288]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810269a:	ee07 3a90 	vmov	s15, r3
 810269e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81026a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81026a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 81027bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81026aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81026ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81026b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81026b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81026ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81026be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81026c2:	e021      	b.n	8102708 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81026c4:	697b      	ldr	r3, [r7, #20]
 81026c6:	ee07 3a90 	vmov	s15, r3
 81026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81026ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81027c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81026d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81026d6:	4b37      	ldr	r3, [pc, #220]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81026da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81026de:	ee07 3a90 	vmov	s15, r3
 81026e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81026e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81026ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 81027bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81026ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81026f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81026f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81026fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81026fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102706:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8102708:	4b2a      	ldr	r3, [pc, #168]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810270c:	0a5b      	lsrs	r3, r3, #9
 810270e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102712:	ee07 3a90 	vmov	s15, r3
 8102716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810271a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810271e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102722:	edd7 6a07 	vldr	s13, [r7, #28]
 8102726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810272a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810272e:	ee17 2a90 	vmov	r2, s15
 8102732:	687b      	ldr	r3, [r7, #4]
 8102734:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8102736:	4b1f      	ldr	r3, [pc, #124]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810273a:	0c1b      	lsrs	r3, r3, #16
 810273c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102740:	ee07 3a90 	vmov	s15, r3
 8102744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810274c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102750:	edd7 6a07 	vldr	s13, [r7, #28]
 8102754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810275c:	ee17 2a90 	vmov	r2, s15
 8102760:	687b      	ldr	r3, [r7, #4]
 8102762:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8102764:	4b13      	ldr	r3, [pc, #76]	; (81027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102768:	0e1b      	lsrs	r3, r3, #24
 810276a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810276e:	ee07 3a90 	vmov	s15, r3
 8102772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102776:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810277a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810277e:	edd7 6a07 	vldr	s13, [r7, #28]
 8102782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810278a:	ee17 2a90 	vmov	r2, s15
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102792:	e008      	b.n	81027a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102794:	687b      	ldr	r3, [r7, #4]
 8102796:	2200      	movs	r2, #0
 8102798:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	2200      	movs	r2, #0
 810279e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	2200      	movs	r2, #0
 81027a4:	609a      	str	r2, [r3, #8]
}
 81027a6:	bf00      	nop
 81027a8:	3724      	adds	r7, #36	; 0x24
 81027aa:	46bd      	mov	sp, r7
 81027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027b0:	4770      	bx	lr
 81027b2:	bf00      	nop
 81027b4:	58024400 	.word	0x58024400
 81027b8:	03d09000 	.word	0x03d09000
 81027bc:	46000000 	.word	0x46000000
 81027c0:	4c742400 	.word	0x4c742400
 81027c4:	4a742400 	.word	0x4a742400
 81027c8:	4bbebc20 	.word	0x4bbebc20

081027cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81027cc:	b480      	push	{r7}
 81027ce:	b089      	sub	sp, #36	; 0x24
 81027d0:	af00      	add	r7, sp, #0
 81027d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81027d4:	4ba1      	ldr	r3, [pc, #644]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027d8:	f003 0303 	and.w	r3, r3, #3
 81027dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81027de:	4b9f      	ldr	r3, [pc, #636]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027e2:	0d1b      	lsrs	r3, r3, #20
 81027e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81027e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81027ea:	4b9c      	ldr	r3, [pc, #624]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027ee:	0a1b      	lsrs	r3, r3, #8
 81027f0:	f003 0301 	and.w	r3, r3, #1
 81027f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81027f6:	4b99      	ldr	r3, [pc, #612]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81027fa:	08db      	lsrs	r3, r3, #3
 81027fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102800:	693a      	ldr	r2, [r7, #16]
 8102802:	fb02 f303 	mul.w	r3, r2, r3
 8102806:	ee07 3a90 	vmov	s15, r3
 810280a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810280e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8102812:	697b      	ldr	r3, [r7, #20]
 8102814:	2b00      	cmp	r3, #0
 8102816:	f000 8111 	beq.w	8102a3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810281a:	69bb      	ldr	r3, [r7, #24]
 810281c:	2b02      	cmp	r3, #2
 810281e:	f000 8083 	beq.w	8102928 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8102822:	69bb      	ldr	r3, [r7, #24]
 8102824:	2b02      	cmp	r3, #2
 8102826:	f200 80a1 	bhi.w	810296c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810282a:	69bb      	ldr	r3, [r7, #24]
 810282c:	2b00      	cmp	r3, #0
 810282e:	d003      	beq.n	8102838 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8102830:	69bb      	ldr	r3, [r7, #24]
 8102832:	2b01      	cmp	r3, #1
 8102834:	d056      	beq.n	81028e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8102836:	e099      	b.n	810296c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102838:	4b88      	ldr	r3, [pc, #544]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	f003 0320 	and.w	r3, r3, #32
 8102840:	2b00      	cmp	r3, #0
 8102842:	d02d      	beq.n	81028a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102844:	4b85      	ldr	r3, [pc, #532]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102846:	681b      	ldr	r3, [r3, #0]
 8102848:	08db      	lsrs	r3, r3, #3
 810284a:	f003 0303 	and.w	r3, r3, #3
 810284e:	4a84      	ldr	r2, [pc, #528]	; (8102a60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8102850:	fa22 f303 	lsr.w	r3, r2, r3
 8102854:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102856:	68bb      	ldr	r3, [r7, #8]
 8102858:	ee07 3a90 	vmov	s15, r3
 810285c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102860:	697b      	ldr	r3, [r7, #20]
 8102862:	ee07 3a90 	vmov	s15, r3
 8102866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810286a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810286e:	4b7b      	ldr	r3, [pc, #492]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102876:	ee07 3a90 	vmov	s15, r3
 810287a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810287e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102882:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102a64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810288a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810288e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102896:	ee67 7a27 	vmul.f32	s15, s14, s15
 810289a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810289e:	e087      	b.n	81029b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81028a0:	697b      	ldr	r3, [r7, #20]
 81028a2:	ee07 3a90 	vmov	s15, r3
 81028a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102a68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81028ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028b2:	4b6a      	ldr	r3, [pc, #424]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81028b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028ba:	ee07 3a90 	vmov	s15, r3
 81028be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81028c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102a64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81028ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81028e2:	e065      	b.n	81029b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81028e4:	697b      	ldr	r3, [r7, #20]
 81028e6:	ee07 3a90 	vmov	s15, r3
 81028ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102a6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81028f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028f6:	4b59      	ldr	r3, [pc, #356]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81028fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028fe:	ee07 3a90 	vmov	s15, r3
 8102902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102906:	ed97 6a03 	vldr	s12, [r7, #12]
 810290a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102a64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810290e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810291a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810291e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102922:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102926:	e043      	b.n	81029b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102928:	697b      	ldr	r3, [r7, #20]
 810292a:	ee07 3a90 	vmov	s15, r3
 810292e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102932:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8102a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8102936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810293a:	4b48      	ldr	r3, [pc, #288]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810293e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102942:	ee07 3a90 	vmov	s15, r3
 8102946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810294a:	ed97 6a03 	vldr	s12, [r7, #12]
 810294e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102a64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810295a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810295e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102966:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810296a:	e021      	b.n	81029b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810296c:	697b      	ldr	r3, [r7, #20]
 810296e:	ee07 3a90 	vmov	s15, r3
 8102972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102976:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102a6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810297a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810297e:	4b37      	ldr	r3, [pc, #220]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102986:	ee07 3a90 	vmov	s15, r3
 810298a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810298e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102992:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102a64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810299a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810299e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81029a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81029a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81029aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81029ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81029b0:	4b2a      	ldr	r3, [pc, #168]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81029b4:	0a5b      	lsrs	r3, r3, #9
 81029b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81029ba:	ee07 3a90 	vmov	s15, r3
 81029be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81029c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81029ca:	edd7 6a07 	vldr	s13, [r7, #28]
 81029ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81029d6:	ee17 2a90 	vmov	r2, s15
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81029de:	4b1f      	ldr	r3, [pc, #124]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81029e2:	0c1b      	lsrs	r3, r3, #16
 81029e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81029e8:	ee07 3a90 	vmov	s15, r3
 81029ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81029f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81029f8:	edd7 6a07 	vldr	s13, [r7, #28]
 81029fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a04:	ee17 2a90 	vmov	r2, s15
 8102a08:	687b      	ldr	r3, [r7, #4]
 8102a0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8102a0c:	4b13      	ldr	r3, [pc, #76]	; (8102a5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a10:	0e1b      	lsrs	r3, r3, #24
 8102a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102a16:	ee07 3a90 	vmov	s15, r3
 8102a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102a22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102a26:	edd7 6a07 	vldr	s13, [r7, #28]
 8102a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a32:	ee17 2a90 	vmov	r2, s15
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8102a3a:	e008      	b.n	8102a4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8102a3c:	687b      	ldr	r3, [r7, #4]
 8102a3e:	2200      	movs	r2, #0
 8102a40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8102a42:	687b      	ldr	r3, [r7, #4]
 8102a44:	2200      	movs	r2, #0
 8102a46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	2200      	movs	r2, #0
 8102a4c:	609a      	str	r2, [r3, #8]
}
 8102a4e:	bf00      	nop
 8102a50:	3724      	adds	r7, #36	; 0x24
 8102a52:	46bd      	mov	sp, r7
 8102a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a58:	4770      	bx	lr
 8102a5a:	bf00      	nop
 8102a5c:	58024400 	.word	0x58024400
 8102a60:	03d09000 	.word	0x03d09000
 8102a64:	46000000 	.word	0x46000000
 8102a68:	4c742400 	.word	0x4c742400
 8102a6c:	4a742400 	.word	0x4a742400
 8102a70:	4bbebc20 	.word	0x4bbebc20

08102a74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102a74:	b580      	push	{r7, lr}
 8102a76:	b084      	sub	sp, #16
 8102a78:	af00      	add	r7, sp, #0
 8102a7a:	6078      	str	r0, [r7, #4]
 8102a7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102a7e:	2300      	movs	r3, #0
 8102a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102a82:	4b54      	ldr	r3, [pc, #336]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102a86:	f003 0303 	and.w	r3, r3, #3
 8102a8a:	2b03      	cmp	r3, #3
 8102a8c:	d101      	bne.n	8102a92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102a8e:	2301      	movs	r3, #1
 8102a90:	e09b      	b.n	8102bca <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102a92:	4b50      	ldr	r3, [pc, #320]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	4a4f      	ldr	r2, [pc, #316]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102a98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102a9e:	f7fe f807 	bl	8100ab0 <HAL_GetTick>
 8102aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102aa4:	e008      	b.n	8102ab8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102aa6:	f7fe f803 	bl	8100ab0 <HAL_GetTick>
 8102aaa:	4602      	mov	r2, r0
 8102aac:	68bb      	ldr	r3, [r7, #8]
 8102aae:	1ad3      	subs	r3, r2, r3
 8102ab0:	2b02      	cmp	r3, #2
 8102ab2:	d901      	bls.n	8102ab8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102ab4:	2303      	movs	r3, #3
 8102ab6:	e088      	b.n	8102bca <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102ab8:	4b46      	ldr	r3, [pc, #280]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102aba:	681b      	ldr	r3, [r3, #0]
 8102abc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102ac0:	2b00      	cmp	r3, #0
 8102ac2:	d1f0      	bne.n	8102aa6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102ac4:	4b43      	ldr	r3, [pc, #268]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ac8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102acc:	687b      	ldr	r3, [r7, #4]
 8102ace:	681b      	ldr	r3, [r3, #0]
 8102ad0:	031b      	lsls	r3, r3, #12
 8102ad2:	4940      	ldr	r1, [pc, #256]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102ad4:	4313      	orrs	r3, r2
 8102ad6:	628b      	str	r3, [r1, #40]	; 0x28
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	685b      	ldr	r3, [r3, #4]
 8102adc:	3b01      	subs	r3, #1
 8102ade:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	689b      	ldr	r3, [r3, #8]
 8102ae6:	3b01      	subs	r3, #1
 8102ae8:	025b      	lsls	r3, r3, #9
 8102aea:	b29b      	uxth	r3, r3
 8102aec:	431a      	orrs	r2, r3
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	68db      	ldr	r3, [r3, #12]
 8102af2:	3b01      	subs	r3, #1
 8102af4:	041b      	lsls	r3, r3, #16
 8102af6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102afa:	431a      	orrs	r2, r3
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	691b      	ldr	r3, [r3, #16]
 8102b00:	3b01      	subs	r3, #1
 8102b02:	061b      	lsls	r3, r3, #24
 8102b04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102b08:	4932      	ldr	r1, [pc, #200]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b0a:	4313      	orrs	r3, r2
 8102b0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102b0e:	4b31      	ldr	r3, [pc, #196]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	695b      	ldr	r3, [r3, #20]
 8102b1a:	492e      	ldr	r1, [pc, #184]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b1c:	4313      	orrs	r3, r2
 8102b1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102b20:	4b2c      	ldr	r3, [pc, #176]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b24:	f023 0220 	bic.w	r2, r3, #32
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	699b      	ldr	r3, [r3, #24]
 8102b2c:	4929      	ldr	r1, [pc, #164]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b2e:	4313      	orrs	r3, r2
 8102b30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102b32:	4b28      	ldr	r3, [pc, #160]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b36:	4a27      	ldr	r2, [pc, #156]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b38:	f023 0310 	bic.w	r3, r3, #16
 8102b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102b3e:	4b25      	ldr	r3, [pc, #148]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102b46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102b4a:	687a      	ldr	r2, [r7, #4]
 8102b4c:	69d2      	ldr	r2, [r2, #28]
 8102b4e:	00d2      	lsls	r2, r2, #3
 8102b50:	4920      	ldr	r1, [pc, #128]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b52:	4313      	orrs	r3, r2
 8102b54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102b56:	4b1f      	ldr	r3, [pc, #124]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b5a:	4a1e      	ldr	r2, [pc, #120]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b5c:	f043 0310 	orr.w	r3, r3, #16
 8102b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102b62:	683b      	ldr	r3, [r7, #0]
 8102b64:	2b00      	cmp	r3, #0
 8102b66:	d106      	bne.n	8102b76 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102b68:	4b1a      	ldr	r3, [pc, #104]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b6c:	4a19      	ldr	r2, [pc, #100]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102b74:	e00f      	b.n	8102b96 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102b76:	683b      	ldr	r3, [r7, #0]
 8102b78:	2b01      	cmp	r3, #1
 8102b7a:	d106      	bne.n	8102b8a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102b7c:	4b15      	ldr	r3, [pc, #84]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b80:	4a14      	ldr	r2, [pc, #80]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102b88:	e005      	b.n	8102b96 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8102b8a:	4b12      	ldr	r3, [pc, #72]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b8e:	4a11      	ldr	r2, [pc, #68]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102b96:	4b0f      	ldr	r3, [pc, #60]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b98:	681b      	ldr	r3, [r3, #0]
 8102b9a:	4a0e      	ldr	r2, [pc, #56]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102b9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102ba2:	f7fd ff85 	bl	8100ab0 <HAL_GetTick>
 8102ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102ba8:	e008      	b.n	8102bbc <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102baa:	f7fd ff81 	bl	8100ab0 <HAL_GetTick>
 8102bae:	4602      	mov	r2, r0
 8102bb0:	68bb      	ldr	r3, [r7, #8]
 8102bb2:	1ad3      	subs	r3, r2, r3
 8102bb4:	2b02      	cmp	r3, #2
 8102bb6:	d901      	bls.n	8102bbc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102bb8:	2303      	movs	r3, #3
 8102bba:	e006      	b.n	8102bca <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102bbc:	4b05      	ldr	r3, [pc, #20]	; (8102bd4 <RCCEx_PLL2_Config+0x160>)
 8102bbe:	681b      	ldr	r3, [r3, #0]
 8102bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102bc4:	2b00      	cmp	r3, #0
 8102bc6:	d0f0      	beq.n	8102baa <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8102bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8102bca:	4618      	mov	r0, r3
 8102bcc:	3710      	adds	r7, #16
 8102bce:	46bd      	mov	sp, r7
 8102bd0:	bd80      	pop	{r7, pc}
 8102bd2:	bf00      	nop
 8102bd4:	58024400 	.word	0x58024400

08102bd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102bd8:	b580      	push	{r7, lr}
 8102bda:	b084      	sub	sp, #16
 8102bdc:	af00      	add	r7, sp, #0
 8102bde:	6078      	str	r0, [r7, #4]
 8102be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102be2:	2300      	movs	r3, #0
 8102be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102be6:	4b54      	ldr	r3, [pc, #336]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102bea:	f003 0303 	and.w	r3, r3, #3
 8102bee:	2b03      	cmp	r3, #3
 8102bf0:	d101      	bne.n	8102bf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102bf2:	2301      	movs	r3, #1
 8102bf4:	e09b      	b.n	8102d2e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102bf6:	4b50      	ldr	r3, [pc, #320]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102bf8:	681b      	ldr	r3, [r3, #0]
 8102bfa:	4a4f      	ldr	r2, [pc, #316]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102c00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102c02:	f7fd ff55 	bl	8100ab0 <HAL_GetTick>
 8102c06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102c08:	e008      	b.n	8102c1c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102c0a:	f7fd ff51 	bl	8100ab0 <HAL_GetTick>
 8102c0e:	4602      	mov	r2, r0
 8102c10:	68bb      	ldr	r3, [r7, #8]
 8102c12:	1ad3      	subs	r3, r2, r3
 8102c14:	2b02      	cmp	r3, #2
 8102c16:	d901      	bls.n	8102c1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102c18:	2303      	movs	r3, #3
 8102c1a:	e088      	b.n	8102d2e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102c1c:	4b46      	ldr	r3, [pc, #280]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102c1e:	681b      	ldr	r3, [r3, #0]
 8102c20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102c24:	2b00      	cmp	r3, #0
 8102c26:	d1f0      	bne.n	8102c0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102c28:	4b43      	ldr	r3, [pc, #268]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	681b      	ldr	r3, [r3, #0]
 8102c34:	051b      	lsls	r3, r3, #20
 8102c36:	4940      	ldr	r1, [pc, #256]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102c38:	4313      	orrs	r3, r2
 8102c3a:	628b      	str	r3, [r1, #40]	; 0x28
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	685b      	ldr	r3, [r3, #4]
 8102c40:	3b01      	subs	r3, #1
 8102c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102c46:	687b      	ldr	r3, [r7, #4]
 8102c48:	689b      	ldr	r3, [r3, #8]
 8102c4a:	3b01      	subs	r3, #1
 8102c4c:	025b      	lsls	r3, r3, #9
 8102c4e:	b29b      	uxth	r3, r3
 8102c50:	431a      	orrs	r2, r3
 8102c52:	687b      	ldr	r3, [r7, #4]
 8102c54:	68db      	ldr	r3, [r3, #12]
 8102c56:	3b01      	subs	r3, #1
 8102c58:	041b      	lsls	r3, r3, #16
 8102c5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102c5e:	431a      	orrs	r2, r3
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	691b      	ldr	r3, [r3, #16]
 8102c64:	3b01      	subs	r3, #1
 8102c66:	061b      	lsls	r3, r3, #24
 8102c68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102c6c:	4932      	ldr	r1, [pc, #200]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102c6e:	4313      	orrs	r3, r2
 8102c70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102c72:	4b31      	ldr	r3, [pc, #196]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8102c7a:	687b      	ldr	r3, [r7, #4]
 8102c7c:	695b      	ldr	r3, [r3, #20]
 8102c7e:	492e      	ldr	r1, [pc, #184]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102c80:	4313      	orrs	r3, r2
 8102c82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102c84:	4b2c      	ldr	r3, [pc, #176]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8102c8c:	687b      	ldr	r3, [r7, #4]
 8102c8e:	699b      	ldr	r3, [r3, #24]
 8102c90:	4929      	ldr	r1, [pc, #164]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102c92:	4313      	orrs	r3, r2
 8102c94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102c96:	4b28      	ldr	r3, [pc, #160]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c9a:	4a27      	ldr	r2, [pc, #156]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102ca2:	4b25      	ldr	r3, [pc, #148]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102caa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102cae:	687a      	ldr	r2, [r7, #4]
 8102cb0:	69d2      	ldr	r2, [r2, #28]
 8102cb2:	00d2      	lsls	r2, r2, #3
 8102cb4:	4920      	ldr	r1, [pc, #128]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102cb6:	4313      	orrs	r3, r2
 8102cb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8102cba:	4b1f      	ldr	r3, [pc, #124]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cbe:	4a1e      	ldr	r2, [pc, #120]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102cc6:	683b      	ldr	r3, [r7, #0]
 8102cc8:	2b00      	cmp	r3, #0
 8102cca:	d106      	bne.n	8102cda <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8102ccc:	4b1a      	ldr	r3, [pc, #104]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cd0:	4a19      	ldr	r2, [pc, #100]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102cd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102cd8:	e00f      	b.n	8102cfa <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102cda:	683b      	ldr	r3, [r7, #0]
 8102cdc:	2b01      	cmp	r3, #1
 8102cde:	d106      	bne.n	8102cee <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102ce0:	4b15      	ldr	r3, [pc, #84]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ce4:	4a14      	ldr	r2, [pc, #80]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102ce6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102cea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102cec:	e005      	b.n	8102cfa <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8102cee:	4b12      	ldr	r3, [pc, #72]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cf2:	4a11      	ldr	r2, [pc, #68]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102cf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102cf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8102cfa:	4b0f      	ldr	r3, [pc, #60]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	4a0e      	ldr	r2, [pc, #56]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102d06:	f7fd fed3 	bl	8100ab0 <HAL_GetTick>
 8102d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102d0c:	e008      	b.n	8102d20 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102d0e:	f7fd fecf 	bl	8100ab0 <HAL_GetTick>
 8102d12:	4602      	mov	r2, r0
 8102d14:	68bb      	ldr	r3, [r7, #8]
 8102d16:	1ad3      	subs	r3, r2, r3
 8102d18:	2b02      	cmp	r3, #2
 8102d1a:	d901      	bls.n	8102d20 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102d1c:	2303      	movs	r3, #3
 8102d1e:	e006      	b.n	8102d2e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102d20:	4b05      	ldr	r3, [pc, #20]	; (8102d38 <RCCEx_PLL3_Config+0x160>)
 8102d22:	681b      	ldr	r3, [r3, #0]
 8102d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102d28:	2b00      	cmp	r3, #0
 8102d2a:	d0f0      	beq.n	8102d0e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8102d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8102d2e:	4618      	mov	r0, r3
 8102d30:	3710      	adds	r7, #16
 8102d32:	46bd      	mov	sp, r7
 8102d34:	bd80      	pop	{r7, pc}
 8102d36:	bf00      	nop
 8102d38:	58024400 	.word	0x58024400

08102d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8102d3c:	b580      	push	{r7, lr}
 8102d3e:	b082      	sub	sp, #8
 8102d40:	af00      	add	r7, sp, #0
 8102d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	2b00      	cmp	r3, #0
 8102d48:	d101      	bne.n	8102d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8102d4a:	2301      	movs	r3, #1
 8102d4c:	e042      	b.n	8102dd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8102d4e:	687b      	ldr	r3, [r7, #4]
 8102d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102d54:	2b00      	cmp	r3, #0
 8102d56:	d106      	bne.n	8102d66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8102d58:	687b      	ldr	r3, [r7, #4]
 8102d5a:	2200      	movs	r2, #0
 8102d5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8102d60:	6878      	ldr	r0, [r7, #4]
 8102d62:	f7fd fd6d 	bl	8100840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	2224      	movs	r2, #36	; 0x24
 8102d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	681b      	ldr	r3, [r3, #0]
 8102d72:	681a      	ldr	r2, [r3, #0]
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	f022 0201 	bic.w	r2, r2, #1
 8102d7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8102d7e:	6878      	ldr	r0, [r7, #4]
 8102d80:	f000 f8c2 	bl	8102f08 <UART_SetConfig>
 8102d84:	4603      	mov	r3, r0
 8102d86:	2b01      	cmp	r3, #1
 8102d88:	d101      	bne.n	8102d8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8102d8a:	2301      	movs	r3, #1
 8102d8c:	e022      	b.n	8102dd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8102d8e:	687b      	ldr	r3, [r7, #4]
 8102d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102d92:	2b00      	cmp	r3, #0
 8102d94:	d002      	beq.n	8102d9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8102d96:	6878      	ldr	r0, [r7, #4]
 8102d98:	f000 fe16 	bl	81039c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	685a      	ldr	r2, [r3, #4]
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8102daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8102dac:	687b      	ldr	r3, [r7, #4]
 8102dae:	681b      	ldr	r3, [r3, #0]
 8102db0:	689a      	ldr	r2, [r3, #8]
 8102db2:	687b      	ldr	r3, [r7, #4]
 8102db4:	681b      	ldr	r3, [r3, #0]
 8102db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8102dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8102dbc:	687b      	ldr	r3, [r7, #4]
 8102dbe:	681b      	ldr	r3, [r3, #0]
 8102dc0:	681a      	ldr	r2, [r3, #0]
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	681b      	ldr	r3, [r3, #0]
 8102dc6:	f042 0201 	orr.w	r2, r2, #1
 8102dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8102dcc:	6878      	ldr	r0, [r7, #4]
 8102dce:	f000 fe9d 	bl	8103b0c <UART_CheckIdleState>
 8102dd2:	4603      	mov	r3, r0
}
 8102dd4:	4618      	mov	r0, r3
 8102dd6:	3708      	adds	r7, #8
 8102dd8:	46bd      	mov	sp, r7
 8102dda:	bd80      	pop	{r7, pc}

08102ddc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102ddc:	b580      	push	{r7, lr}
 8102dde:	b08a      	sub	sp, #40	; 0x28
 8102de0:	af02      	add	r7, sp, #8
 8102de2:	60f8      	str	r0, [r7, #12]
 8102de4:	60b9      	str	r1, [r7, #8]
 8102de6:	603b      	str	r3, [r7, #0]
 8102de8:	4613      	mov	r3, r2
 8102dea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8102dec:	68fb      	ldr	r3, [r7, #12]
 8102dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102df2:	2b20      	cmp	r3, #32
 8102df4:	f040 8083 	bne.w	8102efe <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8102df8:	68bb      	ldr	r3, [r7, #8]
 8102dfa:	2b00      	cmp	r3, #0
 8102dfc:	d002      	beq.n	8102e04 <HAL_UART_Transmit+0x28>
 8102dfe:	88fb      	ldrh	r3, [r7, #6]
 8102e00:	2b00      	cmp	r3, #0
 8102e02:	d101      	bne.n	8102e08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8102e04:	2301      	movs	r3, #1
 8102e06:	e07b      	b.n	8102f00 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8102e08:	68fb      	ldr	r3, [r7, #12]
 8102e0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8102e0e:	2b01      	cmp	r3, #1
 8102e10:	d101      	bne.n	8102e16 <HAL_UART_Transmit+0x3a>
 8102e12:	2302      	movs	r3, #2
 8102e14:	e074      	b.n	8102f00 <HAL_UART_Transmit+0x124>
 8102e16:	68fb      	ldr	r3, [r7, #12]
 8102e18:	2201      	movs	r2, #1
 8102e1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8102e1e:	68fb      	ldr	r3, [r7, #12]
 8102e20:	2200      	movs	r2, #0
 8102e22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8102e26:	68fb      	ldr	r3, [r7, #12]
 8102e28:	2221      	movs	r2, #33	; 0x21
 8102e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8102e2e:	f7fd fe3f 	bl	8100ab0 <HAL_GetTick>
 8102e32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8102e34:	68fb      	ldr	r3, [r7, #12]
 8102e36:	88fa      	ldrh	r2, [r7, #6]
 8102e38:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8102e3c:	68fb      	ldr	r3, [r7, #12]
 8102e3e:	88fa      	ldrh	r2, [r7, #6]
 8102e40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8102e44:	68fb      	ldr	r3, [r7, #12]
 8102e46:	689b      	ldr	r3, [r3, #8]
 8102e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102e4c:	d108      	bne.n	8102e60 <HAL_UART_Transmit+0x84>
 8102e4e:	68fb      	ldr	r3, [r7, #12]
 8102e50:	691b      	ldr	r3, [r3, #16]
 8102e52:	2b00      	cmp	r3, #0
 8102e54:	d104      	bne.n	8102e60 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8102e56:	2300      	movs	r3, #0
 8102e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8102e5a:	68bb      	ldr	r3, [r7, #8]
 8102e5c:	61bb      	str	r3, [r7, #24]
 8102e5e:	e003      	b.n	8102e68 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8102e60:	68bb      	ldr	r3, [r7, #8]
 8102e62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8102e64:	2300      	movs	r3, #0
 8102e66:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8102e68:	68fb      	ldr	r3, [r7, #12]
 8102e6a:	2200      	movs	r2, #0
 8102e6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8102e70:	e02c      	b.n	8102ecc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8102e72:	683b      	ldr	r3, [r7, #0]
 8102e74:	9300      	str	r3, [sp, #0]
 8102e76:	697b      	ldr	r3, [r7, #20]
 8102e78:	2200      	movs	r2, #0
 8102e7a:	2180      	movs	r1, #128	; 0x80
 8102e7c:	68f8      	ldr	r0, [r7, #12]
 8102e7e:	f000 fe90 	bl	8103ba2 <UART_WaitOnFlagUntilTimeout>
 8102e82:	4603      	mov	r3, r0
 8102e84:	2b00      	cmp	r3, #0
 8102e86:	d001      	beq.n	8102e8c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8102e88:	2303      	movs	r3, #3
 8102e8a:	e039      	b.n	8102f00 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8102e8c:	69fb      	ldr	r3, [r7, #28]
 8102e8e:	2b00      	cmp	r3, #0
 8102e90:	d10b      	bne.n	8102eaa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8102e92:	69bb      	ldr	r3, [r7, #24]
 8102e94:	881b      	ldrh	r3, [r3, #0]
 8102e96:	461a      	mov	r2, r3
 8102e98:	68fb      	ldr	r3, [r7, #12]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8102ea0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8102ea2:	69bb      	ldr	r3, [r7, #24]
 8102ea4:	3302      	adds	r3, #2
 8102ea6:	61bb      	str	r3, [r7, #24]
 8102ea8:	e007      	b.n	8102eba <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8102eaa:	69fb      	ldr	r3, [r7, #28]
 8102eac:	781a      	ldrb	r2, [r3, #0]
 8102eae:	68fb      	ldr	r3, [r7, #12]
 8102eb0:	681b      	ldr	r3, [r3, #0]
 8102eb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8102eb4:	69fb      	ldr	r3, [r7, #28]
 8102eb6:	3301      	adds	r3, #1
 8102eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8102eba:	68fb      	ldr	r3, [r7, #12]
 8102ebc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8102ec0:	b29b      	uxth	r3, r3
 8102ec2:	3b01      	subs	r3, #1
 8102ec4:	b29a      	uxth	r2, r3
 8102ec6:	68fb      	ldr	r3, [r7, #12]
 8102ec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8102ecc:	68fb      	ldr	r3, [r7, #12]
 8102ece:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8102ed2:	b29b      	uxth	r3, r3
 8102ed4:	2b00      	cmp	r3, #0
 8102ed6:	d1cc      	bne.n	8102e72 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8102ed8:	683b      	ldr	r3, [r7, #0]
 8102eda:	9300      	str	r3, [sp, #0]
 8102edc:	697b      	ldr	r3, [r7, #20]
 8102ede:	2200      	movs	r2, #0
 8102ee0:	2140      	movs	r1, #64	; 0x40
 8102ee2:	68f8      	ldr	r0, [r7, #12]
 8102ee4:	f000 fe5d 	bl	8103ba2 <UART_WaitOnFlagUntilTimeout>
 8102ee8:	4603      	mov	r3, r0
 8102eea:	2b00      	cmp	r3, #0
 8102eec:	d001      	beq.n	8102ef2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8102eee:	2303      	movs	r3, #3
 8102ef0:	e006      	b.n	8102f00 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8102ef2:	68fb      	ldr	r3, [r7, #12]
 8102ef4:	2220      	movs	r2, #32
 8102ef6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8102efa:	2300      	movs	r3, #0
 8102efc:	e000      	b.n	8102f00 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8102efe:	2302      	movs	r3, #2
  }
}
 8102f00:	4618      	mov	r0, r3
 8102f02:	3720      	adds	r7, #32
 8102f04:	46bd      	mov	sp, r7
 8102f06:	bd80      	pop	{r7, pc}

08102f08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8102f08:	b5b0      	push	{r4, r5, r7, lr}
 8102f0a:	b08e      	sub	sp, #56	; 0x38
 8102f0c:	af00      	add	r7, sp, #0
 8102f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8102f10:	2300      	movs	r3, #0
 8102f12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	689a      	ldr	r2, [r3, #8]
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	691b      	ldr	r3, [r3, #16]
 8102f1e:	431a      	orrs	r2, r3
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	695b      	ldr	r3, [r3, #20]
 8102f24:	431a      	orrs	r2, r3
 8102f26:	687b      	ldr	r3, [r7, #4]
 8102f28:	69db      	ldr	r3, [r3, #28]
 8102f2a:	4313      	orrs	r3, r2
 8102f2c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	681b      	ldr	r3, [r3, #0]
 8102f32:	681a      	ldr	r2, [r3, #0]
 8102f34:	4bc0      	ldr	r3, [pc, #768]	; (8103238 <UART_SetConfig+0x330>)
 8102f36:	4013      	ands	r3, r2
 8102f38:	687a      	ldr	r2, [r7, #4]
 8102f3a:	6812      	ldr	r2, [r2, #0]
 8102f3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8102f3e:	430b      	orrs	r3, r1
 8102f40:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	685b      	ldr	r3, [r3, #4]
 8102f48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8102f4c:	687b      	ldr	r3, [r7, #4]
 8102f4e:	68da      	ldr	r2, [r3, #12]
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	681b      	ldr	r3, [r3, #0]
 8102f54:	430a      	orrs	r2, r1
 8102f56:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	699b      	ldr	r3, [r3, #24]
 8102f5c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	4ab6      	ldr	r2, [pc, #728]	; (810323c <UART_SetConfig+0x334>)
 8102f64:	4293      	cmp	r3, r2
 8102f66:	d004      	beq.n	8102f72 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	6a1b      	ldr	r3, [r3, #32]
 8102f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102f6e:	4313      	orrs	r3, r2
 8102f70:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	689b      	ldr	r3, [r3, #8]
 8102f78:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8102f7c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8102f80:	687a      	ldr	r2, [r7, #4]
 8102f82:	6812      	ldr	r2, [r2, #0]
 8102f84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8102f86:	430b      	orrs	r3, r1
 8102f88:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	681b      	ldr	r3, [r3, #0]
 8102f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f90:	f023 010f 	bic.w	r1, r3, #15
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	681b      	ldr	r3, [r3, #0]
 8102f9c:	430a      	orrs	r2, r1
 8102f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	4aa6      	ldr	r2, [pc, #664]	; (8103240 <UART_SetConfig+0x338>)
 8102fa6:	4293      	cmp	r3, r2
 8102fa8:	d176      	bne.n	8103098 <UART_SetConfig+0x190>
 8102faa:	4ba6      	ldr	r3, [pc, #664]	; (8103244 <UART_SetConfig+0x33c>)
 8102fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102fb2:	2b28      	cmp	r3, #40	; 0x28
 8102fb4:	d86c      	bhi.n	8103090 <UART_SetConfig+0x188>
 8102fb6:	a201      	add	r2, pc, #4	; (adr r2, 8102fbc <UART_SetConfig+0xb4>)
 8102fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102fbc:	08103061 	.word	0x08103061
 8102fc0:	08103091 	.word	0x08103091
 8102fc4:	08103091 	.word	0x08103091
 8102fc8:	08103091 	.word	0x08103091
 8102fcc:	08103091 	.word	0x08103091
 8102fd0:	08103091 	.word	0x08103091
 8102fd4:	08103091 	.word	0x08103091
 8102fd8:	08103091 	.word	0x08103091
 8102fdc:	08103069 	.word	0x08103069
 8102fe0:	08103091 	.word	0x08103091
 8102fe4:	08103091 	.word	0x08103091
 8102fe8:	08103091 	.word	0x08103091
 8102fec:	08103091 	.word	0x08103091
 8102ff0:	08103091 	.word	0x08103091
 8102ff4:	08103091 	.word	0x08103091
 8102ff8:	08103091 	.word	0x08103091
 8102ffc:	08103071 	.word	0x08103071
 8103000:	08103091 	.word	0x08103091
 8103004:	08103091 	.word	0x08103091
 8103008:	08103091 	.word	0x08103091
 810300c:	08103091 	.word	0x08103091
 8103010:	08103091 	.word	0x08103091
 8103014:	08103091 	.word	0x08103091
 8103018:	08103091 	.word	0x08103091
 810301c:	08103079 	.word	0x08103079
 8103020:	08103091 	.word	0x08103091
 8103024:	08103091 	.word	0x08103091
 8103028:	08103091 	.word	0x08103091
 810302c:	08103091 	.word	0x08103091
 8103030:	08103091 	.word	0x08103091
 8103034:	08103091 	.word	0x08103091
 8103038:	08103091 	.word	0x08103091
 810303c:	08103081 	.word	0x08103081
 8103040:	08103091 	.word	0x08103091
 8103044:	08103091 	.word	0x08103091
 8103048:	08103091 	.word	0x08103091
 810304c:	08103091 	.word	0x08103091
 8103050:	08103091 	.word	0x08103091
 8103054:	08103091 	.word	0x08103091
 8103058:	08103091 	.word	0x08103091
 810305c:	08103089 	.word	0x08103089
 8103060:	2301      	movs	r3, #1
 8103062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103066:	e220      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103068:	2304      	movs	r3, #4
 810306a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810306e:	e21c      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103070:	2308      	movs	r3, #8
 8103072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103076:	e218      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103078:	2310      	movs	r3, #16
 810307a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810307e:	e214      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103080:	2320      	movs	r3, #32
 8103082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103086:	e210      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103088:	2340      	movs	r3, #64	; 0x40
 810308a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810308e:	e20c      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103090:	2380      	movs	r3, #128	; 0x80
 8103092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103096:	e208      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	4a6a      	ldr	r2, [pc, #424]	; (8103248 <UART_SetConfig+0x340>)
 810309e:	4293      	cmp	r3, r2
 81030a0:	d130      	bne.n	8103104 <UART_SetConfig+0x1fc>
 81030a2:	4b68      	ldr	r3, [pc, #416]	; (8103244 <UART_SetConfig+0x33c>)
 81030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030a6:	f003 0307 	and.w	r3, r3, #7
 81030aa:	2b05      	cmp	r3, #5
 81030ac:	d826      	bhi.n	81030fc <UART_SetConfig+0x1f4>
 81030ae:	a201      	add	r2, pc, #4	; (adr r2, 81030b4 <UART_SetConfig+0x1ac>)
 81030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81030b4:	081030cd 	.word	0x081030cd
 81030b8:	081030d5 	.word	0x081030d5
 81030bc:	081030dd 	.word	0x081030dd
 81030c0:	081030e5 	.word	0x081030e5
 81030c4:	081030ed 	.word	0x081030ed
 81030c8:	081030f5 	.word	0x081030f5
 81030cc:	2300      	movs	r3, #0
 81030ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030d2:	e1ea      	b.n	81034aa <UART_SetConfig+0x5a2>
 81030d4:	2304      	movs	r3, #4
 81030d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030da:	e1e6      	b.n	81034aa <UART_SetConfig+0x5a2>
 81030dc:	2308      	movs	r3, #8
 81030de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030e2:	e1e2      	b.n	81034aa <UART_SetConfig+0x5a2>
 81030e4:	2310      	movs	r3, #16
 81030e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030ea:	e1de      	b.n	81034aa <UART_SetConfig+0x5a2>
 81030ec:	2320      	movs	r3, #32
 81030ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030f2:	e1da      	b.n	81034aa <UART_SetConfig+0x5a2>
 81030f4:	2340      	movs	r3, #64	; 0x40
 81030f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030fa:	e1d6      	b.n	81034aa <UART_SetConfig+0x5a2>
 81030fc:	2380      	movs	r3, #128	; 0x80
 81030fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103102:	e1d2      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103104:	687b      	ldr	r3, [r7, #4]
 8103106:	681b      	ldr	r3, [r3, #0]
 8103108:	4a50      	ldr	r2, [pc, #320]	; (810324c <UART_SetConfig+0x344>)
 810310a:	4293      	cmp	r3, r2
 810310c:	d130      	bne.n	8103170 <UART_SetConfig+0x268>
 810310e:	4b4d      	ldr	r3, [pc, #308]	; (8103244 <UART_SetConfig+0x33c>)
 8103110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103112:	f003 0307 	and.w	r3, r3, #7
 8103116:	2b05      	cmp	r3, #5
 8103118:	d826      	bhi.n	8103168 <UART_SetConfig+0x260>
 810311a:	a201      	add	r2, pc, #4	; (adr r2, 8103120 <UART_SetConfig+0x218>)
 810311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103120:	08103139 	.word	0x08103139
 8103124:	08103141 	.word	0x08103141
 8103128:	08103149 	.word	0x08103149
 810312c:	08103151 	.word	0x08103151
 8103130:	08103159 	.word	0x08103159
 8103134:	08103161 	.word	0x08103161
 8103138:	2300      	movs	r3, #0
 810313a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810313e:	e1b4      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103140:	2304      	movs	r3, #4
 8103142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103146:	e1b0      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103148:	2308      	movs	r3, #8
 810314a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810314e:	e1ac      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103150:	2310      	movs	r3, #16
 8103152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103156:	e1a8      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103158:	2320      	movs	r3, #32
 810315a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810315e:	e1a4      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103160:	2340      	movs	r3, #64	; 0x40
 8103162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103166:	e1a0      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103168:	2380      	movs	r3, #128	; 0x80
 810316a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810316e:	e19c      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	4a36      	ldr	r2, [pc, #216]	; (8103250 <UART_SetConfig+0x348>)
 8103176:	4293      	cmp	r3, r2
 8103178:	d130      	bne.n	81031dc <UART_SetConfig+0x2d4>
 810317a:	4b32      	ldr	r3, [pc, #200]	; (8103244 <UART_SetConfig+0x33c>)
 810317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810317e:	f003 0307 	and.w	r3, r3, #7
 8103182:	2b05      	cmp	r3, #5
 8103184:	d826      	bhi.n	81031d4 <UART_SetConfig+0x2cc>
 8103186:	a201      	add	r2, pc, #4	; (adr r2, 810318c <UART_SetConfig+0x284>)
 8103188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810318c:	081031a5 	.word	0x081031a5
 8103190:	081031ad 	.word	0x081031ad
 8103194:	081031b5 	.word	0x081031b5
 8103198:	081031bd 	.word	0x081031bd
 810319c:	081031c5 	.word	0x081031c5
 81031a0:	081031cd 	.word	0x081031cd
 81031a4:	2300      	movs	r3, #0
 81031a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031aa:	e17e      	b.n	81034aa <UART_SetConfig+0x5a2>
 81031ac:	2304      	movs	r3, #4
 81031ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031b2:	e17a      	b.n	81034aa <UART_SetConfig+0x5a2>
 81031b4:	2308      	movs	r3, #8
 81031b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031ba:	e176      	b.n	81034aa <UART_SetConfig+0x5a2>
 81031bc:	2310      	movs	r3, #16
 81031be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031c2:	e172      	b.n	81034aa <UART_SetConfig+0x5a2>
 81031c4:	2320      	movs	r3, #32
 81031c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031ca:	e16e      	b.n	81034aa <UART_SetConfig+0x5a2>
 81031cc:	2340      	movs	r3, #64	; 0x40
 81031ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031d2:	e16a      	b.n	81034aa <UART_SetConfig+0x5a2>
 81031d4:	2380      	movs	r3, #128	; 0x80
 81031d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031da:	e166      	b.n	81034aa <UART_SetConfig+0x5a2>
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	681b      	ldr	r3, [r3, #0]
 81031e0:	4a1c      	ldr	r2, [pc, #112]	; (8103254 <UART_SetConfig+0x34c>)
 81031e2:	4293      	cmp	r3, r2
 81031e4:	d140      	bne.n	8103268 <UART_SetConfig+0x360>
 81031e6:	4b17      	ldr	r3, [pc, #92]	; (8103244 <UART_SetConfig+0x33c>)
 81031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031ea:	f003 0307 	and.w	r3, r3, #7
 81031ee:	2b05      	cmp	r3, #5
 81031f0:	d836      	bhi.n	8103260 <UART_SetConfig+0x358>
 81031f2:	a201      	add	r2, pc, #4	; (adr r2, 81031f8 <UART_SetConfig+0x2f0>)
 81031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031f8:	08103211 	.word	0x08103211
 81031fc:	08103219 	.word	0x08103219
 8103200:	08103221 	.word	0x08103221
 8103204:	08103229 	.word	0x08103229
 8103208:	08103231 	.word	0x08103231
 810320c:	08103259 	.word	0x08103259
 8103210:	2300      	movs	r3, #0
 8103212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103216:	e148      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103218:	2304      	movs	r3, #4
 810321a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810321e:	e144      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103220:	2308      	movs	r3, #8
 8103222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103226:	e140      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103228:	2310      	movs	r3, #16
 810322a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810322e:	e13c      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103230:	2320      	movs	r3, #32
 8103232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103236:	e138      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103238:	cfff69f3 	.word	0xcfff69f3
 810323c:	58000c00 	.word	0x58000c00
 8103240:	40011000 	.word	0x40011000
 8103244:	58024400 	.word	0x58024400
 8103248:	40004400 	.word	0x40004400
 810324c:	40004800 	.word	0x40004800
 8103250:	40004c00 	.word	0x40004c00
 8103254:	40005000 	.word	0x40005000
 8103258:	2340      	movs	r3, #64	; 0x40
 810325a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810325e:	e124      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103260:	2380      	movs	r3, #128	; 0x80
 8103262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103266:	e120      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	681b      	ldr	r3, [r3, #0]
 810326c:	4acc      	ldr	r2, [pc, #816]	; (81035a0 <UART_SetConfig+0x698>)
 810326e:	4293      	cmp	r3, r2
 8103270:	d176      	bne.n	8103360 <UART_SetConfig+0x458>
 8103272:	4bcc      	ldr	r3, [pc, #816]	; (81035a4 <UART_SetConfig+0x69c>)
 8103274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810327a:	2b28      	cmp	r3, #40	; 0x28
 810327c:	d86c      	bhi.n	8103358 <UART_SetConfig+0x450>
 810327e:	a201      	add	r2, pc, #4	; (adr r2, 8103284 <UART_SetConfig+0x37c>)
 8103280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103284:	08103329 	.word	0x08103329
 8103288:	08103359 	.word	0x08103359
 810328c:	08103359 	.word	0x08103359
 8103290:	08103359 	.word	0x08103359
 8103294:	08103359 	.word	0x08103359
 8103298:	08103359 	.word	0x08103359
 810329c:	08103359 	.word	0x08103359
 81032a0:	08103359 	.word	0x08103359
 81032a4:	08103331 	.word	0x08103331
 81032a8:	08103359 	.word	0x08103359
 81032ac:	08103359 	.word	0x08103359
 81032b0:	08103359 	.word	0x08103359
 81032b4:	08103359 	.word	0x08103359
 81032b8:	08103359 	.word	0x08103359
 81032bc:	08103359 	.word	0x08103359
 81032c0:	08103359 	.word	0x08103359
 81032c4:	08103339 	.word	0x08103339
 81032c8:	08103359 	.word	0x08103359
 81032cc:	08103359 	.word	0x08103359
 81032d0:	08103359 	.word	0x08103359
 81032d4:	08103359 	.word	0x08103359
 81032d8:	08103359 	.word	0x08103359
 81032dc:	08103359 	.word	0x08103359
 81032e0:	08103359 	.word	0x08103359
 81032e4:	08103341 	.word	0x08103341
 81032e8:	08103359 	.word	0x08103359
 81032ec:	08103359 	.word	0x08103359
 81032f0:	08103359 	.word	0x08103359
 81032f4:	08103359 	.word	0x08103359
 81032f8:	08103359 	.word	0x08103359
 81032fc:	08103359 	.word	0x08103359
 8103300:	08103359 	.word	0x08103359
 8103304:	08103349 	.word	0x08103349
 8103308:	08103359 	.word	0x08103359
 810330c:	08103359 	.word	0x08103359
 8103310:	08103359 	.word	0x08103359
 8103314:	08103359 	.word	0x08103359
 8103318:	08103359 	.word	0x08103359
 810331c:	08103359 	.word	0x08103359
 8103320:	08103359 	.word	0x08103359
 8103324:	08103351 	.word	0x08103351
 8103328:	2301      	movs	r3, #1
 810332a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810332e:	e0bc      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103330:	2304      	movs	r3, #4
 8103332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103336:	e0b8      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103338:	2308      	movs	r3, #8
 810333a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810333e:	e0b4      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103340:	2310      	movs	r3, #16
 8103342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103346:	e0b0      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103348:	2320      	movs	r3, #32
 810334a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810334e:	e0ac      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103350:	2340      	movs	r3, #64	; 0x40
 8103352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103356:	e0a8      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103358:	2380      	movs	r3, #128	; 0x80
 810335a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810335e:	e0a4      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103360:	687b      	ldr	r3, [r7, #4]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	4a90      	ldr	r2, [pc, #576]	; (81035a8 <UART_SetConfig+0x6a0>)
 8103366:	4293      	cmp	r3, r2
 8103368:	d130      	bne.n	81033cc <UART_SetConfig+0x4c4>
 810336a:	4b8e      	ldr	r3, [pc, #568]	; (81035a4 <UART_SetConfig+0x69c>)
 810336c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810336e:	f003 0307 	and.w	r3, r3, #7
 8103372:	2b05      	cmp	r3, #5
 8103374:	d826      	bhi.n	81033c4 <UART_SetConfig+0x4bc>
 8103376:	a201      	add	r2, pc, #4	; (adr r2, 810337c <UART_SetConfig+0x474>)
 8103378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810337c:	08103395 	.word	0x08103395
 8103380:	0810339d 	.word	0x0810339d
 8103384:	081033a5 	.word	0x081033a5
 8103388:	081033ad 	.word	0x081033ad
 810338c:	081033b5 	.word	0x081033b5
 8103390:	081033bd 	.word	0x081033bd
 8103394:	2300      	movs	r3, #0
 8103396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810339a:	e086      	b.n	81034aa <UART_SetConfig+0x5a2>
 810339c:	2304      	movs	r3, #4
 810339e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033a2:	e082      	b.n	81034aa <UART_SetConfig+0x5a2>
 81033a4:	2308      	movs	r3, #8
 81033a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033aa:	e07e      	b.n	81034aa <UART_SetConfig+0x5a2>
 81033ac:	2310      	movs	r3, #16
 81033ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033b2:	e07a      	b.n	81034aa <UART_SetConfig+0x5a2>
 81033b4:	2320      	movs	r3, #32
 81033b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033ba:	e076      	b.n	81034aa <UART_SetConfig+0x5a2>
 81033bc:	2340      	movs	r3, #64	; 0x40
 81033be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033c2:	e072      	b.n	81034aa <UART_SetConfig+0x5a2>
 81033c4:	2380      	movs	r3, #128	; 0x80
 81033c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033ca:	e06e      	b.n	81034aa <UART_SetConfig+0x5a2>
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	4a76      	ldr	r2, [pc, #472]	; (81035ac <UART_SetConfig+0x6a4>)
 81033d2:	4293      	cmp	r3, r2
 81033d4:	d130      	bne.n	8103438 <UART_SetConfig+0x530>
 81033d6:	4b73      	ldr	r3, [pc, #460]	; (81035a4 <UART_SetConfig+0x69c>)
 81033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033da:	f003 0307 	and.w	r3, r3, #7
 81033de:	2b05      	cmp	r3, #5
 81033e0:	d826      	bhi.n	8103430 <UART_SetConfig+0x528>
 81033e2:	a201      	add	r2, pc, #4	; (adr r2, 81033e8 <UART_SetConfig+0x4e0>)
 81033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033e8:	08103401 	.word	0x08103401
 81033ec:	08103409 	.word	0x08103409
 81033f0:	08103411 	.word	0x08103411
 81033f4:	08103419 	.word	0x08103419
 81033f8:	08103421 	.word	0x08103421
 81033fc:	08103429 	.word	0x08103429
 8103400:	2300      	movs	r3, #0
 8103402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103406:	e050      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103408:	2304      	movs	r3, #4
 810340a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810340e:	e04c      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103410:	2308      	movs	r3, #8
 8103412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103416:	e048      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103418:	2310      	movs	r3, #16
 810341a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810341e:	e044      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103420:	2320      	movs	r3, #32
 8103422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103426:	e040      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103428:	2340      	movs	r3, #64	; 0x40
 810342a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810342e:	e03c      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103430:	2380      	movs	r3, #128	; 0x80
 8103432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103436:	e038      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	681b      	ldr	r3, [r3, #0]
 810343c:	4a5c      	ldr	r2, [pc, #368]	; (81035b0 <UART_SetConfig+0x6a8>)
 810343e:	4293      	cmp	r3, r2
 8103440:	d130      	bne.n	81034a4 <UART_SetConfig+0x59c>
 8103442:	4b58      	ldr	r3, [pc, #352]	; (81035a4 <UART_SetConfig+0x69c>)
 8103444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103446:	f003 0307 	and.w	r3, r3, #7
 810344a:	2b05      	cmp	r3, #5
 810344c:	d826      	bhi.n	810349c <UART_SetConfig+0x594>
 810344e:	a201      	add	r2, pc, #4	; (adr r2, 8103454 <UART_SetConfig+0x54c>)
 8103450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103454:	0810346d 	.word	0x0810346d
 8103458:	08103475 	.word	0x08103475
 810345c:	0810347d 	.word	0x0810347d
 8103460:	08103485 	.word	0x08103485
 8103464:	0810348d 	.word	0x0810348d
 8103468:	08103495 	.word	0x08103495
 810346c:	2302      	movs	r3, #2
 810346e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103472:	e01a      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103474:	2304      	movs	r3, #4
 8103476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810347a:	e016      	b.n	81034aa <UART_SetConfig+0x5a2>
 810347c:	2308      	movs	r3, #8
 810347e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103482:	e012      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103484:	2310      	movs	r3, #16
 8103486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810348a:	e00e      	b.n	81034aa <UART_SetConfig+0x5a2>
 810348c:	2320      	movs	r3, #32
 810348e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103492:	e00a      	b.n	81034aa <UART_SetConfig+0x5a2>
 8103494:	2340      	movs	r3, #64	; 0x40
 8103496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810349a:	e006      	b.n	81034aa <UART_SetConfig+0x5a2>
 810349c:	2380      	movs	r3, #128	; 0x80
 810349e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81034a2:	e002      	b.n	81034aa <UART_SetConfig+0x5a2>
 81034a4:	2380      	movs	r3, #128	; 0x80
 81034a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	681b      	ldr	r3, [r3, #0]
 81034ae:	4a40      	ldr	r2, [pc, #256]	; (81035b0 <UART_SetConfig+0x6a8>)
 81034b0:	4293      	cmp	r3, r2
 81034b2:	f040 80ef 	bne.w	8103694 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81034b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81034ba:	2b20      	cmp	r3, #32
 81034bc:	dc46      	bgt.n	810354c <UART_SetConfig+0x644>
 81034be:	2b02      	cmp	r3, #2
 81034c0:	f2c0 8081 	blt.w	81035c6 <UART_SetConfig+0x6be>
 81034c4:	3b02      	subs	r3, #2
 81034c6:	2b1e      	cmp	r3, #30
 81034c8:	d87d      	bhi.n	81035c6 <UART_SetConfig+0x6be>
 81034ca:	a201      	add	r2, pc, #4	; (adr r2, 81034d0 <UART_SetConfig+0x5c8>)
 81034cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81034d0:	08103553 	.word	0x08103553
 81034d4:	081035c7 	.word	0x081035c7
 81034d8:	0810355b 	.word	0x0810355b
 81034dc:	081035c7 	.word	0x081035c7
 81034e0:	081035c7 	.word	0x081035c7
 81034e4:	081035c7 	.word	0x081035c7
 81034e8:	0810356b 	.word	0x0810356b
 81034ec:	081035c7 	.word	0x081035c7
 81034f0:	081035c7 	.word	0x081035c7
 81034f4:	081035c7 	.word	0x081035c7
 81034f8:	081035c7 	.word	0x081035c7
 81034fc:	081035c7 	.word	0x081035c7
 8103500:	081035c7 	.word	0x081035c7
 8103504:	081035c7 	.word	0x081035c7
 8103508:	0810357b 	.word	0x0810357b
 810350c:	081035c7 	.word	0x081035c7
 8103510:	081035c7 	.word	0x081035c7
 8103514:	081035c7 	.word	0x081035c7
 8103518:	081035c7 	.word	0x081035c7
 810351c:	081035c7 	.word	0x081035c7
 8103520:	081035c7 	.word	0x081035c7
 8103524:	081035c7 	.word	0x081035c7
 8103528:	081035c7 	.word	0x081035c7
 810352c:	081035c7 	.word	0x081035c7
 8103530:	081035c7 	.word	0x081035c7
 8103534:	081035c7 	.word	0x081035c7
 8103538:	081035c7 	.word	0x081035c7
 810353c:	081035c7 	.word	0x081035c7
 8103540:	081035c7 	.word	0x081035c7
 8103544:	081035c7 	.word	0x081035c7
 8103548:	081035b9 	.word	0x081035b9
 810354c:	2b40      	cmp	r3, #64	; 0x40
 810354e:	d036      	beq.n	81035be <UART_SetConfig+0x6b6>
 8103550:	e039      	b.n	81035c6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8103552:	f7fe ffd1 	bl	81024f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8103556:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8103558:	e03b      	b.n	81035d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810355a:	f107 0314 	add.w	r3, r7, #20
 810355e:	4618      	mov	r0, r3
 8103560:	f7fe ffe0 	bl	8102524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103564:	69bb      	ldr	r3, [r7, #24]
 8103566:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103568:	e033      	b.n	81035d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810356a:	f107 0308 	add.w	r3, r7, #8
 810356e:	4618      	mov	r0, r3
 8103570:	f7ff f92c 	bl	81027cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103574:	68fb      	ldr	r3, [r7, #12]
 8103576:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103578:	e02b      	b.n	81035d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810357a:	4b0a      	ldr	r3, [pc, #40]	; (81035a4 <UART_SetConfig+0x69c>)
 810357c:	681b      	ldr	r3, [r3, #0]
 810357e:	f003 0320 	and.w	r3, r3, #32
 8103582:	2b00      	cmp	r3, #0
 8103584:	d009      	beq.n	810359a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103586:	4b07      	ldr	r3, [pc, #28]	; (81035a4 <UART_SetConfig+0x69c>)
 8103588:	681b      	ldr	r3, [r3, #0]
 810358a:	08db      	lsrs	r3, r3, #3
 810358c:	f003 0303 	and.w	r3, r3, #3
 8103590:	4a08      	ldr	r2, [pc, #32]	; (81035b4 <UART_SetConfig+0x6ac>)
 8103592:	fa22 f303 	lsr.w	r3, r2, r3
 8103596:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103598:	e01b      	b.n	81035d2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810359a:	4b06      	ldr	r3, [pc, #24]	; (81035b4 <UART_SetConfig+0x6ac>)
 810359c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810359e:	e018      	b.n	81035d2 <UART_SetConfig+0x6ca>
 81035a0:	40011400 	.word	0x40011400
 81035a4:	58024400 	.word	0x58024400
 81035a8:	40007800 	.word	0x40007800
 81035ac:	40007c00 	.word	0x40007c00
 81035b0:	58000c00 	.word	0x58000c00
 81035b4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81035b8:	4bc4      	ldr	r3, [pc, #784]	; (81038cc <UART_SetConfig+0x9c4>)
 81035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81035bc:	e009      	b.n	81035d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81035be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81035c4:	e005      	b.n	81035d2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 81035c6:	2300      	movs	r3, #0
 81035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81035ca:	2301      	movs	r3, #1
 81035cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81035d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81035d4:	2b00      	cmp	r3, #0
 81035d6:	f000 81da 	beq.w	810398e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81035de:	4abc      	ldr	r2, [pc, #752]	; (81038d0 <UART_SetConfig+0x9c8>)
 81035e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81035e4:	461a      	mov	r2, r3
 81035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81035e8:	fbb3 f3f2 	udiv	r3, r3, r2
 81035ec:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	685a      	ldr	r2, [r3, #4]
 81035f2:	4613      	mov	r3, r2
 81035f4:	005b      	lsls	r3, r3, #1
 81035f6:	4413      	add	r3, r2
 81035f8:	6a3a      	ldr	r2, [r7, #32]
 81035fa:	429a      	cmp	r2, r3
 81035fc:	d305      	bcc.n	810360a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	685b      	ldr	r3, [r3, #4]
 8103602:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103604:	6a3a      	ldr	r2, [r7, #32]
 8103606:	429a      	cmp	r2, r3
 8103608:	d903      	bls.n	8103612 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810360a:	2301      	movs	r3, #1
 810360c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8103610:	e1bd      	b.n	810398e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103614:	4618      	mov	r0, r3
 8103616:	f04f 0100 	mov.w	r1, #0
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810361e:	4aac      	ldr	r2, [pc, #688]	; (81038d0 <UART_SetConfig+0x9c8>)
 8103620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103624:	b29a      	uxth	r2, r3
 8103626:	f04f 0300 	mov.w	r3, #0
 810362a:	f7fc fe55 	bl	81002d8 <__aeabi_uldivmod>
 810362e:	4602      	mov	r2, r0
 8103630:	460b      	mov	r3, r1
 8103632:	4610      	mov	r0, r2
 8103634:	4619      	mov	r1, r3
 8103636:	f04f 0200 	mov.w	r2, #0
 810363a:	f04f 0300 	mov.w	r3, #0
 810363e:	020b      	lsls	r3, r1, #8
 8103640:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8103644:	0202      	lsls	r2, r0, #8
 8103646:	6879      	ldr	r1, [r7, #4]
 8103648:	6849      	ldr	r1, [r1, #4]
 810364a:	0849      	lsrs	r1, r1, #1
 810364c:	4608      	mov	r0, r1
 810364e:	f04f 0100 	mov.w	r1, #0
 8103652:	1814      	adds	r4, r2, r0
 8103654:	eb43 0501 	adc.w	r5, r3, r1
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	685b      	ldr	r3, [r3, #4]
 810365c:	461a      	mov	r2, r3
 810365e:	f04f 0300 	mov.w	r3, #0
 8103662:	4620      	mov	r0, r4
 8103664:	4629      	mov	r1, r5
 8103666:	f7fc fe37 	bl	81002d8 <__aeabi_uldivmod>
 810366a:	4602      	mov	r2, r0
 810366c:	460b      	mov	r3, r1
 810366e:	4613      	mov	r3, r2
 8103670:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8103672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103678:	d308      	bcc.n	810368c <UART_SetConfig+0x784>
 810367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810367c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103680:	d204      	bcs.n	810368c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	681b      	ldr	r3, [r3, #0]
 8103686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8103688:	60da      	str	r2, [r3, #12]
 810368a:	e180      	b.n	810398e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 810368c:	2301      	movs	r3, #1
 810368e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8103692:	e17c      	b.n	810398e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	69db      	ldr	r3, [r3, #28]
 8103698:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810369c:	f040 80be 	bne.w	810381c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 81036a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81036a4:	2b20      	cmp	r3, #32
 81036a6:	dc49      	bgt.n	810373c <UART_SetConfig+0x834>
 81036a8:	2b00      	cmp	r3, #0
 81036aa:	db7c      	blt.n	81037a6 <UART_SetConfig+0x89e>
 81036ac:	2b20      	cmp	r3, #32
 81036ae:	d87a      	bhi.n	81037a6 <UART_SetConfig+0x89e>
 81036b0:	a201      	add	r2, pc, #4	; (adr r2, 81036b8 <UART_SetConfig+0x7b0>)
 81036b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81036b6:	bf00      	nop
 81036b8:	08103743 	.word	0x08103743
 81036bc:	0810374b 	.word	0x0810374b
 81036c0:	081037a7 	.word	0x081037a7
 81036c4:	081037a7 	.word	0x081037a7
 81036c8:	08103753 	.word	0x08103753
 81036cc:	081037a7 	.word	0x081037a7
 81036d0:	081037a7 	.word	0x081037a7
 81036d4:	081037a7 	.word	0x081037a7
 81036d8:	08103763 	.word	0x08103763
 81036dc:	081037a7 	.word	0x081037a7
 81036e0:	081037a7 	.word	0x081037a7
 81036e4:	081037a7 	.word	0x081037a7
 81036e8:	081037a7 	.word	0x081037a7
 81036ec:	081037a7 	.word	0x081037a7
 81036f0:	081037a7 	.word	0x081037a7
 81036f4:	081037a7 	.word	0x081037a7
 81036f8:	08103773 	.word	0x08103773
 81036fc:	081037a7 	.word	0x081037a7
 8103700:	081037a7 	.word	0x081037a7
 8103704:	081037a7 	.word	0x081037a7
 8103708:	081037a7 	.word	0x081037a7
 810370c:	081037a7 	.word	0x081037a7
 8103710:	081037a7 	.word	0x081037a7
 8103714:	081037a7 	.word	0x081037a7
 8103718:	081037a7 	.word	0x081037a7
 810371c:	081037a7 	.word	0x081037a7
 8103720:	081037a7 	.word	0x081037a7
 8103724:	081037a7 	.word	0x081037a7
 8103728:	081037a7 	.word	0x081037a7
 810372c:	081037a7 	.word	0x081037a7
 8103730:	081037a7 	.word	0x081037a7
 8103734:	081037a7 	.word	0x081037a7
 8103738:	08103799 	.word	0x08103799
 810373c:	2b40      	cmp	r3, #64	; 0x40
 810373e:	d02e      	beq.n	810379e <UART_SetConfig+0x896>
 8103740:	e031      	b.n	81037a6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103742:	f7fd ff6d 	bl	8101620 <HAL_RCC_GetPCLK1Freq>
 8103746:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8103748:	e033      	b.n	81037b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810374a:	f7fd ff7f 	bl	810164c <HAL_RCC_GetPCLK2Freq>
 810374e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8103750:	e02f      	b.n	81037b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103752:	f107 0314 	add.w	r3, r7, #20
 8103756:	4618      	mov	r0, r3
 8103758:	f7fe fee4 	bl	8102524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810375c:	69bb      	ldr	r3, [r7, #24]
 810375e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103760:	e027      	b.n	81037b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103762:	f107 0308 	add.w	r3, r7, #8
 8103766:	4618      	mov	r0, r3
 8103768:	f7ff f830 	bl	81027cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810376c:	68fb      	ldr	r3, [r7, #12]
 810376e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103770:	e01f      	b.n	81037b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103772:	4b58      	ldr	r3, [pc, #352]	; (81038d4 <UART_SetConfig+0x9cc>)
 8103774:	681b      	ldr	r3, [r3, #0]
 8103776:	f003 0320 	and.w	r3, r3, #32
 810377a:	2b00      	cmp	r3, #0
 810377c:	d009      	beq.n	8103792 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810377e:	4b55      	ldr	r3, [pc, #340]	; (81038d4 <UART_SetConfig+0x9cc>)
 8103780:	681b      	ldr	r3, [r3, #0]
 8103782:	08db      	lsrs	r3, r3, #3
 8103784:	f003 0303 	and.w	r3, r3, #3
 8103788:	4a53      	ldr	r2, [pc, #332]	; (81038d8 <UART_SetConfig+0x9d0>)
 810378a:	fa22 f303 	lsr.w	r3, r2, r3
 810378e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103790:	e00f      	b.n	81037b2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8103792:	4b51      	ldr	r3, [pc, #324]	; (81038d8 <UART_SetConfig+0x9d0>)
 8103794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103796:	e00c      	b.n	81037b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103798:	4b4c      	ldr	r3, [pc, #304]	; (81038cc <UART_SetConfig+0x9c4>)
 810379a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810379c:	e009      	b.n	81037b2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810379e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81037a4:	e005      	b.n	81037b2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 81037a6:	2300      	movs	r3, #0
 81037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81037aa:	2301      	movs	r3, #1
 81037ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81037b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81037b4:	2b00      	cmp	r3, #0
 81037b6:	f000 80ea 	beq.w	810398e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037be:	4a44      	ldr	r2, [pc, #272]	; (81038d0 <UART_SetConfig+0x9c8>)
 81037c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81037c4:	461a      	mov	r2, r3
 81037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81037c8:	fbb3 f3f2 	udiv	r3, r3, r2
 81037cc:	005a      	lsls	r2, r3, #1
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	685b      	ldr	r3, [r3, #4]
 81037d2:	085b      	lsrs	r3, r3, #1
 81037d4:	441a      	add	r2, r3
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	685b      	ldr	r3, [r3, #4]
 81037da:	fbb2 f3f3 	udiv	r3, r2, r3
 81037de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037e2:	2b0f      	cmp	r3, #15
 81037e4:	d916      	bls.n	8103814 <UART_SetConfig+0x90c>
 81037e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81037ec:	d212      	bcs.n	8103814 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037f0:	b29b      	uxth	r3, r3
 81037f2:	f023 030f 	bic.w	r3, r3, #15
 81037f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037fa:	085b      	lsrs	r3, r3, #1
 81037fc:	b29b      	uxth	r3, r3
 81037fe:	f003 0307 	and.w	r3, r3, #7
 8103802:	b29a      	uxth	r2, r3
 8103804:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8103806:	4313      	orrs	r3, r2
 8103808:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	681b      	ldr	r3, [r3, #0]
 810380e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8103810:	60da      	str	r2, [r3, #12]
 8103812:	e0bc      	b.n	810398e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8103814:	2301      	movs	r3, #1
 8103816:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810381a:	e0b8      	b.n	810398e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810381c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8103820:	2b20      	cmp	r3, #32
 8103822:	dc4b      	bgt.n	81038bc <UART_SetConfig+0x9b4>
 8103824:	2b00      	cmp	r3, #0
 8103826:	f2c0 8087 	blt.w	8103938 <UART_SetConfig+0xa30>
 810382a:	2b20      	cmp	r3, #32
 810382c:	f200 8084 	bhi.w	8103938 <UART_SetConfig+0xa30>
 8103830:	a201      	add	r2, pc, #4	; (adr r2, 8103838 <UART_SetConfig+0x930>)
 8103832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103836:	bf00      	nop
 8103838:	081038c3 	.word	0x081038c3
 810383c:	081038dd 	.word	0x081038dd
 8103840:	08103939 	.word	0x08103939
 8103844:	08103939 	.word	0x08103939
 8103848:	081038e5 	.word	0x081038e5
 810384c:	08103939 	.word	0x08103939
 8103850:	08103939 	.word	0x08103939
 8103854:	08103939 	.word	0x08103939
 8103858:	081038f5 	.word	0x081038f5
 810385c:	08103939 	.word	0x08103939
 8103860:	08103939 	.word	0x08103939
 8103864:	08103939 	.word	0x08103939
 8103868:	08103939 	.word	0x08103939
 810386c:	08103939 	.word	0x08103939
 8103870:	08103939 	.word	0x08103939
 8103874:	08103939 	.word	0x08103939
 8103878:	08103905 	.word	0x08103905
 810387c:	08103939 	.word	0x08103939
 8103880:	08103939 	.word	0x08103939
 8103884:	08103939 	.word	0x08103939
 8103888:	08103939 	.word	0x08103939
 810388c:	08103939 	.word	0x08103939
 8103890:	08103939 	.word	0x08103939
 8103894:	08103939 	.word	0x08103939
 8103898:	08103939 	.word	0x08103939
 810389c:	08103939 	.word	0x08103939
 81038a0:	08103939 	.word	0x08103939
 81038a4:	08103939 	.word	0x08103939
 81038a8:	08103939 	.word	0x08103939
 81038ac:	08103939 	.word	0x08103939
 81038b0:	08103939 	.word	0x08103939
 81038b4:	08103939 	.word	0x08103939
 81038b8:	0810392b 	.word	0x0810392b
 81038bc:	2b40      	cmp	r3, #64	; 0x40
 81038be:	d037      	beq.n	8103930 <UART_SetConfig+0xa28>
 81038c0:	e03a      	b.n	8103938 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81038c2:	f7fd fead 	bl	8101620 <HAL_RCC_GetPCLK1Freq>
 81038c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81038c8:	e03c      	b.n	8103944 <UART_SetConfig+0xa3c>
 81038ca:	bf00      	nop
 81038cc:	003d0900 	.word	0x003d0900
 81038d0:	08103fb8 	.word	0x08103fb8
 81038d4:	58024400 	.word	0x58024400
 81038d8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81038dc:	f7fd feb6 	bl	810164c <HAL_RCC_GetPCLK2Freq>
 81038e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81038e2:	e02f      	b.n	8103944 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81038e4:	f107 0314 	add.w	r3, r7, #20
 81038e8:	4618      	mov	r0, r3
 81038ea:	f7fe fe1b 	bl	8102524 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81038ee:	69bb      	ldr	r3, [r7, #24]
 81038f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81038f2:	e027      	b.n	8103944 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81038f4:	f107 0308 	add.w	r3, r7, #8
 81038f8:	4618      	mov	r0, r3
 81038fa:	f7fe ff67 	bl	81027cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81038fe:	68fb      	ldr	r3, [r7, #12]
 8103900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103902:	e01f      	b.n	8103944 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103904:	4b2c      	ldr	r3, [pc, #176]	; (81039b8 <UART_SetConfig+0xab0>)
 8103906:	681b      	ldr	r3, [r3, #0]
 8103908:	f003 0320 	and.w	r3, r3, #32
 810390c:	2b00      	cmp	r3, #0
 810390e:	d009      	beq.n	8103924 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103910:	4b29      	ldr	r3, [pc, #164]	; (81039b8 <UART_SetConfig+0xab0>)
 8103912:	681b      	ldr	r3, [r3, #0]
 8103914:	08db      	lsrs	r3, r3, #3
 8103916:	f003 0303 	and.w	r3, r3, #3
 810391a:	4a28      	ldr	r2, [pc, #160]	; (81039bc <UART_SetConfig+0xab4>)
 810391c:	fa22 f303 	lsr.w	r3, r2, r3
 8103920:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103922:	e00f      	b.n	8103944 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8103924:	4b25      	ldr	r3, [pc, #148]	; (81039bc <UART_SetConfig+0xab4>)
 8103926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103928:	e00c      	b.n	8103944 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810392a:	4b25      	ldr	r3, [pc, #148]	; (81039c0 <UART_SetConfig+0xab8>)
 810392c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810392e:	e009      	b.n	8103944 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103934:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103936:	e005      	b.n	8103944 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8103938:	2300      	movs	r3, #0
 810393a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810393c:	2301      	movs	r3, #1
 810393e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8103942:	bf00      	nop
    }

    if (pclk != 0U)
 8103944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103946:	2b00      	cmp	r3, #0
 8103948:	d021      	beq.n	810398e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810394e:	4a1d      	ldr	r2, [pc, #116]	; (81039c4 <UART_SetConfig+0xabc>)
 8103950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103954:	461a      	mov	r2, r3
 8103956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103958:	fbb3 f2f2 	udiv	r2, r3, r2
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	685b      	ldr	r3, [r3, #4]
 8103960:	085b      	lsrs	r3, r3, #1
 8103962:	441a      	add	r2, r3
 8103964:	687b      	ldr	r3, [r7, #4]
 8103966:	685b      	ldr	r3, [r3, #4]
 8103968:	fbb2 f3f3 	udiv	r3, r2, r3
 810396c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103970:	2b0f      	cmp	r3, #15
 8103972:	d909      	bls.n	8103988 <UART_SetConfig+0xa80>
 8103974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810397a:	d205      	bcs.n	8103988 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810397e:	b29a      	uxth	r2, r3
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	681b      	ldr	r3, [r3, #0]
 8103984:	60da      	str	r2, [r3, #12]
 8103986:	e002      	b.n	810398e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8103988:	2301      	movs	r3, #1
 810398a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	2201      	movs	r2, #1
 8103992:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	2201      	movs	r2, #1
 810399a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	2200      	movs	r2, #0
 81039a2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	2200      	movs	r2, #0
 81039a8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81039aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 81039ae:	4618      	mov	r0, r3
 81039b0:	3738      	adds	r7, #56	; 0x38
 81039b2:	46bd      	mov	sp, r7
 81039b4:	bdb0      	pop	{r4, r5, r7, pc}
 81039b6:	bf00      	nop
 81039b8:	58024400 	.word	0x58024400
 81039bc:	03d09000 	.word	0x03d09000
 81039c0:	003d0900 	.word	0x003d0900
 81039c4:	08103fb8 	.word	0x08103fb8

081039c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81039c8:	b480      	push	{r7}
 81039ca:	b083      	sub	sp, #12
 81039cc:	af00      	add	r7, sp, #0
 81039ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039d4:	f003 0301 	and.w	r3, r3, #1
 81039d8:	2b00      	cmp	r3, #0
 81039da:	d00a      	beq.n	81039f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	685b      	ldr	r3, [r3, #4]
 81039e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	681b      	ldr	r3, [r3, #0]
 81039ee:	430a      	orrs	r2, r1
 81039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039f6:	f003 0302 	and.w	r3, r3, #2
 81039fa:	2b00      	cmp	r3, #0
 81039fc:	d00a      	beq.n	8103a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	681b      	ldr	r3, [r3, #0]
 8103a02:	685b      	ldr	r3, [r3, #4]
 8103a04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	681b      	ldr	r3, [r3, #0]
 8103a10:	430a      	orrs	r2, r1
 8103a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8103a14:	687b      	ldr	r3, [r7, #4]
 8103a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a18:	f003 0304 	and.w	r3, r3, #4
 8103a1c:	2b00      	cmp	r3, #0
 8103a1e:	d00a      	beq.n	8103a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	685b      	ldr	r3, [r3, #4]
 8103a26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	681b      	ldr	r3, [r3, #0]
 8103a32:	430a      	orrs	r2, r1
 8103a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a3a:	f003 0308 	and.w	r3, r3, #8
 8103a3e:	2b00      	cmp	r3, #0
 8103a40:	d00a      	beq.n	8103a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	681b      	ldr	r3, [r3, #0]
 8103a46:	685b      	ldr	r3, [r3, #4]
 8103a48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	681b      	ldr	r3, [r3, #0]
 8103a54:	430a      	orrs	r2, r1
 8103a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a5c:	f003 0310 	and.w	r3, r3, #16
 8103a60:	2b00      	cmp	r3, #0
 8103a62:	d00a      	beq.n	8103a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	689b      	ldr	r3, [r3, #8]
 8103a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	430a      	orrs	r2, r1
 8103a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a7e:	f003 0320 	and.w	r3, r3, #32
 8103a82:	2b00      	cmp	r3, #0
 8103a84:	d00a      	beq.n	8103a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	681b      	ldr	r3, [r3, #0]
 8103a8a:	689b      	ldr	r3, [r3, #8]
 8103a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	681b      	ldr	r3, [r3, #0]
 8103a98:	430a      	orrs	r2, r1
 8103a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103aa4:	2b00      	cmp	r3, #0
 8103aa6:	d01a      	beq.n	8103ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103aa8:	687b      	ldr	r3, [r7, #4]
 8103aaa:	681b      	ldr	r3, [r3, #0]
 8103aac:	685b      	ldr	r3, [r3, #4]
 8103aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103ab6:	687b      	ldr	r3, [r7, #4]
 8103ab8:	681b      	ldr	r3, [r3, #0]
 8103aba:	430a      	orrs	r2, r1
 8103abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103ac6:	d10a      	bne.n	8103ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	681b      	ldr	r3, [r3, #0]
 8103acc:	685b      	ldr	r3, [r3, #4]
 8103ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8103ad6:	687b      	ldr	r3, [r7, #4]
 8103ad8:	681b      	ldr	r3, [r3, #0]
 8103ada:	430a      	orrs	r2, r1
 8103adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103ae6:	2b00      	cmp	r3, #0
 8103ae8:	d00a      	beq.n	8103b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	681b      	ldr	r3, [r3, #0]
 8103aee:	685b      	ldr	r3, [r3, #4]
 8103af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	430a      	orrs	r2, r1
 8103afe:	605a      	str	r2, [r3, #4]
  }
}
 8103b00:	bf00      	nop
 8103b02:	370c      	adds	r7, #12
 8103b04:	46bd      	mov	sp, r7
 8103b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b0a:	4770      	bx	lr

08103b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8103b0c:	b580      	push	{r7, lr}
 8103b0e:	b086      	sub	sp, #24
 8103b10:	af02      	add	r7, sp, #8
 8103b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	2200      	movs	r2, #0
 8103b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8103b1c:	f7fc ffc8 	bl	8100ab0 <HAL_GetTick>
 8103b20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	f003 0308 	and.w	r3, r3, #8
 8103b2c:	2b08      	cmp	r3, #8
 8103b2e:	d10e      	bne.n	8103b4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8103b34:	9300      	str	r3, [sp, #0]
 8103b36:	68fb      	ldr	r3, [r7, #12]
 8103b38:	2200      	movs	r2, #0
 8103b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8103b3e:	6878      	ldr	r0, [r7, #4]
 8103b40:	f000 f82f 	bl	8103ba2 <UART_WaitOnFlagUntilTimeout>
 8103b44:	4603      	mov	r3, r0
 8103b46:	2b00      	cmp	r3, #0
 8103b48:	d001      	beq.n	8103b4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103b4a:	2303      	movs	r3, #3
 8103b4c:	e025      	b.n	8103b9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	681b      	ldr	r3, [r3, #0]
 8103b52:	681b      	ldr	r3, [r3, #0]
 8103b54:	f003 0304 	and.w	r3, r3, #4
 8103b58:	2b04      	cmp	r3, #4
 8103b5a:	d10e      	bne.n	8103b7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8103b60:	9300      	str	r3, [sp, #0]
 8103b62:	68fb      	ldr	r3, [r7, #12]
 8103b64:	2200      	movs	r2, #0
 8103b66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8103b6a:	6878      	ldr	r0, [r7, #4]
 8103b6c:	f000 f819 	bl	8103ba2 <UART_WaitOnFlagUntilTimeout>
 8103b70:	4603      	mov	r3, r0
 8103b72:	2b00      	cmp	r3, #0
 8103b74:	d001      	beq.n	8103b7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103b76:	2303      	movs	r3, #3
 8103b78:	e00f      	b.n	8103b9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	2220      	movs	r2, #32
 8103b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8103b82:	687b      	ldr	r3, [r7, #4]
 8103b84:	2220      	movs	r2, #32
 8103b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	2200      	movs	r2, #0
 8103b8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8103b90:	687b      	ldr	r3, [r7, #4]
 8103b92:	2200      	movs	r2, #0
 8103b94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103b98:	2300      	movs	r3, #0
}
 8103b9a:	4618      	mov	r0, r3
 8103b9c:	3710      	adds	r7, #16
 8103b9e:	46bd      	mov	sp, r7
 8103ba0:	bd80      	pop	{r7, pc}

08103ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8103ba2:	b580      	push	{r7, lr}
 8103ba4:	b09c      	sub	sp, #112	; 0x70
 8103ba6:	af00      	add	r7, sp, #0
 8103ba8:	60f8      	str	r0, [r7, #12]
 8103baa:	60b9      	str	r1, [r7, #8]
 8103bac:	603b      	str	r3, [r7, #0]
 8103bae:	4613      	mov	r3, r2
 8103bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103bb2:	e0a9      	b.n	8103d08 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103bba:	f000 80a5 	beq.w	8103d08 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103bbe:	f7fc ff77 	bl	8100ab0 <HAL_GetTick>
 8103bc2:	4602      	mov	r2, r0
 8103bc4:	683b      	ldr	r3, [r7, #0]
 8103bc6:	1ad3      	subs	r3, r2, r3
 8103bc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8103bca:	429a      	cmp	r2, r3
 8103bcc:	d302      	bcc.n	8103bd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8103bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103bd0:	2b00      	cmp	r3, #0
 8103bd2:	d140      	bne.n	8103c56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8103bd4:	68fb      	ldr	r3, [r7, #12]
 8103bd6:	681b      	ldr	r3, [r3, #0]
 8103bd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103bdc:	e853 3f00 	ldrex	r3, [r3]
 8103be0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8103be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103be4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103be8:	667b      	str	r3, [r7, #100]	; 0x64
 8103bea:	68fb      	ldr	r3, [r7, #12]
 8103bec:	681b      	ldr	r3, [r3, #0]
 8103bee:	461a      	mov	r2, r3
 8103bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8103bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8103bf4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103bf6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8103bf8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8103bfa:	e841 2300 	strex	r3, r2, [r1]
 8103bfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8103c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103c02:	2b00      	cmp	r3, #0
 8103c04:	d1e6      	bne.n	8103bd4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103c06:	68fb      	ldr	r3, [r7, #12]
 8103c08:	681b      	ldr	r3, [r3, #0]
 8103c0a:	3308      	adds	r3, #8
 8103c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103c10:	e853 3f00 	ldrex	r3, [r3]
 8103c14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8103c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103c18:	f023 0301 	bic.w	r3, r3, #1
 8103c1c:	663b      	str	r3, [r7, #96]	; 0x60
 8103c1e:	68fb      	ldr	r3, [r7, #12]
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	3308      	adds	r3, #8
 8103c24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8103c26:	64ba      	str	r2, [r7, #72]	; 0x48
 8103c28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8103c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8103c2e:	e841 2300 	strex	r3, r2, [r1]
 8103c32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8103c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103c36:	2b00      	cmp	r3, #0
 8103c38:	d1e5      	bne.n	8103c06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8103c3a:	68fb      	ldr	r3, [r7, #12]
 8103c3c:	2220      	movs	r2, #32
 8103c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8103c42:	68fb      	ldr	r3, [r7, #12]
 8103c44:	2220      	movs	r2, #32
 8103c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8103c4a:	68fb      	ldr	r3, [r7, #12]
 8103c4c:	2200      	movs	r2, #0
 8103c4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8103c52:	2303      	movs	r3, #3
 8103c54:	e069      	b.n	8103d2a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8103c56:	68fb      	ldr	r3, [r7, #12]
 8103c58:	681b      	ldr	r3, [r3, #0]
 8103c5a:	681b      	ldr	r3, [r3, #0]
 8103c5c:	f003 0304 	and.w	r3, r3, #4
 8103c60:	2b00      	cmp	r3, #0
 8103c62:	d051      	beq.n	8103d08 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8103c64:	68fb      	ldr	r3, [r7, #12]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	69db      	ldr	r3, [r3, #28]
 8103c6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103c72:	d149      	bne.n	8103d08 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8103c74:	68fb      	ldr	r3, [r7, #12]
 8103c76:	681b      	ldr	r3, [r3, #0]
 8103c78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103c7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8103c7e:	68fb      	ldr	r3, [r7, #12]
 8103c80:	681b      	ldr	r3, [r3, #0]
 8103c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c86:	e853 3f00 	ldrex	r3, [r3]
 8103c8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8103c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103c8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103c92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8103c94:	68fb      	ldr	r3, [r7, #12]
 8103c96:	681b      	ldr	r3, [r3, #0]
 8103c98:	461a      	mov	r2, r3
 8103c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8103c9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103ca0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8103ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103ca4:	e841 2300 	strex	r3, r2, [r1]
 8103ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8103caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103cac:	2b00      	cmp	r3, #0
 8103cae:	d1e6      	bne.n	8103c7e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103cb0:	68fb      	ldr	r3, [r7, #12]
 8103cb2:	681b      	ldr	r3, [r3, #0]
 8103cb4:	3308      	adds	r3, #8
 8103cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103cb8:	697b      	ldr	r3, [r7, #20]
 8103cba:	e853 3f00 	ldrex	r3, [r3]
 8103cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8103cc0:	693b      	ldr	r3, [r7, #16]
 8103cc2:	f023 0301 	bic.w	r3, r3, #1
 8103cc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8103cc8:	68fb      	ldr	r3, [r7, #12]
 8103cca:	681b      	ldr	r3, [r3, #0]
 8103ccc:	3308      	adds	r3, #8
 8103cce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8103cd0:	623a      	str	r2, [r7, #32]
 8103cd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103cd4:	69f9      	ldr	r1, [r7, #28]
 8103cd6:	6a3a      	ldr	r2, [r7, #32]
 8103cd8:	e841 2300 	strex	r3, r2, [r1]
 8103cdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8103cde:	69bb      	ldr	r3, [r7, #24]
 8103ce0:	2b00      	cmp	r3, #0
 8103ce2:	d1e5      	bne.n	8103cb0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8103ce4:	68fb      	ldr	r3, [r7, #12]
 8103ce6:	2220      	movs	r2, #32
 8103ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8103cec:	68fb      	ldr	r3, [r7, #12]
 8103cee:	2220      	movs	r2, #32
 8103cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8103cf4:	68fb      	ldr	r3, [r7, #12]
 8103cf6:	2220      	movs	r2, #32
 8103cf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8103cfc:	68fb      	ldr	r3, [r7, #12]
 8103cfe:	2200      	movs	r2, #0
 8103d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8103d04:	2303      	movs	r3, #3
 8103d06:	e010      	b.n	8103d2a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103d08:	68fb      	ldr	r3, [r7, #12]
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	69da      	ldr	r2, [r3, #28]
 8103d0e:	68bb      	ldr	r3, [r7, #8]
 8103d10:	4013      	ands	r3, r2
 8103d12:	68ba      	ldr	r2, [r7, #8]
 8103d14:	429a      	cmp	r2, r3
 8103d16:	bf0c      	ite	eq
 8103d18:	2301      	moveq	r3, #1
 8103d1a:	2300      	movne	r3, #0
 8103d1c:	b2db      	uxtb	r3, r3
 8103d1e:	461a      	mov	r2, r3
 8103d20:	79fb      	ldrb	r3, [r7, #7]
 8103d22:	429a      	cmp	r2, r3
 8103d24:	f43f af46 	beq.w	8103bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8103d28:	2300      	movs	r3, #0
}
 8103d2a:	4618      	mov	r0, r3
 8103d2c:	3770      	adds	r7, #112	; 0x70
 8103d2e:	46bd      	mov	sp, r7
 8103d30:	bd80      	pop	{r7, pc}

08103d32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8103d32:	b480      	push	{r7}
 8103d34:	b085      	sub	sp, #20
 8103d36:	af00      	add	r7, sp, #0
 8103d38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103d40:	2b01      	cmp	r3, #1
 8103d42:	d101      	bne.n	8103d48 <HAL_UARTEx_DisableFifoMode+0x16>
 8103d44:	2302      	movs	r3, #2
 8103d46:	e027      	b.n	8103d98 <HAL_UARTEx_DisableFifoMode+0x66>
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	2201      	movs	r2, #1
 8103d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	2224      	movs	r2, #36	; 0x24
 8103d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	681b      	ldr	r3, [r3, #0]
 8103d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	681a      	ldr	r2, [r3, #0]
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	f022 0201 	bic.w	r2, r2, #1
 8103d6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8103d70:	68fb      	ldr	r3, [r7, #12]
 8103d72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8103d76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	2200      	movs	r2, #0
 8103d7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	681b      	ldr	r3, [r3, #0]
 8103d82:	68fa      	ldr	r2, [r7, #12]
 8103d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	2220      	movs	r2, #32
 8103d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	2200      	movs	r2, #0
 8103d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103d96:	2300      	movs	r3, #0
}
 8103d98:	4618      	mov	r0, r3
 8103d9a:	3714      	adds	r7, #20
 8103d9c:	46bd      	mov	sp, r7
 8103d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103da2:	4770      	bx	lr

08103da4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8103da4:	b580      	push	{r7, lr}
 8103da6:	b084      	sub	sp, #16
 8103da8:	af00      	add	r7, sp, #0
 8103daa:	6078      	str	r0, [r7, #4]
 8103dac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103db4:	2b01      	cmp	r3, #1
 8103db6:	d101      	bne.n	8103dbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8103db8:	2302      	movs	r3, #2
 8103dba:	e02d      	b.n	8103e18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	2201      	movs	r2, #1
 8103dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	2224      	movs	r2, #36	; 0x24
 8103dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	681b      	ldr	r3, [r3, #0]
 8103dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103dd4:	687b      	ldr	r3, [r7, #4]
 8103dd6:	681b      	ldr	r3, [r3, #0]
 8103dd8:	681a      	ldr	r2, [r3, #0]
 8103dda:	687b      	ldr	r3, [r7, #4]
 8103ddc:	681b      	ldr	r3, [r3, #0]
 8103dde:	f022 0201 	bic.w	r2, r2, #1
 8103de2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	681b      	ldr	r3, [r3, #0]
 8103de8:	689b      	ldr	r3, [r3, #8]
 8103dea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8103dee:	687b      	ldr	r3, [r7, #4]
 8103df0:	681b      	ldr	r3, [r3, #0]
 8103df2:	683a      	ldr	r2, [r7, #0]
 8103df4:	430a      	orrs	r2, r1
 8103df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8103df8:	6878      	ldr	r0, [r7, #4]
 8103dfa:	f000 f84f 	bl	8103e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	681b      	ldr	r3, [r3, #0]
 8103e02:	68fa      	ldr	r2, [r7, #12]
 8103e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	2220      	movs	r2, #32
 8103e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	2200      	movs	r2, #0
 8103e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103e16:	2300      	movs	r3, #0
}
 8103e18:	4618      	mov	r0, r3
 8103e1a:	3710      	adds	r7, #16
 8103e1c:	46bd      	mov	sp, r7
 8103e1e:	bd80      	pop	{r7, pc}

08103e20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8103e20:	b580      	push	{r7, lr}
 8103e22:	b084      	sub	sp, #16
 8103e24:	af00      	add	r7, sp, #0
 8103e26:	6078      	str	r0, [r7, #4]
 8103e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103e30:	2b01      	cmp	r3, #1
 8103e32:	d101      	bne.n	8103e38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8103e34:	2302      	movs	r3, #2
 8103e36:	e02d      	b.n	8103e94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	2201      	movs	r2, #1
 8103e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	2224      	movs	r2, #36	; 0x24
 8103e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	681b      	ldr	r3, [r3, #0]
 8103e4c:	681b      	ldr	r3, [r3, #0]
 8103e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103e50:	687b      	ldr	r3, [r7, #4]
 8103e52:	681b      	ldr	r3, [r3, #0]
 8103e54:	681a      	ldr	r2, [r3, #0]
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	681b      	ldr	r3, [r3, #0]
 8103e5a:	f022 0201 	bic.w	r2, r2, #1
 8103e5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	681b      	ldr	r3, [r3, #0]
 8103e64:	689b      	ldr	r3, [r3, #8]
 8103e66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	683a      	ldr	r2, [r7, #0]
 8103e70:	430a      	orrs	r2, r1
 8103e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8103e74:	6878      	ldr	r0, [r7, #4]
 8103e76:	f000 f811 	bl	8103e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	681b      	ldr	r3, [r3, #0]
 8103e7e:	68fa      	ldr	r2, [r7, #12]
 8103e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	2220      	movs	r2, #32
 8103e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	2200      	movs	r2, #0
 8103e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103e92:	2300      	movs	r3, #0
}
 8103e94:	4618      	mov	r0, r3
 8103e96:	3710      	adds	r7, #16
 8103e98:	46bd      	mov	sp, r7
 8103e9a:	bd80      	pop	{r7, pc}

08103e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8103e9c:	b480      	push	{r7}
 8103e9e:	b085      	sub	sp, #20
 8103ea0:	af00      	add	r7, sp, #0
 8103ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103ea8:	2b00      	cmp	r3, #0
 8103eaa:	d108      	bne.n	8103ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	2201      	movs	r2, #1
 8103eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8103eb4:	687b      	ldr	r3, [r7, #4]
 8103eb6:	2201      	movs	r2, #1
 8103eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8103ebc:	e031      	b.n	8103f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8103ebe:	2310      	movs	r3, #16
 8103ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8103ec2:	2310      	movs	r3, #16
 8103ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	681b      	ldr	r3, [r3, #0]
 8103eca:	689b      	ldr	r3, [r3, #8]
 8103ecc:	0e5b      	lsrs	r3, r3, #25
 8103ece:	b2db      	uxtb	r3, r3
 8103ed0:	f003 0307 	and.w	r3, r3, #7
 8103ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	681b      	ldr	r3, [r3, #0]
 8103eda:	689b      	ldr	r3, [r3, #8]
 8103edc:	0f5b      	lsrs	r3, r3, #29
 8103ede:	b2db      	uxtb	r3, r3
 8103ee0:	f003 0307 	and.w	r3, r3, #7
 8103ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8103ee6:	7bbb      	ldrb	r3, [r7, #14]
 8103ee8:	7b3a      	ldrb	r2, [r7, #12]
 8103eea:	4911      	ldr	r1, [pc, #68]	; (8103f30 <UARTEx_SetNbDataToProcess+0x94>)
 8103eec:	5c8a      	ldrb	r2, [r1, r2]
 8103eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8103ef2:	7b3a      	ldrb	r2, [r7, #12]
 8103ef4:	490f      	ldr	r1, [pc, #60]	; (8103f34 <UARTEx_SetNbDataToProcess+0x98>)
 8103ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8103ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8103efc:	b29a      	uxth	r2, r3
 8103efe:	687b      	ldr	r3, [r7, #4]
 8103f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8103f04:	7bfb      	ldrb	r3, [r7, #15]
 8103f06:	7b7a      	ldrb	r2, [r7, #13]
 8103f08:	4909      	ldr	r1, [pc, #36]	; (8103f30 <UARTEx_SetNbDataToProcess+0x94>)
 8103f0a:	5c8a      	ldrb	r2, [r1, r2]
 8103f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8103f10:	7b7a      	ldrb	r2, [r7, #13]
 8103f12:	4908      	ldr	r1, [pc, #32]	; (8103f34 <UARTEx_SetNbDataToProcess+0x98>)
 8103f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8103f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8103f1a:	b29a      	uxth	r2, r3
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8103f22:	bf00      	nop
 8103f24:	3714      	adds	r7, #20
 8103f26:	46bd      	mov	sp, r7
 8103f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f2c:	4770      	bx	lr
 8103f2e:	bf00      	nop
 8103f30:	08103fd0 	.word	0x08103fd0
 8103f34:	08103fd8 	.word	0x08103fd8

08103f38 <__libc_init_array>:
 8103f38:	b570      	push	{r4, r5, r6, lr}
 8103f3a:	4d0d      	ldr	r5, [pc, #52]	; (8103f70 <__libc_init_array+0x38>)
 8103f3c:	4c0d      	ldr	r4, [pc, #52]	; (8103f74 <__libc_init_array+0x3c>)
 8103f3e:	1b64      	subs	r4, r4, r5
 8103f40:	10a4      	asrs	r4, r4, #2
 8103f42:	2600      	movs	r6, #0
 8103f44:	42a6      	cmp	r6, r4
 8103f46:	d109      	bne.n	8103f5c <__libc_init_array+0x24>
 8103f48:	4d0b      	ldr	r5, [pc, #44]	; (8103f78 <__libc_init_array+0x40>)
 8103f4a:	4c0c      	ldr	r4, [pc, #48]	; (8103f7c <__libc_init_array+0x44>)
 8103f4c:	f000 f820 	bl	8103f90 <_init>
 8103f50:	1b64      	subs	r4, r4, r5
 8103f52:	10a4      	asrs	r4, r4, #2
 8103f54:	2600      	movs	r6, #0
 8103f56:	42a6      	cmp	r6, r4
 8103f58:	d105      	bne.n	8103f66 <__libc_init_array+0x2e>
 8103f5a:	bd70      	pop	{r4, r5, r6, pc}
 8103f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8103f60:	4798      	blx	r3
 8103f62:	3601      	adds	r6, #1
 8103f64:	e7ee      	b.n	8103f44 <__libc_init_array+0xc>
 8103f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8103f6a:	4798      	blx	r3
 8103f6c:	3601      	adds	r6, #1
 8103f6e:	e7f2      	b.n	8103f56 <__libc_init_array+0x1e>
 8103f70:	08103fe8 	.word	0x08103fe8
 8103f74:	08103fe8 	.word	0x08103fe8
 8103f78:	08103fe8 	.word	0x08103fe8
 8103f7c:	08103fec 	.word	0x08103fec

08103f80 <memset>:
 8103f80:	4402      	add	r2, r0
 8103f82:	4603      	mov	r3, r0
 8103f84:	4293      	cmp	r3, r2
 8103f86:	d100      	bne.n	8103f8a <memset+0xa>
 8103f88:	4770      	bx	lr
 8103f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8103f8e:	e7f9      	b.n	8103f84 <memset+0x4>

08103f90 <_init>:
 8103f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103f92:	bf00      	nop
 8103f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103f96:	bc08      	pop	{r3}
 8103f98:	469e      	mov	lr, r3
 8103f9a:	4770      	bx	lr

08103f9c <_fini>:
 8103f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103f9e:	bf00      	nop
 8103fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103fa2:	bc08      	pop	{r3}
 8103fa4:	469e      	mov	lr, r3
 8103fa6:	4770      	bx	lr
