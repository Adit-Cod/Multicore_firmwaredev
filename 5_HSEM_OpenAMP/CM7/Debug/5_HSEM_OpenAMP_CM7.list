
5_HSEM_OpenAMP_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a04  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001c9c  08001c9c  00011c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cac  08001cac  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001cac  08001cac  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cac  08001cac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cac  08001cac  00011cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cb0  08001cb0  00011cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08001cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  24000010  08001cc4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000034  08001cc4  00020034  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed3d  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf8  00000000  00000000  0002ed7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  00030a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000628  00000000  00000000  00031148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000391e7  00000000  00000000  00031770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083c1  00000000  00000000  0006a957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176eac  00000000  00000000  00072d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e9bc4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c8  00000000  00000000  001e9c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001c84 	.word	0x08001c84

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001c84 	.word	0x08001c84

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000412:	f000 f915 	bl	8000640 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000416:	4b53      	ldr	r3, [pc, #332]	; (8000564 <main+0x158>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800041e:	2b00      	cmp	r3, #0
 8000420:	d11b      	bne.n	800045a <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000422:	f3bf 8f4f 	dsb	sy
}
 8000426:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000428:	f3bf 8f6f 	isb	sy
}
 800042c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800042e:	4b4d      	ldr	r3, [pc, #308]	; (8000564 <main+0x158>)
 8000430:	2200      	movs	r2, #0
 8000432:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000436:	f3bf 8f4f 	dsb	sy
}
 800043a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800043c:	f3bf 8f6f 	isb	sy
}
 8000440:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000442:	4b48      	ldr	r3, [pc, #288]	; (8000564 <main+0x158>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a47      	ldr	r2, [pc, #284]	; (8000564 <main+0x158>)
 8000448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800044c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800044e:	f3bf 8f4f 	dsb	sy
}
 8000452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000454:	f3bf 8f6f 	isb	sy
}
 8000458:	e000      	b.n	800045c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800045a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800045c:	4b41      	ldr	r3, [pc, #260]	; (8000564 <main+0x158>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000464:	2b00      	cmp	r3, #0
 8000466:	d138      	bne.n	80004da <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000468:	4b3e      	ldr	r3, [pc, #248]	; (8000564 <main+0x158>)
 800046a:	2200      	movs	r2, #0
 800046c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000470:	f3bf 8f4f 	dsb	sy
}
 8000474:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000476:	4b3b      	ldr	r3, [pc, #236]	; (8000564 <main+0x158>)
 8000478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800047c:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800047e:	693b      	ldr	r3, [r7, #16]
 8000480:	0b5b      	lsrs	r3, r3, #13
 8000482:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000486:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000488:	693b      	ldr	r3, [r7, #16]
 800048a:	08db      	lsrs	r3, r3, #3
 800048c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000490:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	015a      	lsls	r2, r3, #5
 8000496:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800049a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80004a0:	4930      	ldr	r1, [pc, #192]	; (8000564 <main+0x158>)
 80004a2:	4313      	orrs	r3, r2
 80004a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	1e5a      	subs	r2, r3, #1
 80004ac:	60ba      	str	r2, [r7, #8]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1ef      	bne.n	8000492 <main+0x86>
    } while(sets-- != 0U);
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	1e5a      	subs	r2, r3, #1
 80004b6:	60fa      	str	r2, [r7, #12]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d1e5      	bne.n	8000488 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80004bc:	f3bf 8f4f 	dsb	sy
}
 80004c0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80004c2:	4b28      	ldr	r3, [pc, #160]	; (8000564 <main+0x158>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a27      	ldr	r2, [pc, #156]	; (8000564 <main+0x158>)
 80004c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004ce:	f3bf 8f4f 	dsb	sy
}
 80004d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004d4:	f3bf 8f6f 	isb	sy
}
 80004d8:	e000      	b.n	80004dc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004da:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80004dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e0:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80004e2:	bf00      	nop
 80004e4:	4b20      	ldr	r3, [pc, #128]	; (8000568 <main+0x15c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d004      	beq.n	80004fa <main+0xee>
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	1e5a      	subs	r2, r3, #1
 80004f4:	617a      	str	r2, [r7, #20]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	dcf4      	bgt.n	80004e4 <main+0xd8>
  if ( timeout < 0 )
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da01      	bge.n	8000504 <main+0xf8>
  {
  Error_Handler();
 8000500:	f000 f8cb 	bl	800069a <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 f948 	bl	8000798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f830 	bl	800056c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800050c:	4b16      	ldr	r3, [pc, #88]	; (8000568 <main+0x15c>)
 800050e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000512:	4a15      	ldr	r2, [pc, #84]	; (8000568 <main+0x15c>)
 8000514:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <main+0x15c>)
 800051e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fb5e 	bl	8000bec <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000530:	2100      	movs	r1, #0
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fb74 	bl	8000c20 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000538:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800053c:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800053e:	bf00      	nop
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <main+0x15c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000548:	2b00      	cmp	r3, #0
 800054a:	d104      	bne.n	8000556 <main+0x14a>
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	1e5a      	subs	r2, r3, #1
 8000550:	617a      	str	r2, [r7, #20]
 8000552:	2b00      	cmp	r3, #0
 8000554:	dcf4      	bgt.n	8000540 <main+0x134>
if ( timeout < 0 )
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	2b00      	cmp	r3, #0
 800055a:	da01      	bge.n	8000560 <main+0x154>
{
Error_Handler();
 800055c:	f000 f89d 	bl	800069a <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000560:	e7fe      	b.n	8000560 <main+0x154>
 8000562:	bf00      	nop
 8000564:	e000ed00 	.word	0xe000ed00
 8000568:	58024400 	.word	0x58024400

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b09c      	sub	sp, #112	; 0x70
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000576:	224c      	movs	r2, #76	; 0x4c
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fb7a 	bl	8001c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2220      	movs	r2, #32
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fb74 	bl	8001c74 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800058c:	2004      	movs	r0, #4
 800058e:	f000 fb87 	bl	8000ca0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000592:	2300      	movs	r3, #0
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0xcc>)
 8000598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059a:	4a27      	ldr	r2, [pc, #156]	; (8000638 <SystemClock_Config+0xcc>)
 800059c:	f023 0301 	bic.w	r3, r3, #1
 80005a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005a2:	4b25      	ldr	r3, [pc, #148]	; (8000638 <SystemClock_Config+0xcc>)
 80005a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	4b23      	ldr	r3, [pc, #140]	; (800063c <SystemClock_Config+0xd0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd0>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005c8:	bf00      	nop
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <SystemClock_Config+0xd0>)
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005d6:	d1f8      	bne.n	80005ca <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005dc:	2301      	movs	r3, #1
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2340      	movs	r3, #64	; 0x40
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fbb1 	bl	8000d54 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005f8:	f000 f84f 	bl	800069a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	233f      	movs	r3, #63	; 0x3f
 80005fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2101      	movs	r1, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f000 ffc3 	bl	80015ac <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800062c:	f000 f835 	bl	800069a <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3770      	adds	r7, #112	; 0x70
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58000400 	.word	0x58000400
 800063c:	58024800 	.word	0x58024800

08000640 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000652:	f000 fa4f 	bl	8000af4 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000656:	2301      	movs	r3, #1
 8000658:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800065a:	2300      	movs	r3, #0
 800065c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 800065e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000662:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64B;
 8000664:	2305      	movs	r3, #5
 8000666:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000668:	2300      	movs	r3, #0
 800066a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800066c:	2300      	movs	r3, #0
 800066e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000670:	2303      	movs	r3, #3
 8000672:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000678:	2301      	movs	r3, #1
 800067a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000684:	463b      	mov	r3, r7
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fa6c 	bl	8000b64 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800068c:	2004      	movs	r0, #4
 800068e:	f000 fa49 	bl	8000b24 <HAL_MPU_Enable>

}
 8000692:	bf00      	nop
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800069e:	b672      	cpsid	i
}
 80006a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <Error_Handler+0x8>

080006a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <HAL_MspInit+0x3c>)
 80006ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006b0:	4a0b      	ldr	r2, [pc, #44]	; (80006e0 <HAL_MspInit+0x3c>)
 80006b2:	f043 0302 	orr.w	r3, r3, #2
 80006b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <HAL_MspInit+0x3c>)
 80006bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c0:	f003 0302 	and.w	r3, r3, #2
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	207d      	movs	r0, #125	; 0x7d
 80006ce:	f000 f9dc 	bl	8000a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 80006d2:	207d      	movs	r0, #125	; 0x7d
 80006d4:	f000 f9f3 	bl	8000abe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	58024400 	.word	0x58024400

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f8a4 	bl	800087c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800073c:	f000 fa96 	bl	8000c6c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800077c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000748:	f7ff fdc6 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800074e:	490d      	ldr	r1, [pc, #52]	; (8000784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000750:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000764:	4c0a      	ldr	r4, [pc, #40]	; (8000790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000772:	f001 fa5b 	bl	8001c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000776:	f7ff fe49 	bl	800040c <main>
  bx  lr
 800077a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800077c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000780:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000784:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000788:	08001cb4 	.word	0x08001cb4
  ldr r2, =_sbss
 800078c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000790:	24000034 	.word	0x24000034

08000794 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC3_IRQHandler>
	...

08000798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079e:	2003      	movs	r0, #3
 80007a0:	f000 f968 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80007a4:	f001 f8b8 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80007a8:	4602      	mov	r2, r0
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <HAL_Init+0x68>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	0a1b      	lsrs	r3, r3, #8
 80007b0:	f003 030f 	and.w	r3, r3, #15
 80007b4:	4913      	ldr	r1, [pc, #76]	; (8000804 <HAL_Init+0x6c>)
 80007b6:	5ccb      	ldrb	r3, [r1, r3]
 80007b8:	f003 031f 	and.w	r3, r3, #31
 80007bc:	fa22 f303 	lsr.w	r3, r2, r3
 80007c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_Init+0x68>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_Init+0x6c>)
 80007cc:	5cd3      	ldrb	r3, [r2, r3]
 80007ce:	f003 031f 	and.w	r3, r3, #31
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	fa22 f303 	lsr.w	r3, r2, r3
 80007d8:	4a0b      	ldr	r2, [pc, #44]	; (8000808 <HAL_Init+0x70>)
 80007da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80007dc:	4a0b      	ldr	r2, [pc, #44]	; (800080c <HAL_Init+0x74>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e2:	200f      	movs	r0, #15
 80007e4:	f000 f814 	bl	8000810 <HAL_InitTick>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
 80007f0:	e002      	b.n	80007f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007f2:	f7ff ff57 	bl	80006a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	58024400 	.word	0x58024400
 8000804:	08001c9c 	.word	0x08001c9c
 8000808:	24000004 	.word	0x24000004
 800080c:	24000000 	.word	0x24000000

08000810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <HAL_InitTick+0x60>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d101      	bne.n	8000824 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	e021      	b.n	8000868 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <HAL_InitTick+0x64>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_InitTick+0x60>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000832:	fbb3 f3f1 	udiv	r3, r3, r1
 8000836:	fbb2 f3f3 	udiv	r3, r2, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f94d 	bl	8000ada <HAL_SYSTICK_Config>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e00e      	b.n	8000868 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b0f      	cmp	r3, #15
 800084e:	d80a      	bhi.n	8000866 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000850:	2200      	movs	r2, #0
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f000 f917 	bl	8000a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <HAL_InitTick+0x68>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	e000      	b.n	8000868 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	2400000c 	.word	0x2400000c
 8000874:	24000000 	.word	0x24000000
 8000878:	24000008 	.word	0x24000008

0800087c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x20>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_IncTick+0x24>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_IncTick+0x24>)
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	2400000c 	.word	0x2400000c
 80008a0:	24000030 	.word	0x24000030

080008a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_GetTick+0x14>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	24000030 	.word	0x24000030

080008bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <HAL_GetREVID+0x14>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	0c1b      	lsrs	r3, r3, #16
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	5c001000 	.word	0x5c001000

080008d4 <__NVIC_SetPriorityGrouping>:
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <__NVIC_SetPriorityGrouping+0x40>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	4313      	orrs	r3, r2
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	; (8000914 <__NVIC_SetPriorityGrouping+0x40>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00
 8000918:	05fa0000 	.word	0x05fa0000

0800091c <__NVIC_GetPriorityGrouping>:
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000920:	4b04      	ldr	r3, [pc, #16]	; (8000934 <__NVIC_GetPriorityGrouping+0x18>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	0a1b      	lsrs	r3, r3, #8
 8000926:	f003 0307 	and.w	r3, r3, #7
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <__NVIC_EnableIRQ>:
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000946:	2b00      	cmp	r3, #0
 8000948:	db0b      	blt.n	8000962 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094a:	88fb      	ldrh	r3, [r7, #6]
 800094c:	f003 021f 	and.w	r2, r3, #31
 8000950:	4907      	ldr	r1, [pc, #28]	; (8000970 <__NVIC_EnableIRQ+0x38>)
 8000952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000956:	095b      	lsrs	r3, r3, #5
 8000958:	2001      	movs	r0, #1
 800095a:	fa00 f202 	lsl.w	r2, r0, r2
 800095e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	; (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	; (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f7ff ff8e 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff29 	bl	80008d4 <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff40 	bl	800091c <__NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff90 	bl	80009c8 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5f 	bl	8000974 <__NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff33 	bl	8000938 <__NVIC_EnableIRQ>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffa4 	bl	8000a30 <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000af8:	f3bf 8f5f 	dmb	sy
}
 8000afc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <HAL_MPU_Disable+0x28>)
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_MPU_Disable+0x28>)
 8000b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b08:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_MPU_Disable+0x2c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	605a      	str	r2, [r3, #4]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00
 8000b20:	e000ed90 	.word	0xe000ed90

08000b24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_MPU_Enable+0x38>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_MPU_Enable+0x3c>)
 8000b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <HAL_MPU_Enable+0x3c>)
 8000b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b40:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000b42:	f3bf 8f4f 	dsb	sy
}
 8000b46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b48:	f3bf 8f6f 	isb	sy
}
 8000b4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed90 	.word	0xe000ed90
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	785a      	ldrb	r2, [r3, #1]
 8000b70:	4b1d      	ldr	r3, [pc, #116]	; (8000be8 <HAL_MPU_ConfigRegion+0x84>)
 8000b72:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d029      	beq.n	8000bd0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <HAL_MPU_ConfigRegion+0x84>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7b1b      	ldrb	r3, [r3, #12]
 8000b88:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	7adb      	ldrb	r3, [r3, #11]
 8000b8e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000b90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7a9b      	ldrb	r3, [r3, #10]
 8000b96:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000b98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7b5b      	ldrb	r3, [r3, #13]
 8000b9e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ba0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7b9b      	ldrb	r3, [r3, #14]
 8000ba6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ba8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7bdb      	ldrb	r3, [r3, #15]
 8000bae:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000bb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	7a5b      	ldrb	r3, [r3, #9]
 8000bb6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000bb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7a1b      	ldrb	r3, [r3, #8]
 8000bbe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000bc0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000bca:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000bcc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000bce:	e005      	b.n	8000bdc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_MPU_ConfigRegion+0x84>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <HAL_MPU_ConfigRegion+0x84>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed90 	.word	0xe000ed90

08000bec <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000bf4:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_HSEM_FastTake+0x2c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3320      	adds	r3, #32
 8000bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfe:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_HSEM_FastTake+0x30>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d101      	bne.n	8000c08 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	e000      	b.n	8000c0a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	58026400 	.word	0x58026400
 8000c1c:	80000300 	.word	0x80000300

08000c20 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000c2a:	4906      	ldr	r1, [pc, #24]	; (8000c44 <HAL_HSEM_Release+0x24>)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	58026400 	.word	0x58026400

08000c48 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_HSEM_ActivateNotification+0x20>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <HAL_HSEM_ActivateNotification+0x20>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	600b      	str	r3, [r1, #0]
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	58026500 	.word	0x58026500

08000c6c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_HSEM_IRQHandler+0x30>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_HSEM_IRQHandler+0x30>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	4906      	ldr	r1, [pc, #24]	; (8000c9c <HAL_HSEM_IRQHandler+0x30>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <HAL_HSEM_IRQHandler+0x30>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 ffbd 	bl	8001c0c <HAL_HSEM_FreeCallback>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	58026500 	.word	0x58026500

08000ca0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	2b06      	cmp	r3, #6
 8000cb2:	d00a      	beq.n	8000cca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000cb4:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d001      	beq.n	8000cc6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e040      	b.n	8000d48 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e03e      	b.n	8000d48 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000cca:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000cd2:	491f      	ldr	r1, [pc, #124]	; (8000d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000cda:	f7ff fde3 	bl	80008a4 <HAL_GetTick>
 8000cde:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000ce0:	e009      	b.n	8000cf6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000ce2:	f7ff fddf 	bl	80008a4 <HAL_GetTick>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cf0:	d901      	bls.n	8000cf6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e028      	b.n	8000d48 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d02:	d1ee      	bne.n	8000ce2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b1e      	cmp	r3, #30
 8000d08:	d008      	beq.n	8000d1c <HAL_PWREx_ConfigSupply+0x7c>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8000d0e:	d005      	beq.n	8000d1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b1d      	cmp	r3, #29
 8000d14:	d002      	beq.n	8000d1c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b2d      	cmp	r3, #45	; 0x2d
 8000d1a:	d114      	bne.n	8000d46 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8000d1c:	f7ff fdc2 	bl	80008a4 <HAL_GetTick>
 8000d20:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000d22:	e009      	b.n	8000d38 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000d24:	f7ff fdbe 	bl	80008a4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d32:	d901      	bls.n	8000d38 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e007      	b.n	8000d48 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_PWREx_ConfigSupply+0xb0>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d44:	d1ee      	bne.n	8000d24 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000d46:	2300      	movs	r3, #0
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	58024800 	.word	0x58024800

08000d54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d102      	bne.n	8000d68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f000 bc1c 	b.w	80015a0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 8087 	beq.w	8000e84 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d76:	4b9e      	ldr	r3, [pc, #632]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d80:	4b9b      	ldr	r3, [pc, #620]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	2b10      	cmp	r3, #16
 8000d8a:	d007      	beq.n	8000d9c <HAL_RCC_OscConfig+0x48>
 8000d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8e:	2b18      	cmp	r3, #24
 8000d90:	d110      	bne.n	8000db4 <HAL_RCC_OscConfig+0x60>
 8000d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d10b      	bne.n	8000db4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d9c:	4b94      	ldr	r3, [pc, #592]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d06c      	beq.n	8000e82 <HAL_RCC_OscConfig+0x12e>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d168      	bne.n	8000e82 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e3f5      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dbc:	d106      	bne.n	8000dcc <HAL_RCC_OscConfig+0x78>
 8000dbe:	4b8c      	ldr	r3, [pc, #560]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a8b      	ldr	r2, [pc, #556]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dc8:	6013      	str	r3, [r2, #0]
 8000dca:	e02e      	b.n	8000e2a <HAL_RCC_OscConfig+0xd6>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10c      	bne.n	8000dee <HAL_RCC_OscConfig+0x9a>
 8000dd4:	4b86      	ldr	r3, [pc, #536]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a85      	ldr	r2, [pc, #532]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b83      	ldr	r3, [pc, #524]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a82      	ldr	r2, [pc, #520]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dea:	6013      	str	r3, [r2, #0]
 8000dec:	e01d      	b.n	8000e2a <HAL_RCC_OscConfig+0xd6>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000df6:	d10c      	bne.n	8000e12 <HAL_RCC_OscConfig+0xbe>
 8000df8:	4b7d      	ldr	r3, [pc, #500]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a7c      	ldr	r2, [pc, #496]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b7a      	ldr	r3, [pc, #488]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a79      	ldr	r2, [pc, #484]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e00b      	b.n	8000e2a <HAL_RCC_OscConfig+0xd6>
 8000e12:	4b77      	ldr	r3, [pc, #476]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a76      	ldr	r2, [pc, #472]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b74      	ldr	r3, [pc, #464]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a73      	ldr	r2, [pc, #460]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d013      	beq.n	8000e5a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e32:	f7ff fd37 	bl	80008a4 <HAL_GetTick>
 8000e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e3a:	f7ff fd33 	bl	80008a4 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b64      	cmp	r3, #100	; 0x64
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e3a9      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e4c:	4b68      	ldr	r3, [pc, #416]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0xe6>
 8000e58:	e014      	b.n	8000e84 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e5a:	f7ff fd23 	bl	80008a4 <HAL_GetTick>
 8000e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e62:	f7ff fd1f 	bl	80008a4 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b64      	cmp	r3, #100	; 0x64
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e395      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e74:	4b5e      	ldr	r3, [pc, #376]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f0      	bne.n	8000e62 <HAL_RCC_OscConfig+0x10e>
 8000e80:	e000      	b.n	8000e84 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 80ca 	beq.w	8001026 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e92:	4b57      	ldr	r3, [pc, #348]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e9a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e9c:	4b54      	ldr	r3, [pc, #336]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000ea2:	6a3b      	ldr	r3, [r7, #32]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d007      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x164>
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	2b18      	cmp	r3, #24
 8000eac:	d156      	bne.n	8000f5c <HAL_RCC_OscConfig+0x208>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d151      	bne.n	8000f5c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eb8:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d005      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x17c>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e367      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000ed0:	4b47      	ldr	r3, [pc, #284]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f023 0219 	bic.w	r2, r3, #25
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	4944      	ldr	r1, [pc, #272]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000ee2:	f7ff fcdf 	bl	80008a4 <HAL_GetTick>
 8000ee6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ee8:	e008      	b.n	8000efc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eea:	f7ff fcdb 	bl	80008a4 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d901      	bls.n	8000efc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e351      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000efc:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d0f0      	beq.n	8000eea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f08:	f7ff fcd8 	bl	80008bc <HAL_GetREVID>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d817      	bhi.n	8000f46 <HAL_RCC_OscConfig+0x1f2>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	691b      	ldr	r3, [r3, #16]
 8000f1a:	2b40      	cmp	r3, #64	; 0x40
 8000f1c:	d108      	bne.n	8000f30 <HAL_RCC_OscConfig+0x1dc>
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000f26:	4a32      	ldr	r2, [pc, #200]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f2e:	e07a      	b.n	8001026 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	691b      	ldr	r3, [r3, #16]
 8000f3c:	031b      	lsls	r3, r3, #12
 8000f3e:	492c      	ldr	r1, [pc, #176]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f44:	e06f      	b.n	8001026 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f46:	4b2a      	ldr	r3, [pc, #168]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	061b      	lsls	r3, r3, #24
 8000f54:	4926      	ldr	r1, [pc, #152]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f5a:	e064      	b.n	8001026 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d047      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f64:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f023 0219 	bic.w	r2, r3, #25
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	491f      	ldr	r1, [pc, #124]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f76:	f7ff fc95 	bl	80008a4 <HAL_GetTick>
 8000f7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fc91 	bl	80008a4 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e307      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f90:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f0      	beq.n	8000f7e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9c:	f7ff fc8e 	bl	80008bc <HAL_GetREVID>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d817      	bhi.n	8000fda <HAL_RCC_OscConfig+0x286>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b40      	cmp	r3, #64	; 0x40
 8000fb0:	d108      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x270>
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	6053      	str	r3, [r2, #4]
 8000fc2:	e030      	b.n	8001026 <HAL_RCC_OscConfig+0x2d2>
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	031b      	lsls	r3, r3, #12
 8000fd2:	4907      	ldr	r1, [pc, #28]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
 8000fd8:	e025      	b.n	8001026 <HAL_RCC_OscConfig+0x2d2>
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	061b      	lsls	r3, r3, #24
 8000fe8:	4901      	ldr	r1, [pc, #4]	; (8000ff0 <HAL_RCC_OscConfig+0x29c>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	604b      	str	r3, [r1, #4]
 8000fee:	e01a      	b.n	8001026 <HAL_RCC_OscConfig+0x2d2>
 8000ff0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff4:	4b9e      	ldr	r3, [pc, #632]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a9d      	ldr	r2, [pc, #628]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001000:	f7ff fc50 	bl	80008a4 <HAL_GetTick>
 8001004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001008:	f7ff fc4c 	bl	80008a4 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e2c2      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800101a:	4b95      	ldr	r3, [pc, #596]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0310 	and.w	r3, r3, #16
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 80a9 	beq.w	8001186 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001034:	4b8e      	ldr	r3, [pc, #568]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800103c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800103e:	4b8c      	ldr	r3, [pc, #560]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8001040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001042:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2b08      	cmp	r3, #8
 8001048:	d007      	beq.n	800105a <HAL_RCC_OscConfig+0x306>
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b18      	cmp	r3, #24
 800104e:	d13a      	bne.n	80010c6 <HAL_RCC_OscConfig+0x372>
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d135      	bne.n	80010c6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800105a:	4b85      	ldr	r3, [pc, #532]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001062:	2b00      	cmp	r3, #0
 8001064:	d005      	beq.n	8001072 <HAL_RCC_OscConfig+0x31e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	2b80      	cmp	r3, #128	; 0x80
 800106c:	d001      	beq.n	8001072 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e296      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001072:	f7ff fc23 	bl	80008bc <HAL_GetREVID>
 8001076:	4603      	mov	r3, r0
 8001078:	f241 0203 	movw	r2, #4099	; 0x1003
 800107c:	4293      	cmp	r3, r2
 800107e:	d817      	bhi.n	80010b0 <HAL_RCC_OscConfig+0x35c>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	2b20      	cmp	r3, #32
 8001086:	d108      	bne.n	800109a <HAL_RCC_OscConfig+0x346>
 8001088:	4b79      	ldr	r3, [pc, #484]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001090:	4a77      	ldr	r2, [pc, #476]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8001092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001096:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001098:	e075      	b.n	8001186 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800109a:	4b75      	ldr	r3, [pc, #468]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	069b      	lsls	r3, r3, #26
 80010a8:	4971      	ldr	r1, [pc, #452]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010ae:	e06a      	b.n	8001186 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010b0:	4b6f      	ldr	r3, [pc, #444]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	061b      	lsls	r3, r3, #24
 80010be:	496c      	ldr	r1, [pc, #432]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010c4:	e05f      	b.n	8001186 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d042      	beq.n	8001154 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80010ce:	4b68      	ldr	r3, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a67      	ldr	r2, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010da:	f7ff fbe3 	bl	80008a4 <HAL_GetTick>
 80010de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80010e2:	f7ff fbdf 	bl	80008a4 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e255      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80010f4:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001100:	f7ff fbdc 	bl	80008bc <HAL_GetREVID>
 8001104:	4603      	mov	r3, r0
 8001106:	f241 0203 	movw	r2, #4099	; 0x1003
 800110a:	4293      	cmp	r3, r2
 800110c:	d817      	bhi.n	800113e <HAL_RCC_OscConfig+0x3ea>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	2b20      	cmp	r3, #32
 8001114:	d108      	bne.n	8001128 <HAL_RCC_OscConfig+0x3d4>
 8001116:	4b56      	ldr	r3, [pc, #344]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800111e:	4a54      	ldr	r2, [pc, #336]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8001120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001124:	6053      	str	r3, [r2, #4]
 8001126:	e02e      	b.n	8001186 <HAL_RCC_OscConfig+0x432>
 8001128:	4b51      	ldr	r3, [pc, #324]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	069b      	lsls	r3, r3, #26
 8001136:	494e      	ldr	r1, [pc, #312]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
 800113c:	e023      	b.n	8001186 <HAL_RCC_OscConfig+0x432>
 800113e:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	061b      	lsls	r3, r3, #24
 800114c:	4948      	ldr	r1, [pc, #288]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800114e:	4313      	orrs	r3, r2
 8001150:	60cb      	str	r3, [r1, #12]
 8001152:	e018      	b.n	8001186 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001154:	4b46      	ldr	r3, [pc, #280]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a45      	ldr	r2, [pc, #276]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800115a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800115e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001160:	f7ff fba0 	bl	80008a4 <HAL_GetTick>
 8001164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001168:	f7ff fb9c 	bl	80008a4 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e212      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d036      	beq.n	8001200 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d019      	beq.n	80011ce <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800119a:	4b35      	ldr	r3, [pc, #212]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800119c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800119e:	4a34      	ldr	r2, [pc, #208]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a6:	f7ff fb7d 	bl	80008a4 <HAL_GetTick>
 80011aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ae:	f7ff fb79 	bl	80008a4 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e1ef      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80011c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x45a>
 80011cc:	e018      	b.n	8001200 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80011d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011d2:	4a27      	ldr	r2, [pc, #156]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80011d4:	f023 0301 	bic.w	r3, r3, #1
 80011d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011da:	f7ff fb63 	bl	80008a4 <HAL_GetTick>
 80011de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e2:	f7ff fb5f 	bl	80008a4 <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e1d5      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 80011f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f0      	bne.n	80011e2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0320 	and.w	r3, r3, #32
 8001208:	2b00      	cmp	r3, #0
 800120a:	d039      	beq.n	8001280 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d019      	beq.n	8001248 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800121a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001220:	f7ff fb40 	bl	80008a4 <HAL_GetTick>
 8001224:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001226:	e008      	b.n	800123a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001228:	f7ff fb3c 	bl	80008a4 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d901      	bls.n	800123a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	e1b2      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d0f0      	beq.n	8001228 <HAL_RCC_OscConfig+0x4d4>
 8001246:	e01b      	b.n	8001280 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_RCC_OscConfig+0x51c>)
 800124e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001252:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001254:	f7ff fb26 	bl	80008a4 <HAL_GetTick>
 8001258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800125a:	e00b      	b.n	8001274 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800125c:	f7ff fb22 	bl	80008a4 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d904      	bls.n	8001274 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e198      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
 800126e:	bf00      	nop
 8001270:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001274:	4ba3      	ldr	r3, [pc, #652]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1ed      	bne.n	800125c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8081 	beq.w	8001390 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800128e:	4b9e      	ldr	r3, [pc, #632]	; (8001508 <HAL_RCC_OscConfig+0x7b4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a9d      	ldr	r2, [pc, #628]	; (8001508 <HAL_RCC_OscConfig+0x7b4>)
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800129a:	f7ff fb03 	bl	80008a4 <HAL_GetTick>
 800129e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80012a2:	f7ff faff 	bl	80008a4 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b64      	cmp	r3, #100	; 0x64
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e175      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80012b4:	4b94      	ldr	r3, [pc, #592]	; (8001508 <HAL_RCC_OscConfig+0x7b4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x582>
 80012c8:	4b8e      	ldr	r3, [pc, #568]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80012ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012cc:	4a8d      	ldr	r2, [pc, #564]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6713      	str	r3, [r2, #112]	; 0x70
 80012d4:	e02d      	b.n	8001332 <HAL_RCC_OscConfig+0x5de>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x5a4>
 80012de:	4b89      	ldr	r3, [pc, #548]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e2:	4a88      	ldr	r2, [pc, #544]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	6713      	str	r3, [r2, #112]	; 0x70
 80012ea:	4b86      	ldr	r3, [pc, #536]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ee:	4a85      	ldr	r2, [pc, #532]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80012f0:	f023 0304 	bic.w	r3, r3, #4
 80012f4:	6713      	str	r3, [r2, #112]	; 0x70
 80012f6:	e01c      	b.n	8001332 <HAL_RCC_OscConfig+0x5de>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b05      	cmp	r3, #5
 80012fe:	d10c      	bne.n	800131a <HAL_RCC_OscConfig+0x5c6>
 8001300:	4b80      	ldr	r3, [pc, #512]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001304:	4a7f      	ldr	r2, [pc, #508]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6713      	str	r3, [r2, #112]	; 0x70
 800130c:	4b7d      	ldr	r3, [pc, #500]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001310:	4a7c      	ldr	r2, [pc, #496]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6713      	str	r3, [r2, #112]	; 0x70
 8001318:	e00b      	b.n	8001332 <HAL_RCC_OscConfig+0x5de>
 800131a:	4b7a      	ldr	r3, [pc, #488]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 800131c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131e:	4a79      	ldr	r2, [pc, #484]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001320:	f023 0301 	bic.w	r3, r3, #1
 8001324:	6713      	str	r3, [r2, #112]	; 0x70
 8001326:	4b77      	ldr	r3, [pc, #476]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132a:	4a76      	ldr	r2, [pc, #472]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 800132c:	f023 0304 	bic.w	r3, r3, #4
 8001330:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d015      	beq.n	8001366 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133a:	f7ff fab3 	bl	80008a4 <HAL_GetTick>
 800133e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001340:	e00a      	b.n	8001358 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff faaf 	bl	80008a4 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e123      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001358:	4b6a      	ldr	r3, [pc, #424]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 800135a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0ee      	beq.n	8001342 <HAL_RCC_OscConfig+0x5ee>
 8001364:	e014      	b.n	8001390 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fa9d 	bl	80008a4 <HAL_GetTick>
 800136a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fa99 	bl	80008a4 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e10d      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001384:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1ee      	bne.n	800136e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8102 	beq.w	800159e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800139a:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013a2:	2b18      	cmp	r3, #24
 80013a4:	f000 80bd 	beq.w	8001522 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	f040 8095 	bne.w	80014dc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b2:	4b54      	ldr	r3, [pc, #336]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a53      	ldr	r2, [pc, #332]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80013b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fa71 	bl	80008a4 <HAL_GetTick>
 80013c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c6:	f7ff fa6d 	bl	80008a4 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e0e3      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013d8:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e4:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80013e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013e8:	4b48      	ldr	r3, [pc, #288]	; (800150c <HAL_RCC_OscConfig+0x7b8>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	430a      	orrs	r2, r1
 80013f8:	4942      	ldr	r1, [pc, #264]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	628b      	str	r3, [r1, #40]	; 0x28
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	3b01      	subs	r3, #1
 8001404:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140c:	3b01      	subs	r3, #1
 800140e:	025b      	lsls	r3, r3, #9
 8001410:	b29b      	uxth	r3, r3
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001418:	3b01      	subs	r3, #1
 800141a:	041b      	lsls	r3, r3, #16
 800141c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001426:	3b01      	subs	r3, #1
 8001428:	061b      	lsls	r3, r3, #24
 800142a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800142e:	4935      	ldr	r1, [pc, #212]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001430:	4313      	orrs	r3, r2
 8001432:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	4a32      	ldr	r2, [pc, #200]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001444:	4b32      	ldr	r3, [pc, #200]	; (8001510 <HAL_RCC_OscConfig+0x7bc>)
 8001446:	4013      	ands	r3, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800144c:	00d2      	lsls	r2, r2, #3
 800144e:	492d      	ldr	r1, [pc, #180]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001450:	4313      	orrs	r3, r2
 8001452:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	f023 020c 	bic.w	r2, r3, #12
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4928      	ldr	r1, [pc, #160]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001462:	4313      	orrs	r3, r2
 8001464:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	f023 0202 	bic.w	r2, r3, #2
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	4924      	ldr	r1, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001474:	4313      	orrs	r3, r2
 8001476:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001478:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 800147a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 800147e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001484:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 800148a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 8001496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	4a18      	ldr	r2, [pc, #96]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a15      	ldr	r2, [pc, #84]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff f9f6 	bl	80008a4 <HAL_GetTick>
 80014b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014bc:	f7ff f9f2 	bl	80008a4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e068      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x768>
 80014da:	e060      	b.n	800159e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_RCC_OscConfig+0x7b0>)
 80014e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff f9dc 	bl	80008a4 <HAL_GetTick>
 80014ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014ee:	e011      	b.n	8001514 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff f9d8 	bl	80008a4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d90a      	bls.n	8001514 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e04e      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
 8001502:	bf00      	nop
 8001504:	58024400 	.word	0x58024400
 8001508:	58024800 	.word	0x58024800
 800150c:	fffffc0c 	.word	0xfffffc0c
 8001510:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_RCC_OscConfig+0x854>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1e7      	bne.n	80014f0 <HAL_RCC_OscConfig+0x79c>
 8001520:	e03d      	b.n	800159e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_RCC_OscConfig+0x854>)
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <HAL_RCC_OscConfig+0x854>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	2b01      	cmp	r3, #1
 8001534:	d031      	beq.n	800159a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f003 0203 	and.w	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001540:	429a      	cmp	r2, r3
 8001542:	d12a      	bne.n	800159a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001550:	429a      	cmp	r2, r3
 8001552:	d122      	bne.n	800159a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001560:	429a      	cmp	r2, r3
 8001562:	d11a      	bne.n	800159a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	0a5b      	lsrs	r3, r3, #9
 8001568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001570:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001572:	429a      	cmp	r2, r3
 8001574:	d111      	bne.n	800159a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001582:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d108      	bne.n	800159a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	0e1b      	lsrs	r3, r3, #24
 800158c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001594:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3730      	adds	r7, #48	; 0x30
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58024400 	.word	0x58024400

080015ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e19c      	b.n	80018fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b8a      	ldr	r3, [pc, #552]	; (80017ec <HAL_RCC_ClockConfig+0x240>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d910      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b87      	ldr	r3, [pc, #540]	; (80017ec <HAL_RCC_ClockConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 020f 	bic.w	r2, r3, #15
 80015d6:	4985      	ldr	r1, [pc, #532]	; (80017ec <HAL_RCC_ClockConfig+0x240>)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b83      	ldr	r3, [pc, #524]	; (80017ec <HAL_RCC_ClockConfig+0x240>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e184      	b.n	80018fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d010      	beq.n	800161e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	4b7b      	ldr	r3, [pc, #492]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001608:	429a      	cmp	r2, r3
 800160a:	d908      	bls.n	800161e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800160c:	4b78      	ldr	r3, [pc, #480]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	4975      	ldr	r1, [pc, #468]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800161a:	4313      	orrs	r3, r2
 800161c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d010      	beq.n	800164c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001636:	429a      	cmp	r2, r3
 8001638:	d908      	bls.n	800164c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800163a:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	496a      	ldr	r1, [pc, #424]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 8001648:	4313      	orrs	r3, r2
 800164a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	2b00      	cmp	r3, #0
 8001656:	d010      	beq.n	800167a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699a      	ldr	r2, [r3, #24]
 800165c:	4b64      	ldr	r3, [pc, #400]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001664:	429a      	cmp	r2, r3
 8001666:	d908      	bls.n	800167a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001668:	4b61      	ldr	r3, [pc, #388]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	495e      	ldr	r1, [pc, #376]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 8001676:	4313      	orrs	r3, r2
 8001678:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	2b00      	cmp	r3, #0
 8001684:	d010      	beq.n	80016a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69da      	ldr	r2, [r3, #28]
 800168a:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001692:	429a      	cmp	r2, r3
 8001694:	d908      	bls.n	80016a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001696:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4953      	ldr	r1, [pc, #332]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d010      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	4b4d      	ldr	r3, [pc, #308]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d908      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c4:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f023 020f 	bic.w	r2, r3, #15
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	4947      	ldr	r1, [pc, #284]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d055      	beq.n	800178e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80016e2:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	4940      	ldr	r1, [pc, #256]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d107      	bne.n	800170c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016fc:	4b3c      	ldr	r3, [pc, #240]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d121      	bne.n	800174c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0f6      	b.n	80018fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b03      	cmp	r3, #3
 8001712:	d107      	bne.n	8001724 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001714:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d115      	bne.n	800174c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0ea      	b.n	80018fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d107      	bne.n	800173c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800172c:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d109      	bne.n	800174c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0de      	b.n	80018fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800173c:	4b2c      	ldr	r3, [pc, #176]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0d6      	b.n	80018fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	f023 0207 	bic.w	r2, r3, #7
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4925      	ldr	r1, [pc, #148]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800175a:	4313      	orrs	r3, r2
 800175c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff f8a1 	bl	80008a4 <HAL_GetTick>
 8001762:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001764:	e00a      	b.n	800177c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001766:	f7ff f89d 	bl	80008a4 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	; 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e0be      	b.n	80018fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	429a      	cmp	r2, r3
 800178c:	d1eb      	bne.n	8001766 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d208      	bcs.n	80017bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f023 020f 	bic.w	r2, r3, #15
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	490e      	ldr	r1, [pc, #56]	; (80017f0 <HAL_RCC_ClockConfig+0x244>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_ClockConfig+0x240>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d214      	bcs.n	80017f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_RCC_ClockConfig+0x240>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 020f 	bic.w	r2, r3, #15
 80017d2:	4906      	ldr	r1, [pc, #24]	; (80017ec <HAL_RCC_ClockConfig+0x240>)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_RCC_ClockConfig+0x240>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e086      	b.n	80018fa <HAL_RCC_ClockConfig+0x34e>
 80017ec:	52002000 	.word	0x52002000
 80017f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d010      	beq.n	8001822 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800180c:	429a      	cmp	r2, r3
 800180e:	d208      	bcs.n	8001822 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001810:	4b3c      	ldr	r3, [pc, #240]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	4939      	ldr	r1, [pc, #228]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 800181e:	4313      	orrs	r3, r2
 8001820:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d010      	beq.n	8001850 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800183a:	429a      	cmp	r2, r3
 800183c:	d208      	bcs.n	8001850 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	492e      	ldr	r1, [pc, #184]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 800184c:	4313      	orrs	r3, r2
 800184e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d010      	beq.n	800187e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	4b28      	ldr	r3, [pc, #160]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001868:	429a      	cmp	r2, r3
 800186a:	d208      	bcs.n	800187e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	4922      	ldr	r1, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 800187a:	4313      	orrs	r3, r2
 800187c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b00      	cmp	r3, #0
 8001888:	d010      	beq.n	80018ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001896:	429a      	cmp	r2, r3
 8001898:	d208      	bcs.n	80018ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4917      	ldr	r1, [pc, #92]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018ac:	f000 f834 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	4912      	ldr	r1, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x35c>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_RCC_ClockConfig+0x358>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_RCC_ClockConfig+0x35c>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	fa22 f303 	lsr.w	r3, r2, r3
 80018e0:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x360>)
 80018e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018e4:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x364>)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_RCC_ClockConfig+0x368>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe ff8e 	bl	8000810 <HAL_InitTick>
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	58024400 	.word	0x58024400
 8001908:	08001c9c 	.word	0x08001c9c
 800190c:	24000004 	.word	0x24000004
 8001910:	24000000 	.word	0x24000000
 8001914:	24000008 	.word	0x24000008

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800191e:	4bb3      	ldr	r3, [pc, #716]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001926:	2b18      	cmp	r3, #24
 8001928:	f200 8155 	bhi.w	8001bd6 <HAL_RCC_GetSysClockFreq+0x2be>
 800192c:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <HAL_RCC_GetSysClockFreq+0x1c>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	08001999 	.word	0x08001999
 8001938:	08001bd7 	.word	0x08001bd7
 800193c:	08001bd7 	.word	0x08001bd7
 8001940:	08001bd7 	.word	0x08001bd7
 8001944:	08001bd7 	.word	0x08001bd7
 8001948:	08001bd7 	.word	0x08001bd7
 800194c:	08001bd7 	.word	0x08001bd7
 8001950:	08001bd7 	.word	0x08001bd7
 8001954:	080019bf 	.word	0x080019bf
 8001958:	08001bd7 	.word	0x08001bd7
 800195c:	08001bd7 	.word	0x08001bd7
 8001960:	08001bd7 	.word	0x08001bd7
 8001964:	08001bd7 	.word	0x08001bd7
 8001968:	08001bd7 	.word	0x08001bd7
 800196c:	08001bd7 	.word	0x08001bd7
 8001970:	08001bd7 	.word	0x08001bd7
 8001974:	080019c5 	.word	0x080019c5
 8001978:	08001bd7 	.word	0x08001bd7
 800197c:	08001bd7 	.word	0x08001bd7
 8001980:	08001bd7 	.word	0x08001bd7
 8001984:	08001bd7 	.word	0x08001bd7
 8001988:	08001bd7 	.word	0x08001bd7
 800198c:	08001bd7 	.word	0x08001bd7
 8001990:	08001bd7 	.word	0x08001bd7
 8001994:	080019cb 	.word	0x080019cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001998:	4b94      	ldr	r3, [pc, #592]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d009      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80019a4:	4b91      	ldr	r3, [pc, #580]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	4a90      	ldr	r2, [pc, #576]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
 80019b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80019b6:	e111      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80019b8:	4b8d      	ldr	r3, [pc, #564]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80019ba:	61bb      	str	r3, [r7, #24]
    break;
 80019bc:	e10e      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80019be:	4b8d      	ldr	r3, [pc, #564]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80019c0:	61bb      	str	r3, [r7, #24]
    break;
 80019c2:	e10b      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80019c4:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80019c6:	61bb      	str	r3, [r7, #24]
    break;
 80019c8:	e108      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80019ca:	4b88      	ldr	r3, [pc, #544]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80019d4:	4b85      	ldr	r3, [pc, #532]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80019e0:	4b82      	ldr	r3, [pc, #520]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80019ea:	4b80      	ldr	r3, [pc, #512]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80019ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ee:	08db      	lsrs	r3, r3, #3
 80019f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 80e1 	beq.w	8001bd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	f000 8083 	beq.w	8001b1c <HAL_RCC_GetSysClockFreq+0x204>
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	f200 80a1 	bhi.w	8001b60 <HAL_RCC_GetSysClockFreq+0x248>
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x114>
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d056      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001a2a:	e099      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0320 	and.w	r3, r3, #32
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d02d      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a38:	4b6c      	ldr	r3, [pc, #432]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	4a6b      	ldr	r2, [pc, #428]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
 8001a48:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a62:	4b62      	ldr	r3, [pc, #392]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001a92:	e087      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	ee07 3a90 	vmov	s15, r3
 8001a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001c00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aa6:	4b51      	ldr	r3, [pc, #324]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ad6:	e065      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	ee07 3a90 	vmov	s15, r3
 8001ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ae2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aea:	4b40      	ldr	r3, [pc, #256]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af2:	ee07 3a90 	vmov	s15, r3
 8001af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8001afe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b1a:	e043      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001c08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b5e:	e021      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8001b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ba2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba8:	0a5b      	lsrs	r3, r3, #9
 8001baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bae:	3301      	adds	r3, #1
 8001bb0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bc8:	ee17 3a90 	vmov	r3, s15
 8001bcc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001bce:	e005      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
    break;
 8001bd4:	e002      	b.n	8001bdc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001bd8:	61bb      	str	r3, [r7, #24]
    break;
 8001bda:	bf00      	nop
  }

  return sysclockfreq;
 8001bdc:	69bb      	ldr	r3, [r7, #24]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	03d09000 	.word	0x03d09000
 8001bf4:	003d0900 	.word	0x003d0900
 8001bf8:	017d7840 	.word	0x017d7840
 8001bfc:	46000000 	.word	0x46000000
 8001c00:	4c742400 	.word	0x4c742400
 8001c04:	4a742400 	.word	0x4a742400
 8001c08:	4bbebc20 	.word	0x4bbebc20

08001c0c <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <HAL_HSEM_FreeCallback+0x1c>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f7ff f814 	bl	8000c48 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2400002c 	.word	0x2400002c

08001c2c <__libc_init_array>:
 8001c2c:	b570      	push	{r4, r5, r6, lr}
 8001c2e:	4d0d      	ldr	r5, [pc, #52]	; (8001c64 <__libc_init_array+0x38>)
 8001c30:	4c0d      	ldr	r4, [pc, #52]	; (8001c68 <__libc_init_array+0x3c>)
 8001c32:	1b64      	subs	r4, r4, r5
 8001c34:	10a4      	asrs	r4, r4, #2
 8001c36:	2600      	movs	r6, #0
 8001c38:	42a6      	cmp	r6, r4
 8001c3a:	d109      	bne.n	8001c50 <__libc_init_array+0x24>
 8001c3c:	4d0b      	ldr	r5, [pc, #44]	; (8001c6c <__libc_init_array+0x40>)
 8001c3e:	4c0c      	ldr	r4, [pc, #48]	; (8001c70 <__libc_init_array+0x44>)
 8001c40:	f000 f820 	bl	8001c84 <_init>
 8001c44:	1b64      	subs	r4, r4, r5
 8001c46:	10a4      	asrs	r4, r4, #2
 8001c48:	2600      	movs	r6, #0
 8001c4a:	42a6      	cmp	r6, r4
 8001c4c:	d105      	bne.n	8001c5a <__libc_init_array+0x2e>
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c54:	4798      	blx	r3
 8001c56:	3601      	adds	r6, #1
 8001c58:	e7ee      	b.n	8001c38 <__libc_init_array+0xc>
 8001c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c5e:	4798      	blx	r3
 8001c60:	3601      	adds	r6, #1
 8001c62:	e7f2      	b.n	8001c4a <__libc_init_array+0x1e>
 8001c64:	08001cac 	.word	0x08001cac
 8001c68:	08001cac 	.word	0x08001cac
 8001c6c:	08001cac 	.word	0x08001cac
 8001c70:	08001cb0 	.word	0x08001cb0

08001c74 <memset>:
 8001c74:	4402      	add	r2, r0
 8001c76:	4603      	mov	r3, r0
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d100      	bne.n	8001c7e <memset+0xa>
 8001c7c:	4770      	bx	lr
 8001c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8001c82:	e7f9      	b.n	8001c78 <memset+0x4>

08001c84 <_init>:
 8001c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c86:	bf00      	nop
 8001c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8a:	bc08      	pop	{r3}
 8001c8c:	469e      	mov	lr, r3
 8001c8e:	4770      	bx	lr

08001c90 <_fini>:
 8001c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c92:	bf00      	nop
 8001c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c96:	bc08      	pop	{r3}
 8001c98:	469e      	mov	lr, r3
 8001c9a:	4770      	bx	lr
