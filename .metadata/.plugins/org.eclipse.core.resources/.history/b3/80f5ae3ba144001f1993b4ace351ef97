
2_HSEMCoreDev_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000495c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c2c  08004c2c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c34  08004c34  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c34  08004c34  00014c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c38  08004c38  00014c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  24000010  08004c4c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c0  08004c4c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188fb  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fe  00000000  00000000  00038939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0003b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0003bb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038c30  00000000  00000000  0003c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e694  00000000  00000000  000751a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179e63  00000000  00000000  00083834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fd697  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c80  00000000  00000000  001fd6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004bdc 	.word	0x08004bdc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004bdc 	.word	0x08004bdc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b27      	ldr	r3, [pc, #156]	; (80007b0 <main+0xac>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 f961 	bl	80009f4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fa45 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f83f 	bl	80007b8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <main+0xac>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <main+0xac>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <main+0xac>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fde5 	bl	8001328 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fdfb 	bl	800135c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <main+0xac>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 f933 	bl	80009f4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f8dd 	bl	800094c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f88f 	bl	80008b4 <MX_USART3_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* Take the Hardware semaphore */
	HAL_HSEM_Take(HSEM_ID_1,0);
 8000796:	2100      	movs	r1, #0
 8000798:	2001      	movs	r0, #1
 800079a:	f000 fda3 	bl	80012e4 <HAL_HSEM_Take>
	HAL_GPIO_TogglePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin);
 800079e:	2102      	movs	r1, #2
 80007a0:	4804      	ldr	r0, [pc, #16]	; (80007b4 <main+0xb0>)
 80007a2:	f000 fd84 	bl	80012ae <HAL_GPIO_TogglePin>
	/* Release The Hardware Semaphore */
	HAL_HSEM_Release(HSEM_ID_1,0);
 80007a6:	2100      	movs	r1, #0
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 fdd7 	bl	800135c <HAL_HSEM_Release>
	HAL_HSEM_Take(HSEM_ID_1,0);
 80007ae:	e7f2      	b.n	8000796 <main+0x92>
 80007b0:	58024400 	.word	0x58024400
 80007b4:	58021000 	.word	0x58021000

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	; 0x70
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	224c      	movs	r2, #76	; 0x4c
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f004 fa00 	bl	8004bcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2220      	movs	r2, #32
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 f9fa 	bl	8004bcc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007d8:	2004      	movs	r0, #4
 80007da:	f000 fdf7 	bl	80013cc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b32      	ldr	r3, [pc, #200]	; (80008ac <SystemClock_Config+0xf4>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	4a31      	ldr	r2, [pc, #196]	; (80008ac <SystemClock_Config+0xf4>)
 80007e8:	f023 0301 	bic.w	r3, r3, #1
 80007ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <SystemClock_Config+0xf4>)
 80007f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <SystemClock_Config+0xf8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000800:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <SystemClock_Config+0xf8>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000806:	6193      	str	r3, [r2, #24]
 8000808:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <SystemClock_Config+0xf8>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000814:	bf00      	nop
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <SystemClock_Config+0xf8>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000822:	d1f8      	bne.n	8000816 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000828:	2301      	movs	r3, #1
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000838:	2304      	movs	r3, #4
 800083a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 800083c:	2309      	movs	r3, #9
 800083e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000844:	2302      	movs	r3, #2
 8000846:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084c:	230c      	movs	r3, #12
 800084e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000850:	2302      	movs	r3, #2
 8000852:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000854:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000858:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fe0e 	bl	8001480 <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800086a:	f000 f8c3 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	233f      	movs	r3, #63	; 0x3f
 8000870:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2303      	movs	r3, #3
 8000874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000882:	2340      	movs	r3, #64	; 0x40
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fa20 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800089e:	f000 f8a9 	bl	80009f4 <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3770      	adds	r7, #112	; 0x70
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	58000400 	.word	0x58000400
 80008b0:	58024800 	.word	0x58024800

080008b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <MX_USART3_UART_Init+0x94>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_USART3_UART_Init+0x90>)
 80008fe:	f003 f8d9 	bl	8003ab4 <HAL_UART_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 f874 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000910:	f004 f86e 	bl	80049f0 <HAL_UARTEx_SetTxFifoThreshold>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 f86b 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000922:	f004 f8a3 	bl	8004a6c <HAL_UARTEx_SetRxFifoThreshold>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800092c:	f000 f862 	bl	80009f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_USART3_UART_Init+0x90>)
 8000932:	f004 f824 	bl	800497e <HAL_UARTEx_DisableFifoMode>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800093c:	f000 f85a 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2400002c 	.word	0x2400002c
 8000948:	40004800 	.word	0x40004800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_GPIO_Init+0xa0>)
 8000964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000968:	4a20      	ldr	r2, [pc, #128]	; (80009ec <MX_GPIO_Init+0xa0>)
 800096a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800096e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_GPIO_Init+0xa0>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_GPIO_Init+0xa0>)
 8000982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000986:	4a19      	ldr	r2, [pc, #100]	; (80009ec <MX_GPIO_Init+0xa0>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000990:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_GPIO_Init+0xa0>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <MX_GPIO_Init+0xa0>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	4a11      	ldr	r2, [pc, #68]	; (80009ec <MX_GPIO_Init+0xa0>)
 80009a6:	f043 0310 	orr.w	r3, r3, #16
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_GPIO_Init+0xa0>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	f003 0310 	and.w	r3, r3, #16
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2102      	movs	r1, #2
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0xa4>)
 80009c2:	f000 fc5b 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Yellow_LED_Pin */
  GPIO_InitStruct.Pin = Yellow_LED_Pin;
 80009c6:	2302      	movs	r3, #2
 80009c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Yellow_LED_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0xa4>)
 80009de:	f000 fa9d 	bl	8000f1c <HAL_GPIO_Init>

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58024400 	.word	0x58024400
 80009f0:	58021000 	.word	0x58021000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <HAL_MspInit+0x3c>)
 8000a08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <HAL_MspInit+0x3c>)
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_MspInit+0x3c>)
 8000a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	207d      	movs	r0, #125	; 0x7d
 8000a2a:	f000 fa42 	bl	8000eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000a2e:	207d      	movs	r0, #125	; 0x7d
 8000a30:	f000 fa59 	bl	8000ee6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	58024400 	.word	0x58024400

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0b8      	sub	sp, #224	; 0xe0
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 0310 	add.w	r3, r7, #16
 8000a5c:	22bc      	movs	r2, #188	; 0xbc
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 f8b3 	bl	8004bcc <memset>
  if(huart->Instance==USART3)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a25      	ldr	r2, [pc, #148]	; (8000b00 <HAL_UART_MspInit+0xc0>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d142      	bne.n	8000af6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a70:	2302      	movs	r3, #2
 8000a72:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 fcb6 	bl	80023f0 <HAL_RCCEx_PeriphCLKConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a8a:	f7ff ffb3 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <HAL_UART_MspInit+0xc4>)
 8000a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a94:	4a1b      	ldr	r2, [pc, #108]	; (8000b04 <HAL_UART_MspInit+0xc4>)
 8000a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <HAL_UART_MspInit+0xc4>)
 8000aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_UART_MspInit+0xc4>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <HAL_UART_MspInit+0xc4>)
 8000ab4:	f043 0308 	orr.w	r3, r3, #8
 8000ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_UART_MspInit+0xc4>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ace:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_UART_MspInit+0xc8>)
 8000af2:	f000 fa13 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	37e0      	adds	r7, #224	; 0xe0
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004800 	.word	0x40004800
 8000b04:	58024400 	.word	0x58024400
 8000b08:	58020c00 	.word	0x58020c00

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f8a4 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000b64:	f000 fc0e 	bl	8001384 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b70:	f7ff fd2e 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f003 fff3 	bl	8004b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fdb1 	bl	8000704 <main>
  bx  lr
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ba8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bac:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bb0:	08004c3c 	.word	0x08004c3c
  ldr r2, =_sbss
 8000bb4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bb8:	240000c0 	.word	0x240000c0

08000bbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC3_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	f000 f968 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bcc:	f001 fa3a 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_Init+0x68>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	4913      	ldr	r1, [pc, #76]	; (8000c2c <HAL_Init+0x6c>)
 8000bde:	5ccb      	ldrb	r3, [r1, r3]
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_Init+0x68>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_Init+0x6c>)
 8000bf4:	5cd3      	ldrb	r3, [r2, r3]
 8000bf6:	f003 031f 	and.w	r3, r3, #31
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <HAL_Init+0x70>)
 8000c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_Init+0x74>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0a:	200f      	movs	r0, #15
 8000c0c:	f000 f814 	bl	8000c38 <HAL_InitTick>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e002      	b.n	8000c20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1a:	f7ff fef1 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	08004bf4 	.word	0x08004bf4
 8000c30:	24000004 	.word	0x24000004
 8000c34:	24000000 	.word	0x24000000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_InitTick+0x60>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e021      	b.n	8000c90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_InitTick+0x64>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_InitTick+0x60>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f94d 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f917 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x68>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2400000c 	.word	0x2400000c
 8000c9c:	24000000 	.word	0x24000000
 8000ca0:	24000008 	.word	0x24000008

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2400000c 	.word	0x2400000c
 8000cc8:	240000bc 	.word	0x240000bc

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	240000bc 	.word	0x240000bc

08000ce4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetREVID+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0c1b      	lsrs	r3, r3, #16
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	5c001000 	.word	0x5c001000

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00
 8000d40:	05fa0000 	.word	0x05fa0000

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff29 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff40 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff90 	bl	8000df0 <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5f 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff33 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa4 	bl	8000e58 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f2a:	4b89      	ldr	r3, [pc, #548]	; (8001150 <HAL_GPIO_Init+0x234>)
 8000f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f2e:	e194      	b.n	800125a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2101      	movs	r1, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f000 8186 	beq.w	8001254 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d005      	beq.n	8000f60 <HAL_GPIO_Init+0x44>
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d130      	bne.n	8000fc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f96:	2201      	movs	r2, #1
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	f003 0201 	and.w	r2, r3, #1
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b03      	cmp	r3, #3
 8000fcc:	d017      	beq.n	8000ffe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d123      	bne.n	8001052 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	220f      	movs	r2, #15
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	691a      	ldr	r2, [r3, #16]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	f003 0307 	and.w	r3, r3, #7
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	69b9      	ldr	r1, [r7, #24]
 800104e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	2203      	movs	r2, #3
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0203 	and.w	r2, r3, #3
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 80e0 	beq.w	8001254 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_GPIO_Init+0x238>)
 8001096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800109a:	4a2e      	ldr	r2, [pc, #184]	; (8001154 <HAL_GPIO_Init+0x238>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010a4:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <HAL_GPIO_Init+0x238>)
 80010a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a29      	ldr	r2, [pc, #164]	; (8001158 <HAL_GPIO_Init+0x23c>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a20      	ldr	r2, [pc, #128]	; (800115c <HAL_GPIO_Init+0x240>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d052      	beq.n	8001184 <HAL_GPIO_Init+0x268>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <HAL_GPIO_Init+0x244>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d031      	beq.n	800114a <HAL_GPIO_Init+0x22e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <HAL_GPIO_Init+0x248>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d02b      	beq.n	8001146 <HAL_GPIO_Init+0x22a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <HAL_GPIO_Init+0x24c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d025      	beq.n	8001142 <HAL_GPIO_Init+0x226>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <HAL_GPIO_Init+0x250>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d01f      	beq.n	800113e <HAL_GPIO_Init+0x222>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a1b      	ldr	r2, [pc, #108]	; (8001170 <HAL_GPIO_Init+0x254>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d019      	beq.n	800113a <HAL_GPIO_Init+0x21e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a1a      	ldr	r2, [pc, #104]	; (8001174 <HAL_GPIO_Init+0x258>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0x21a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a19      	ldr	r2, [pc, #100]	; (8001178 <HAL_GPIO_Init+0x25c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d00d      	beq.n	8001132 <HAL_GPIO_Init+0x216>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a18      	ldr	r2, [pc, #96]	; (800117c <HAL_GPIO_Init+0x260>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d007      	beq.n	800112e <HAL_GPIO_Init+0x212>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a17      	ldr	r2, [pc, #92]	; (8001180 <HAL_GPIO_Init+0x264>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d101      	bne.n	800112a <HAL_GPIO_Init+0x20e>
 8001126:	2309      	movs	r3, #9
 8001128:	e02d      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800112a:	230a      	movs	r3, #10
 800112c:	e02b      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800112e:	2308      	movs	r3, #8
 8001130:	e029      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 8001132:	2307      	movs	r3, #7
 8001134:	e027      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 8001136:	2306      	movs	r3, #6
 8001138:	e025      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800113a:	2305      	movs	r3, #5
 800113c:	e023      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800113e:	2304      	movs	r3, #4
 8001140:	e021      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 8001142:	2303      	movs	r3, #3
 8001144:	e01f      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 8001146:	2302      	movs	r3, #2
 8001148:	e01d      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800114a:	2301      	movs	r3, #1
 800114c:	e01b      	b.n	8001186 <HAL_GPIO_Init+0x26a>
 800114e:	bf00      	nop
 8001150:	58000080 	.word	0x58000080
 8001154:	58024400 	.word	0x58024400
 8001158:	58000400 	.word	0x58000400
 800115c:	58020000 	.word	0x58020000
 8001160:	58020400 	.word	0x58020400
 8001164:	58020800 	.word	0x58020800
 8001168:	58020c00 	.word	0x58020c00
 800116c:	58021000 	.word	0x58021000
 8001170:	58021400 	.word	0x58021400
 8001174:	58021800 	.word	0x58021800
 8001178:	58021c00 	.word	0x58021c00
 800117c:	58022000 	.word	0x58022000
 8001180:	58022400 	.word	0x58022400
 8001184:	2300      	movs	r3, #0
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	f002 0203 	and.w	r2, r2, #3
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	4093      	lsls	r3, r2
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001196:	4938      	ldr	r1, [pc, #224]	; (8001278 <HAL_GPIO_Init+0x35c>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	3301      	adds	r3, #1
 8001258:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	f47f ae63 	bne.w	8000f30 <HAL_GPIO_Init+0x14>
  }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3724      	adds	r7, #36	; 0x24
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	58000400 	.word	0x58000400

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001298:	e003      	b.n	80012a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	041a      	lsls	r2, r3, #16
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b085      	sub	sp, #20
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	460b      	mov	r3, r1
 80012b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c0:	887a      	ldrh	r2, [r7, #2]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4013      	ands	r3, r2
 80012c6:	041a      	lsls	r2, r3, #16
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	400b      	ands	r3, r1
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 80012ee:	490c      	ldr	r1, [pc, #48]	; (8001320 <HAL_HSEM_Take+0x3c>)
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <HAL_HSEM_Take+0x40>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_HSEM_Take+0x3c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001304:	6839      	ldr	r1, [r7, #0]
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_HSEM_Take+0x40>)
 8001308:	430b      	orrs	r3, r1
 800130a:	429a      	cmp	r2, r3
 800130c:	d101      	bne.n	8001312 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	e000      	b.n	8001314 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
}
 8001314:	4618      	mov	r0, r3
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	58026400 	.word	0x58026400
 8001324:	80000300 	.word	0x80000300

08001328 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001330:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_HSEM_FastTake+0x2c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3320      	adds	r3, #32
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_HSEM_FastTake+0x30>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d101      	bne.n	8001344 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	e000      	b.n	8001346 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	58026400 	.word	0x58026400
 8001358:	80000300 	.word	0x80000300

0800135c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001366:	4906      	ldr	r1, [pc, #24]	; (8001380 <HAL_HSEM_Release+0x24>)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	58026400 	.word	0x58026400

08001384 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_HSEM_IRQHandler+0x30>)
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_HSEM_IRQHandler+0x30>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	43db      	mvns	r3, r3
 8001398:	4906      	ldr	r1, [pc, #24]	; (80013b4 <HAL_HSEM_IRQHandler+0x30>)
 800139a:	4013      	ands	r3, r2
 800139c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <HAL_HSEM_IRQHandler+0x30>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f807 	bl	80013b8 <HAL_HSEM_FreeCallback>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	58026500 	.word	0x58026500

080013b8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80013d4:	4b29      	ldr	r3, [pc, #164]	; (800147c <HAL_PWREx_ConfigSupply+0xb0>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	2b06      	cmp	r3, #6
 80013de:	d00a      	beq.n	80013f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013e0:	4b26      	ldr	r3, [pc, #152]	; (800147c <HAL_PWREx_ConfigSupply+0xb0>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d001      	beq.n	80013f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e040      	b.n	8001474 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e03e      	b.n	8001474 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_PWREx_ConfigSupply+0xb0>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80013fe:	491f      	ldr	r1, [pc, #124]	; (800147c <HAL_PWREx_ConfigSupply+0xb0>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4313      	orrs	r3, r2
 8001404:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001406:	f7ff fc61 	bl	8000ccc <HAL_GetTick>
 800140a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800140c:	e009      	b.n	8001422 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800140e:	f7ff fc5d 	bl	8000ccc <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800141c:	d901      	bls.n	8001422 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e028      	b.n	8001474 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_PWREx_ConfigSupply+0xb0>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800142a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800142e:	d1ee      	bne.n	800140e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b1e      	cmp	r3, #30
 8001434:	d008      	beq.n	8001448 <HAL_PWREx_ConfigSupply+0x7c>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b2e      	cmp	r3, #46	; 0x2e
 800143a:	d005      	beq.n	8001448 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b1d      	cmp	r3, #29
 8001440:	d002      	beq.n	8001448 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b2d      	cmp	r3, #45	; 0x2d
 8001446:	d114      	bne.n	8001472 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001448:	f7ff fc40 	bl	8000ccc <HAL_GetTick>
 800144c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800144e:	e009      	b.n	8001464 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001450:	f7ff fc3c 	bl	8000ccc <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800145e:	d901      	bls.n	8001464 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e007      	b.n	8001474 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_PWREx_ConfigSupply+0xb0>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d1ee      	bne.n	8001450 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	58024800 	.word	0x58024800

08001480 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	f000 bc1c 	b.w	8001ccc <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 8087 	beq.w	80015b0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a2:	4b9e      	ldr	r3, [pc, #632]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ac:	4b9b      	ldr	r3, [pc, #620]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d007      	beq.n	80014c8 <HAL_RCC_OscConfig+0x48>
 80014b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ba:	2b18      	cmp	r3, #24
 80014bc:	d110      	bne.n	80014e0 <HAL_RCC_OscConfig+0x60>
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d10b      	bne.n	80014e0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	4b94      	ldr	r3, [pc, #592]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d06c      	beq.n	80015ae <HAL_RCC_OscConfig+0x12e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d168      	bne.n	80015ae <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e3f5      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e8:	d106      	bne.n	80014f8 <HAL_RCC_OscConfig+0x78>
 80014ea:	4b8c      	ldr	r3, [pc, #560]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a8b      	ldr	r2, [pc, #556]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e02e      	b.n	8001556 <HAL_RCC_OscConfig+0xd6>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10c      	bne.n	800151a <HAL_RCC_OscConfig+0x9a>
 8001500:	4b86      	ldr	r3, [pc, #536]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a85      	ldr	r2, [pc, #532]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b83      	ldr	r3, [pc, #524]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a82      	ldr	r2, [pc, #520]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e01d      	b.n	8001556 <HAL_RCC_OscConfig+0xd6>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0xbe>
 8001524:	4b7d      	ldr	r3, [pc, #500]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a7c      	ldr	r2, [pc, #496]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 800152a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b7a      	ldr	r3, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a79      	ldr	r2, [pc, #484]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e00b      	b.n	8001556 <HAL_RCC_OscConfig+0xd6>
 800153e:	4b77      	ldr	r3, [pc, #476]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a76      	ldr	r2, [pc, #472]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b74      	ldr	r3, [pc, #464]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a73      	ldr	r2, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001554:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d013      	beq.n	8001586 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff fbb5 	bl	8000ccc <HAL_GetTick>
 8001562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001566:	f7ff fbb1 	bl	8000ccc <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b64      	cmp	r3, #100	; 0x64
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e3a9      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001578:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0xe6>
 8001584:	e014      	b.n	80015b0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff fba1 	bl	8000ccc <HAL_GetTick>
 800158a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158e:	f7ff fb9d 	bl	8000ccc <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e395      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015a0:	4b5e      	ldr	r3, [pc, #376]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x10e>
 80015ac:	e000      	b.n	80015b0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 80ca 	beq.w	8001752 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015be:	4b57      	ldr	r3, [pc, #348]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015c6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015c8:	4b54      	ldr	r3, [pc, #336]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015ce:	6a3b      	ldr	r3, [r7, #32]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <HAL_RCC_OscConfig+0x164>
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	2b18      	cmp	r3, #24
 80015d8:	d156      	bne.n	8001688 <HAL_RCC_OscConfig+0x208>
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d151      	bne.n	8001688 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e4:	4b4d      	ldr	r3, [pc, #308]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x17c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e367      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 0219 	bic.w	r2, r3, #25
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4944      	ldr	r1, [pc, #272]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 800160a:	4313      	orrs	r3, r2
 800160c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800160e:	f7ff fb5d 	bl	8000ccc <HAL_GetTick>
 8001612:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff fb59 	bl	8000ccc <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e351      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	f7ff fb56 	bl	8000ce4 <HAL_GetREVID>
 8001638:	4603      	mov	r3, r0
 800163a:	f241 0203 	movw	r2, #4099	; 0x1003
 800163e:	4293      	cmp	r3, r2
 8001640:	d817      	bhi.n	8001672 <HAL_RCC_OscConfig+0x1f2>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b40      	cmp	r3, #64	; 0x40
 8001648:	d108      	bne.n	800165c <HAL_RCC_OscConfig+0x1dc>
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001652:	4a32      	ldr	r2, [pc, #200]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800165a:	e07a      	b.n	8001752 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	031b      	lsls	r3, r3, #12
 800166a:	492c      	ldr	r1, [pc, #176]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001670:	e06f      	b.n	8001752 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	061b      	lsls	r3, r3, #24
 8001680:	4926      	ldr	r1, [pc, #152]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001686:	e064      	b.n	8001752 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d047      	beq.n	8001720 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 0219 	bic.w	r2, r3, #25
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	491f      	ldr	r1, [pc, #124]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fb13 	bl	8000ccc <HAL_GetTick>
 80016a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016aa:	f7ff fb0f 	bl	8000ccc <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e307      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	f7ff fb0c 	bl	8000ce4 <HAL_GetREVID>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d817      	bhi.n	8001706 <HAL_RCC_OscConfig+0x286>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	2b40      	cmp	r3, #64	; 0x40
 80016dc:	d108      	bne.n	80016f0 <HAL_RCC_OscConfig+0x270>
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016e6:	4a0d      	ldr	r2, [pc, #52]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ec:	6053      	str	r3, [r2, #4]
 80016ee:	e030      	b.n	8001752 <HAL_RCC_OscConfig+0x2d2>
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	031b      	lsls	r3, r3, #12
 80016fe:	4907      	ldr	r1, [pc, #28]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
 8001704:	e025      	b.n	8001752 <HAL_RCC_OscConfig+0x2d2>
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	061b      	lsls	r3, r3, #24
 8001714:	4901      	ldr	r1, [pc, #4]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
 800171a:	e01a      	b.n	8001752 <HAL_RCC_OscConfig+0x2d2>
 800171c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001720:	4b9e      	ldr	r3, [pc, #632]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a9d      	ldr	r2, [pc, #628]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff face 	bl	8000ccc <HAL_GetTick>
 8001730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001734:	f7ff faca 	bl	8000ccc <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e2c2      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001746:	4b95      	ldr	r3, [pc, #596]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80a9 	beq.w	80018b2 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001760:	4b8e      	ldr	r3, [pc, #568]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001768:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800176a:	4b8c      	ldr	r3, [pc, #560]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 800176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b08      	cmp	r3, #8
 8001774:	d007      	beq.n	8001786 <HAL_RCC_OscConfig+0x306>
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b18      	cmp	r3, #24
 800177a:	d13a      	bne.n	80017f2 <HAL_RCC_OscConfig+0x372>
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d135      	bne.n	80017f2 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001786:	4b85      	ldr	r3, [pc, #532]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x31e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b80      	cmp	r3, #128	; 0x80
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e296      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800179e:	f7ff faa1 	bl	8000ce4 <HAL_GetREVID>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d817      	bhi.n	80017dc <HAL_RCC_OscConfig+0x35c>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	d108      	bne.n	80017c6 <HAL_RCC_OscConfig+0x346>
 80017b4:	4b79      	ldr	r3, [pc, #484]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80017bc:	4a77      	ldr	r2, [pc, #476]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80017be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017c2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017c4:	e075      	b.n	80018b2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017c6:	4b75      	ldr	r3, [pc, #468]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	069b      	lsls	r3, r3, #26
 80017d4:	4971      	ldr	r1, [pc, #452]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017da:	e06a      	b.n	80018b2 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017dc:	4b6f      	ldr	r3, [pc, #444]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	061b      	lsls	r3, r3, #24
 80017ea:	496c      	ldr	r1, [pc, #432]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017f0:	e05f      	b.n	80018b2 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d042      	beq.n	8001880 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017fa:	4b68      	ldr	r3, [pc, #416]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a67      	ldr	r2, [pc, #412]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff fa61 	bl	8000ccc <HAL_GetTick>
 800180a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800180e:	f7ff fa5d 	bl	8000ccc <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e255      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001820:	4b5e      	ldr	r3, [pc, #376]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800182c:	f7ff fa5a 	bl	8000ce4 <HAL_GetREVID>
 8001830:	4603      	mov	r3, r0
 8001832:	f241 0203 	movw	r2, #4099	; 0x1003
 8001836:	4293      	cmp	r3, r2
 8001838:	d817      	bhi.n	800186a <HAL_RCC_OscConfig+0x3ea>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	2b20      	cmp	r3, #32
 8001840:	d108      	bne.n	8001854 <HAL_RCC_OscConfig+0x3d4>
 8001842:	4b56      	ldr	r3, [pc, #344]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800184a:	4a54      	ldr	r2, [pc, #336]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 800184c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001850:	6053      	str	r3, [r2, #4]
 8001852:	e02e      	b.n	80018b2 <HAL_RCC_OscConfig+0x432>
 8001854:	4b51      	ldr	r3, [pc, #324]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	069b      	lsls	r3, r3, #26
 8001862:	494e      	ldr	r1, [pc, #312]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
 8001868:	e023      	b.n	80018b2 <HAL_RCC_OscConfig+0x432>
 800186a:	4b4c      	ldr	r3, [pc, #304]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	061b      	lsls	r3, r3, #24
 8001878:	4948      	ldr	r1, [pc, #288]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 800187a:	4313      	orrs	r3, r2
 800187c:	60cb      	str	r3, [r1, #12]
 800187e:	e018      	b.n	80018b2 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001880:	4b46      	ldr	r3, [pc, #280]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a45      	ldr	r2, [pc, #276]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800188a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fa1e 	bl	8000ccc <HAL_GetTick>
 8001890:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001894:	f7ff fa1a 	bl	8000ccc <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e212      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d036      	beq.n	800192c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d019      	beq.n	80018fa <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c6:	4b35      	ldr	r3, [pc, #212]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80018c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ca:	4a34      	ldr	r2, [pc, #208]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff f9fb 	bl	8000ccc <HAL_GetTick>
 80018d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018da:	f7ff f9f7 	bl	8000ccc <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e1ef      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80018ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x45a>
 80018f8:	e018      	b.n	800192c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 80018fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fe:	4a27      	ldr	r2, [pc, #156]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001906:	f7ff f9e1 	bl	8000ccc <HAL_GetTick>
 800190a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff f9dd 	bl	8000ccc <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1d5      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	2b00      	cmp	r3, #0
 8001936:	d039      	beq.n	80019ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d019      	beq.n	8001974 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a15      	ldr	r2, [pc, #84]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001946:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800194c:	f7ff f9be 	bl	8000ccc <HAL_GetTick>
 8001950:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001954:	f7ff f9ba 	bl	8000ccc <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e1b2      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x4d4>
 8001972:	e01b      	b.n	80019ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a08      	ldr	r2, [pc, #32]	; (800199c <HAL_RCC_OscConfig+0x51c>)
 800197a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800197e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001980:	f7ff f9a4 	bl	8000ccc <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001988:	f7ff f9a0 	bl	8000ccc <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d904      	bls.n	80019a0 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e198      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
 800199a:	bf00      	nop
 800199c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019a0:	4ba3      	ldr	r3, [pc, #652]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ed      	bne.n	8001988 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 8081 	beq.w	8001abc <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019ba:	4b9e      	ldr	r3, [pc, #632]	; (8001c34 <HAL_RCC_OscConfig+0x7b4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a9d      	ldr	r2, [pc, #628]	; (8001c34 <HAL_RCC_OscConfig+0x7b4>)
 80019c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019c6:	f7ff f981 	bl	8000ccc <HAL_GetTick>
 80019ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019ce:	f7ff f97d 	bl	8000ccc <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b64      	cmp	r3, #100	; 0x64
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e175      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019e0:	4b94      	ldr	r3, [pc, #592]	; (8001c34 <HAL_RCC_OscConfig+0x7b4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0f0      	beq.n	80019ce <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d106      	bne.n	8001a02 <HAL_RCC_OscConfig+0x582>
 80019f4:	4b8e      	ldr	r3, [pc, #568]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 80019f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f8:	4a8d      	ldr	r2, [pc, #564]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001a00:	e02d      	b.n	8001a5e <HAL_RCC_OscConfig+0x5de>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5a4>
 8001a0a:	4b89      	ldr	r3, [pc, #548]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0e:	4a88      	ldr	r2, [pc, #544]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a10:	f023 0301 	bic.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	; 0x70
 8001a16:	4b86      	ldr	r3, [pc, #536]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a85      	ldr	r2, [pc, #532]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a1c:	f023 0304 	bic.w	r3, r3, #4
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	e01c      	b.n	8001a5e <HAL_RCC_OscConfig+0x5de>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d10c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5c6>
 8001a2c:	4b80      	ldr	r3, [pc, #512]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a7f      	ldr	r2, [pc, #508]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	4b7d      	ldr	r3, [pc, #500]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a7c      	ldr	r2, [pc, #496]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
 8001a44:	e00b      	b.n	8001a5e <HAL_RCC_OscConfig+0x5de>
 8001a46:	4b7a      	ldr	r3, [pc, #488]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4a:	4a79      	ldr	r2, [pc, #484]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6713      	str	r3, [r2, #112]	; 0x70
 8001a52:	4b77      	ldr	r3, [pc, #476]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	4a76      	ldr	r2, [pc, #472]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a58:	f023 0304 	bic.w	r3, r3, #4
 8001a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d015      	beq.n	8001a92 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a66:	f7ff f931 	bl	8000ccc <HAL_GetTick>
 8001a6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a6c:	e00a      	b.n	8001a84 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6e:	f7ff f92d 	bl	8000ccc <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e123      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a84:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0ee      	beq.n	8001a6e <HAL_RCC_OscConfig+0x5ee>
 8001a90:	e014      	b.n	8001abc <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a92:	f7ff f91b 	bl	8000ccc <HAL_GetTick>
 8001a96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a98:	e00a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9a:	f7ff f917 	bl	8000ccc <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e10d      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ab0:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1ee      	bne.n	8001a9a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8102 	beq.w	8001cca <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ac6:	4b5a      	ldr	r3, [pc, #360]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ace:	2b18      	cmp	r3, #24
 8001ad0:	f000 80bd 	beq.w	8001c4e <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	f040 8095 	bne.w	8001c08 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	4b54      	ldr	r3, [pc, #336]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a53      	ldr	r2, [pc, #332]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001ae4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff f8ef 	bl	8000ccc <HAL_GetTick>
 8001aee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff f8eb 	bl	8000ccc <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e0e3      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b04:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b10:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b14:	4b48      	ldr	r3, [pc, #288]	; (8001c38 <HAL_RCC_OscConfig+0x7b8>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	430a      	orrs	r2, r1
 8001b24:	4942      	ldr	r1, [pc, #264]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	628b      	str	r3, [r1, #40]	; 0x28
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	025b      	lsls	r3, r3, #9
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	3b01      	subs	r3, #1
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b52:	3b01      	subs	r3, #1
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b5a:	4935      	ldr	r1, [pc, #212]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001b60:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b64:	4a32      	ldr	r2, [pc, #200]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b6c:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <HAL_RCC_OscConfig+0x7bc>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b78:	00d2      	lsls	r2, r2, #3
 8001b7a:	492d      	ldr	r1, [pc, #180]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b80:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	f023 020c 	bic.w	r2, r3, #12
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	4928      	ldr	r1, [pc, #160]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b92:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f023 0202 	bic.w	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	4924      	ldr	r1, [pc, #144]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	4a18      	ldr	r2, [pc, #96]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff f874 	bl	8000ccc <HAL_GetTick>
 8001be4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f870 	bl	8000ccc <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e068      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x768>
 8001c06:	e060      	b.n	8001cca <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a08      	ldr	r2, [pc, #32]	; (8001c30 <HAL_RCC_OscConfig+0x7b0>)
 8001c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f85a 	bl	8000ccc <HAL_GetTick>
 8001c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c1a:	e011      	b.n	8001c40 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f856 	bl	8000ccc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d90a      	bls.n	8001c40 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e04e      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
 8001c2e:	bf00      	nop
 8001c30:	58024400 	.word	0x58024400
 8001c34:	58024800 	.word	0x58024800
 8001c38:	fffffc0c 	.word	0xfffffc0c
 8001c3c:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_OscConfig+0x854>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e7      	bne.n	8001c1c <HAL_RCC_OscConfig+0x79c>
 8001c4c:	e03d      	b.n	8001cca <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_RCC_OscConfig+0x854>)
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_RCC_OscConfig+0x854>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d031      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d12a      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d122      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d11a      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	0a5b      	lsrs	r3, r3, #9
 8001c94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d111      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	0c1b      	lsrs	r3, r3, #16
 8001ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d108      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	0e1b      	lsrs	r3, r3, #24
 8001cb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3730      	adds	r7, #48	; 0x30
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	58024400 	.word	0x58024400

08001cd8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e19c      	b.n	8002026 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b8a      	ldr	r3, [pc, #552]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d910      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b87      	ldr	r3, [pc, #540]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 020f 	bic.w	r2, r3, #15
 8001d02:	4985      	ldr	r1, [pc, #532]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b83      	ldr	r3, [pc, #524]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e184      	b.n	8002026 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d010      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	4b7b      	ldr	r3, [pc, #492]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d908      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d38:	4b78      	ldr	r3, [pc, #480]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	4975      	ldr	r1, [pc, #468]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0308 	and.w	r3, r3, #8
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d010      	beq.n	8001d78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	4b70      	ldr	r3, [pc, #448]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d908      	bls.n	8001d78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d66:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695b      	ldr	r3, [r3, #20]
 8001d72:	496a      	ldr	r1, [pc, #424]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d010      	beq.n	8001da6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d908      	bls.n	8001da6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d94:	4b61      	ldr	r3, [pc, #388]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	495e      	ldr	r1, [pc, #376]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0320 	and.w	r3, r3, #32
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d010      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d908      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001dc2:	4b56      	ldr	r3, [pc, #344]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4953      	ldr	r1, [pc, #332]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d010      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d908      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df0:	4b4a      	ldr	r3, [pc, #296]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f023 020f 	bic.w	r2, r3, #15
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4947      	ldr	r1, [pc, #284]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d055      	beq.n	8001eba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e0e:	4b43      	ldr	r3, [pc, #268]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	4940      	ldr	r1, [pc, #256]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d107      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e28:	4b3c      	ldr	r3, [pc, #240]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d121      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0f6      	b.n	8002026 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e40:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d115      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0ea      	b.n	8002026 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0de      	b.n	8002026 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e68:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0d6      	b.n	8002026 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f023 0207 	bic.w	r2, r3, #7
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4925      	ldr	r1, [pc, #148]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8a:	f7fe ff1f 	bl	8000ccc <HAL_GetTick>
 8001e8e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e92:	f7fe ff1b 	bl	8000ccc <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0be      	b.n	8002026 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea8:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d1eb      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d208      	bcs.n	8001ee8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f023 020f 	bic.w	r2, r3, #15
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	490e      	ldr	r1, [pc, #56]	; (8001f1c <HAL_RCC_ClockConfig+0x244>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d214      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 020f 	bic.w	r2, r3, #15
 8001efe:	4906      	ldr	r1, [pc, #24]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_RCC_ClockConfig+0x240>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e086      	b.n	8002026 <HAL_RCC_ClockConfig+0x34e>
 8001f18:	52002000 	.word	0x52002000
 8001f1c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d010      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d208      	bcs.n	8001f4e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f3c:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4939      	ldr	r1, [pc, #228]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d010      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	4b34      	ldr	r3, [pc, #208]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d208      	bcs.n	8001f7c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f6a:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	492e      	ldr	r1, [pc, #184]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d010      	beq.n	8001faa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699a      	ldr	r2, [r3, #24]
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d208      	bcs.n	8001faa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4922      	ldr	r1, [pc, #136]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d010      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d208      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4917      	ldr	r1, [pc, #92]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fd8:	f000 f834 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b14      	ldr	r3, [pc, #80]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	4912      	ldr	r1, [pc, #72]	; (8002034 <HAL_RCC_ClockConfig+0x35c>)
 8001fea:	5ccb      	ldrb	r3, [r1, r3]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_RCC_ClockConfig+0x358>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	4a0d      	ldr	r2, [pc, #52]	; (8002034 <HAL_RCC_ClockConfig+0x35c>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <HAL_RCC_ClockConfig+0x360>)
 800200e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <HAL_RCC_ClockConfig+0x364>)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_ClockConfig+0x368>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f7fe fe0c 	bl	8000c38 <HAL_InitTick>
 8002020:	4603      	mov	r3, r0
 8002022:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	58024400 	.word	0x58024400
 8002034:	08004bf4 	.word	0x08004bf4
 8002038:	24000004 	.word	0x24000004
 800203c:	24000000 	.word	0x24000000
 8002040:	24000008 	.word	0x24000008

08002044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800204a:	4bb3      	ldr	r3, [pc, #716]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002052:	2b18      	cmp	r3, #24
 8002054:	f200 8155 	bhi.w	8002302 <HAL_RCC_GetSysClockFreq+0x2be>
 8002058:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <HAL_RCC_GetSysClockFreq+0x1c>)
 800205a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205e:	bf00      	nop
 8002060:	080020c5 	.word	0x080020c5
 8002064:	08002303 	.word	0x08002303
 8002068:	08002303 	.word	0x08002303
 800206c:	08002303 	.word	0x08002303
 8002070:	08002303 	.word	0x08002303
 8002074:	08002303 	.word	0x08002303
 8002078:	08002303 	.word	0x08002303
 800207c:	08002303 	.word	0x08002303
 8002080:	080020eb 	.word	0x080020eb
 8002084:	08002303 	.word	0x08002303
 8002088:	08002303 	.word	0x08002303
 800208c:	08002303 	.word	0x08002303
 8002090:	08002303 	.word	0x08002303
 8002094:	08002303 	.word	0x08002303
 8002098:	08002303 	.word	0x08002303
 800209c:	08002303 	.word	0x08002303
 80020a0:	080020f1 	.word	0x080020f1
 80020a4:	08002303 	.word	0x08002303
 80020a8:	08002303 	.word	0x08002303
 80020ac:	08002303 	.word	0x08002303
 80020b0:	08002303 	.word	0x08002303
 80020b4:	08002303 	.word	0x08002303
 80020b8:	08002303 	.word	0x08002303
 80020bc:	08002303 	.word	0x08002303
 80020c0:	080020f7 	.word	0x080020f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020c4:	4b94      	ldr	r3, [pc, #592]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d009      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80020d0:	4b91      	ldr	r3, [pc, #580]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	08db      	lsrs	r3, r3, #3
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	4a90      	ldr	r2, [pc, #576]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
 80020e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80020e2:	e111      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020e4:	4b8d      	ldr	r3, [pc, #564]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020e6:	61bb      	str	r3, [r7, #24]
    break;
 80020e8:	e10e      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80020ea:	4b8d      	ldr	r3, [pc, #564]	; (8002320 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020ec:	61bb      	str	r3, [r7, #24]
    break;
 80020ee:	e10b      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80020f0:	4b8c      	ldr	r3, [pc, #560]	; (8002324 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020f2:	61bb      	str	r3, [r7, #24]
    break;
 80020f4:	e108      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020f6:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002100:	4b85      	ldr	r3, [pc, #532]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800210a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800210c:	4b82      	ldr	r3, [pc, #520]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002116:	4b80      	ldr	r3, [pc, #512]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211a:	08db      	lsrs	r3, r3, #3
 800211c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800212e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80e1 	beq.w	80022fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b02      	cmp	r3, #2
 800213e:	f000 8083 	beq.w	8002248 <HAL_RCC_GetSysClockFreq+0x204>
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b02      	cmp	r3, #2
 8002146:	f200 80a1 	bhi.w	800228c <HAL_RCC_GetSysClockFreq+0x248>
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x114>
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d056      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002156:	e099      	b.n	800228c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002158:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0320 	and.w	r3, r3, #32
 8002160:	2b00      	cmp	r3, #0
 8002162:	d02d      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002164:	4b6c      	ldr	r3, [pc, #432]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	08db      	lsrs	r3, r3, #3
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	4a6b      	ldr	r2, [pc, #428]	; (800231c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
 8002174:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	ee07 3a90 	vmov	s15, r3
 800217c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800218a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800218e:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800219e:	ed97 6a02 	vldr	s12, [r7, #8]
 80021a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002328 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80021be:	e087      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800232c <HAL_RCC_GetSysClockFreq+0x2e8>
 80021ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021d2:	4b51      	ldr	r3, [pc, #324]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002328 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002202:	e065      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002330 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002216:	4b40      	ldr	r3, [pc, #256]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002226:	ed97 6a02 	vldr	s12, [r7, #8]
 800222a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002328 <HAL_RCC_GetSysClockFreq+0x2e4>
 800222e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800223a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800223e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002246:	e043      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002252:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002334 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800225a:	4b2f      	ldr	r3, [pc, #188]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226a:	ed97 6a02 	vldr	s12, [r7, #8]
 800226e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002328 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800227a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800227e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800228a:	e021      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002296:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002330 <HAL_RCC_GetSysClockFreq+0x2ec>
 800229a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80022b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002328 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	0a5b      	lsrs	r3, r3, #9
 80022d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022da:	3301      	adds	r3, #1
 80022dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80022ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022f4:	ee17 3a90 	vmov	r3, s15
 80022f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80022fa:	e005      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
    break;
 8002300:	e002      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002304:	61bb      	str	r3, [r7, #24]
    break;
 8002306:	bf00      	nop
  }

  return sysclockfreq;
 8002308:	69bb      	ldr	r3, [r7, #24]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3724      	adds	r7, #36	; 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	58024400 	.word	0x58024400
 800231c:	03d09000 	.word	0x03d09000
 8002320:	003d0900 	.word	0x003d0900
 8002324:	017d7840 	.word	0x017d7840
 8002328:	46000000 	.word	0x46000000
 800232c:	4c742400 	.word	0x4c742400
 8002330:	4a742400 	.word	0x4a742400
 8002334:	4bbebc20 	.word	0x4bbebc20

08002338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800233e:	f7ff fe81 	bl	8002044 <HAL_RCC_GetSysClockFreq>
 8002342:	4602      	mov	r2, r0
 8002344:	4b10      	ldr	r3, [pc, #64]	; (8002388 <HAL_RCC_GetHCLKFreq+0x50>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	490f      	ldr	r1, [pc, #60]	; (800238c <HAL_RCC_GetHCLKFreq+0x54>)
 8002350:	5ccb      	ldrb	r3, [r1, r3]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	fa22 f303 	lsr.w	r3, r2, r3
 800235a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_RCC_GetHCLKFreq+0x50>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	4a09      	ldr	r2, [pc, #36]	; (800238c <HAL_RCC_GetHCLKFreq+0x54>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	fa22 f303 	lsr.w	r3, r2, r3
 8002372:	4a07      	ldr	r2, [pc, #28]	; (8002390 <HAL_RCC_GetHCLKFreq+0x58>)
 8002374:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <HAL_RCC_GetHCLKFreq+0x58>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	58024400 	.word	0x58024400
 800238c:	08004bf4 	.word	0x08004bf4
 8002390:	24000004 	.word	0x24000004
 8002394:	24000000 	.word	0x24000000

08002398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800239c:	f7ff ffcc 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4904      	ldr	r1, [pc, #16]	; (80023c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	58024400 	.word	0x58024400
 80023c0:	08004bf4 	.word	0x08004bf4

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80023c8:	f7ff ffb6 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4904      	ldr	r1, [pc, #16]	; (80023ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	58024400 	.word	0x58024400
 80023ec:	08004bf4 	.word	0x08004bf4

080023f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023f8:	2300      	movs	r3, #0
 80023fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023fc:	2300      	movs	r3, #0
 80023fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d03f      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002410:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002414:	d02a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002416:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800241a:	d824      	bhi.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800241c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002420:	d018      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002422:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002426:	d81e      	bhi.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800242c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002430:	d007      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002432:	e018      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002434:	4bab      	ldr	r3, [pc, #684]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	4aaa      	ldr	r2, [pc, #680]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800243a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800243e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002440:	e015      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	2102      	movs	r1, #2
 8002448:	4618      	mov	r0, r3
 800244a:	f001 f9cf 	bl	80037ec <RCCEx_PLL2_Config>
 800244e:	4603      	mov	r3, r0
 8002450:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002452:	e00c      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3324      	adds	r3, #36	; 0x24
 8002458:	2102      	movs	r1, #2
 800245a:	4618      	mov	r0, r3
 800245c:	f001 fa78 	bl	8003950 <RCCEx_PLL3_Config>
 8002460:	4603      	mov	r3, r0
 8002462:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002464:	e003      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
      break;
 800246a:	e000      	b.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800246c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d109      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002474:	4b9b      	ldr	r3, [pc, #620]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002478:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002480:	4998      	ldr	r1, [pc, #608]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	650b      	str	r3, [r1, #80]	; 0x50
 8002486:	e001      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03d      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	2b04      	cmp	r3, #4
 800249e:	d826      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024a0:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80024a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a6:	bf00      	nop
 80024a8:	080024bd 	.word	0x080024bd
 80024ac:	080024cb 	.word	0x080024cb
 80024b0:	080024dd 	.word	0x080024dd
 80024b4:	080024f5 	.word	0x080024f5
 80024b8:	080024f5 	.word	0x080024f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024bc:	4b89      	ldr	r3, [pc, #548]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	4a88      	ldr	r2, [pc, #544]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024c8:	e015      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f001 f98b 	bl	80037ec <RCCEx_PLL2_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024da:	e00c      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3324      	adds	r3, #36	; 0x24
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f001 fa34 	bl	8003950 <RCCEx_PLL3_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024ec:	e003      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	75fb      	strb	r3, [r7, #23]
      break;
 80024f2:	e000      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80024f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024fc:	4b79      	ldr	r3, [pc, #484]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002500:	f023 0207 	bic.w	r2, r3, #7
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	4976      	ldr	r1, [pc, #472]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	650b      	str	r3, [r1, #80]	; 0x50
 800250e:	e001      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800251c:	2b00      	cmp	r3, #0
 800251e:	d042      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002528:	d02b      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800252a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252e:	d825      	bhi.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002530:	2bc0      	cmp	r3, #192	; 0xc0
 8002532:	d028      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002534:	2bc0      	cmp	r3, #192	; 0xc0
 8002536:	d821      	bhi.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	d016      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d81d      	bhi.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d007      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002548:	e018      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800254a:	4b66      	ldr	r3, [pc, #408]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	4a65      	ldr	r2, [pc, #404]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002554:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002556:	e017      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3304      	adds	r3, #4
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f001 f944 	bl	80037ec <RCCEx_PLL2_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002568:	e00e      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3324      	adds	r3, #36	; 0x24
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f001 f9ed 	bl	8003950 <RCCEx_PLL3_Config>
 8002576:	4603      	mov	r3, r0
 8002578:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800257a:	e005      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	75fb      	strb	r3, [r7, #23]
      break;
 8002580:	e002      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002582:	bf00      	nop
 8002584:	e000      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002586:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d109      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800258e:	4b55      	ldr	r3, [pc, #340]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002592:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	4952      	ldr	r1, [pc, #328]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	650b      	str	r3, [r1, #80]	; 0x50
 80025a0:	e001      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d049      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025bc:	d030      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80025be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025c2:	d82a      	bhi.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025c8:	d02c      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80025ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025ce:	d824      	bhi.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d4:	d018      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80025d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025da:	d81e      	bhi.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80025e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025e4:	d007      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80025e6:	e018      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025e8:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	4a3d      	ldr	r2, [pc, #244]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025f4:	e017      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 f8f5 	bl	80037ec <RCCEx_PLL2_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002606:	e00e      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3324      	adds	r3, #36	; 0x24
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f001 f99e 	bl	8003950 <RCCEx_PLL3_Config>
 8002614:	4603      	mov	r3, r0
 8002616:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002618:	e005      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	75fb      	strb	r3, [r7, #23]
      break;
 800261e:	e002      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002620:	bf00      	nop
 8002622:	e000      	b.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002626:	7dfb      	ldrb	r3, [r7, #23]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10a      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800262c:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002630:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800263a:	492a      	ldr	r1, [pc, #168]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	658b      	str	r3, [r1, #88]	; 0x58
 8002640:	e001      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264e:	2b00      	cmp	r3, #0
 8002650:	d04c      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002658:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800265c:	d030      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800265e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002662:	d82a      	bhi.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002664:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002668:	d02c      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800266a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800266e:	d824      	bhi.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002674:	d018      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800267a:	d81e      	bhi.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d007      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002686:	e018      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	4a15      	ldr	r2, [pc, #84]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800268e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002692:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002694:	e017      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f001 f8a5 	bl	80037ec <RCCEx_PLL2_Config>
 80026a2:	4603      	mov	r3, r0
 80026a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80026a6:	e00e      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3324      	adds	r3, #36	; 0x24
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 f94e 	bl	8003950 <RCCEx_PLL3_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026b8:	e005      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80026c0:	bf00      	nop
 80026c2:	e000      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80026c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80026da:	4902      	ldr	r1, [pc, #8]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	658b      	str	r3, [r1, #88]	; 0x58
 80026e0:	e004      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80026e2:	bf00      	nop
 80026e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e8:	7dfb      	ldrb	r3, [r7, #23]
 80026ea:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d032      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fc:	2b30      	cmp	r3, #48	; 0x30
 80026fe:	d01c      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002700:	2b30      	cmp	r3, #48	; 0x30
 8002702:	d817      	bhi.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002704:	2b20      	cmp	r3, #32
 8002706:	d00c      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002708:	2b20      	cmp	r3, #32
 800270a:	d813      	bhi.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800270c:	2b00      	cmp	r3, #0
 800270e:	d016      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002710:	2b10      	cmp	r3, #16
 8002712:	d10f      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002714:	4baf      	ldr	r3, [pc, #700]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	4aae      	ldr	r2, [pc, #696]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800271a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002720:	e00e      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	2102      	movs	r1, #2
 8002728:	4618      	mov	r0, r3
 800272a:	f001 f85f 	bl	80037ec <RCCEx_PLL2_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002732:	e005      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	75fb      	strb	r3, [r7, #23]
      break;
 8002738:	e002      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800273a:	bf00      	nop
 800273c:	e000      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800273e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002740:	7dfb      	ldrb	r3, [r7, #23]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002746:	4ba3      	ldr	r3, [pc, #652]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002752:	49a0      	ldr	r1, [pc, #640]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002754:	4313      	orrs	r3, r2
 8002756:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002758:	e001      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d047      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002772:	d030      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002774:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002778:	d82a      	bhi.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800277a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800277e:	d02c      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002780:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002784:	d824      	bhi.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d018      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800278c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002790:	d81e      	bhi.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279a:	d007      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800279c:	e018      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800279e:	4b8d      	ldr	r3, [pc, #564]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	4a8c      	ldr	r2, [pc, #560]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027aa:	e017      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f81a 	bl	80037ec <RCCEx_PLL2_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027bc:	e00e      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3324      	adds	r3, #36	; 0x24
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 f8c3 	bl	8003950 <RCCEx_PLL3_Config>
 80027ca:	4603      	mov	r3, r0
 80027cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027ce:	e005      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	75fb      	strb	r3, [r7, #23]
      break;
 80027d4:	e002      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80027da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027e2:	4b7c      	ldr	r3, [pc, #496]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ee:	4979      	ldr	r1, [pc, #484]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	650b      	str	r3, [r1, #80]	; 0x50
 80027f4:	e001      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d049      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800280e:	d02e      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002814:	d828      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002816:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800281a:	d02a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800281c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002820:	d822      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002822:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002826:	d026      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002828:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800282c:	d81c      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800282e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002832:	d010      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002838:	d816      	bhi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01d      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800283e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002842:	d111      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	2101      	movs	r1, #1
 800284a:	4618      	mov	r0, r3
 800284c:	f000 ffce 	bl	80037ec <RCCEx_PLL2_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002854:	e012      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3324      	adds	r3, #36	; 0x24
 800285a:	2101      	movs	r1, #1
 800285c:	4618      	mov	r0, r3
 800285e:	f001 f877 	bl	8003950 <RCCEx_PLL3_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002866:	e009      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	75fb      	strb	r3, [r7, #23]
      break;
 800286c:	e006      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800286e:	bf00      	nop
 8002870:	e004      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002872:	bf00      	nop
 8002874:	e002      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002876:	bf00      	nop
 8002878:	e000      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800287a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800287c:	7dfb      	ldrb	r3, [r7, #23]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002882:	4b54      	ldr	r3, [pc, #336]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002886:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800288e:	4951      	ldr	r1, [pc, #324]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	650b      	str	r3, [r1, #80]	; 0x50
 8002894:	e001      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d04b      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80028ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b0:	d02e      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80028b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b6:	d828      	bhi.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028bc:	d02a      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80028be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c2:	d822      	bhi.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028c8:	d026      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80028ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028ce:	d81c      	bhi.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028d4:	d010      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80028d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028da:	d816      	bhi.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01d      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80028e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028e4:	d111      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2101      	movs	r1, #1
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 ff7d 	bl	80037ec <RCCEx_PLL2_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80028f6:	e012      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3324      	adds	r3, #36	; 0x24
 80028fc:	2101      	movs	r1, #1
 80028fe:	4618      	mov	r0, r3
 8002900:	f001 f826 	bl	8003950 <RCCEx_PLL3_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002908:	e009      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	75fb      	strb	r3, [r7, #23]
      break;
 800290e:	e006      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002910:	bf00      	nop
 8002912:	e004      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002914:	bf00      	nop
 8002916:	e002      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002918:	bf00      	nop
 800291a:	e000      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800291c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800291e:	7dfb      	ldrb	r3, [r7, #23]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002924:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002932:	4928      	ldr	r1, [pc, #160]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	658b      	str	r3, [r1, #88]	; 0x58
 8002938:	e001      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293a:	7dfb      	ldrb	r3, [r7, #23]
 800293c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d02f      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002952:	d00e      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002958:	d814      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d015      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800295e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002962:	d10f      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	4a1a      	ldr	r2, [pc, #104]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800296a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800296e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002970:	e00c      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3304      	adds	r3, #4
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f000 ff37 	bl	80037ec <RCCEx_PLL2_Config>
 800297e:	4603      	mov	r3, r0
 8002980:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002982:	e003      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	75fb      	strb	r3, [r7, #23]
      break;
 8002988:	e000      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800298a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002996:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299e:	490d      	ldr	r1, [pc, #52]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	650b      	str	r3, [r1, #80]	; 0x50
 80029a4:	e001      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d033      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d81c      	bhi.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	080029ff 	.word	0x080029ff
 80029c8:	080029d9 	.word	0x080029d9
 80029cc:	080029e7 	.word	0x080029e7
 80029d0:	080029ff 	.word	0x080029ff
 80029d4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d8:	4bb8      	ldr	r3, [pc, #736]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	4ab7      	ldr	r2, [pc, #732]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029e4:	e00c      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2102      	movs	r1, #2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fefd 	bl	80037ec <RCCEx_PLL2_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029f6:	e003      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	75fb      	strb	r3, [r7, #23]
      break;
 80029fc:	e000      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80029fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a00:	7dfb      	ldrb	r3, [r7, #23]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a06:	4bad      	ldr	r3, [pc, #692]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	49aa      	ldr	r1, [pc, #680]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a18:	e001      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 8086 	beq.w	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a2c:	4ba4      	ldr	r3, [pc, #656]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4aa3      	ldr	r2, [pc, #652]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a38:	f7fe f948 	bl	8000ccc <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a3e:	e009      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a40:	f7fe f944 	bl	8000ccc <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d902      	bls.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	75fb      	strb	r3, [r7, #23]
        break;
 8002a52:	e005      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a54:	4b9a      	ldr	r3, [pc, #616]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0ef      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d166      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a66:	4b95      	ldr	r3, [pc, #596]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a70:	4053      	eors	r3, r2
 8002a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d013      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a7a:	4b90      	ldr	r3, [pc, #576]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a82:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a84:	4b8d      	ldr	r3, [pc, #564]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a8c      	ldr	r2, [pc, #560]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a90:	4b8a      	ldr	r3, [pc, #552]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a89      	ldr	r2, [pc, #548]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002a9c:	4a87      	ldr	r2, [pc, #540]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aac:	d115      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7fe f90d 	bl	8000ccc <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab4:	e00b      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab6:	f7fe f909 	bl	8000ccc <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d902      	bls.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	75fb      	strb	r3, [r7, #23]
            break;
 8002acc:	e005      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ace:	4b7b      	ldr	r3, [pc, #492]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ed      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d126      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aee:	d10d      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002af0:	4b72      	ldr	r3, [pc, #456]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002afe:	0919      	lsrs	r1, r3, #4
 8002b00:	4b70      	ldr	r3, [pc, #448]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002b02:	400b      	ands	r3, r1
 8002b04:	496d      	ldr	r1, [pc, #436]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	610b      	str	r3, [r1, #16]
 8002b0a:	e005      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002b0c:	4b6b      	ldr	r3, [pc, #428]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	4a6a      	ldr	r2, [pc, #424]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b16:	6113      	str	r3, [r2, #16]
 8002b18:	4b68      	ldr	r3, [pc, #416]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b26:	4965      	ldr	r1, [pc, #404]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	670b      	str	r3, [r1, #112]	; 0x70
 8002b2c:	e004      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	75bb      	strb	r3, [r7, #22]
 8002b32:	e001      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d07e      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b48:	2b28      	cmp	r3, #40	; 0x28
 8002b4a:	d867      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002b4c:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002c23 	.word	0x08002c23
 8002b58:	08002c1d 	.word	0x08002c1d
 8002b5c:	08002c1d 	.word	0x08002c1d
 8002b60:	08002c1d 	.word	0x08002c1d
 8002b64:	08002c1d 	.word	0x08002c1d
 8002b68:	08002c1d 	.word	0x08002c1d
 8002b6c:	08002c1d 	.word	0x08002c1d
 8002b70:	08002c1d 	.word	0x08002c1d
 8002b74:	08002bf9 	.word	0x08002bf9
 8002b78:	08002c1d 	.word	0x08002c1d
 8002b7c:	08002c1d 	.word	0x08002c1d
 8002b80:	08002c1d 	.word	0x08002c1d
 8002b84:	08002c1d 	.word	0x08002c1d
 8002b88:	08002c1d 	.word	0x08002c1d
 8002b8c:	08002c1d 	.word	0x08002c1d
 8002b90:	08002c1d 	.word	0x08002c1d
 8002b94:	08002c0b 	.word	0x08002c0b
 8002b98:	08002c1d 	.word	0x08002c1d
 8002b9c:	08002c1d 	.word	0x08002c1d
 8002ba0:	08002c1d 	.word	0x08002c1d
 8002ba4:	08002c1d 	.word	0x08002c1d
 8002ba8:	08002c1d 	.word	0x08002c1d
 8002bac:	08002c1d 	.word	0x08002c1d
 8002bb0:	08002c1d 	.word	0x08002c1d
 8002bb4:	08002c23 	.word	0x08002c23
 8002bb8:	08002c1d 	.word	0x08002c1d
 8002bbc:	08002c1d 	.word	0x08002c1d
 8002bc0:	08002c1d 	.word	0x08002c1d
 8002bc4:	08002c1d 	.word	0x08002c1d
 8002bc8:	08002c1d 	.word	0x08002c1d
 8002bcc:	08002c1d 	.word	0x08002c1d
 8002bd0:	08002c1d 	.word	0x08002c1d
 8002bd4:	08002c23 	.word	0x08002c23
 8002bd8:	08002c1d 	.word	0x08002c1d
 8002bdc:	08002c1d 	.word	0x08002c1d
 8002be0:	08002c1d 	.word	0x08002c1d
 8002be4:	08002c1d 	.word	0x08002c1d
 8002be8:	08002c1d 	.word	0x08002c1d
 8002bec:	08002c1d 	.word	0x08002c1d
 8002bf0:	08002c1d 	.word	0x08002c1d
 8002bf4:	08002c23 	.word	0x08002c23
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fdf4 	bl	80037ec <RCCEx_PLL2_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c08:	e00c      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3324      	adds	r3, #36	; 0x24
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fe9d 	bl	8003950 <RCCEx_PLL3_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c1a:	e003      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c20:	e000      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8002c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c2a:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c36:	4921      	ldr	r1, [pc, #132]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	654b      	str	r3, [r1, #84]	; 0x54
 8002c3c:	e001      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d03e      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d820      	bhi.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8002c56:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8002c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5c:	08002c9f 	.word	0x08002c9f
 8002c60:	08002c75 	.word	0x08002c75
 8002c64:	08002c87 	.word	0x08002c87
 8002c68:	08002c9f 	.word	0x08002c9f
 8002c6c:	08002c9f 	.word	0x08002c9f
 8002c70:	08002c9f 	.word	0x08002c9f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	2101      	movs	r1, #1
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fdb6 	bl	80037ec <RCCEx_PLL2_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c84:	e00c      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3324      	adds	r3, #36	; 0x24
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fe5f 	bl	8003950 <RCCEx_PLL3_Config>
 8002c92:	4603      	mov	r3, r0
 8002c94:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c96:	e003      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9c:	e000      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8002c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d110      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ca6:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f023 0207 	bic.w	r2, r3, #7
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	4902      	ldr	r1, [pc, #8]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	654b      	str	r3, [r1, #84]	; 0x54
 8002cb8:	e008      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8002cba:	bf00      	nop
 8002cbc:	58024400 	.word	0x58024400
 8002cc0:	58024800 	.word	0x58024800
 8002cc4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d039      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	2b05      	cmp	r3, #5
 8002ce0:	d820      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002d2b 	.word	0x08002d2b
 8002cec:	08002d01 	.word	0x08002d01
 8002cf0:	08002d13 	.word	0x08002d13
 8002cf4:	08002d2b 	.word	0x08002d2b
 8002cf8:	08002d2b 	.word	0x08002d2b
 8002cfc:	08002d2b 	.word	0x08002d2b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	2101      	movs	r1, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fd70 	bl	80037ec <RCCEx_PLL2_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d10:	e00c      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3324      	adds	r3, #36	; 0x24
 8002d16:	2101      	movs	r1, #1
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fe19 	bl	8003950 <RCCEx_PLL3_Config>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d22:	e003      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	75fb      	strb	r3, [r7, #23]
      break;
 8002d28:	e000      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8002d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d32:	4bb7      	ldr	r3, [pc, #732]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	49b3      	ldr	r1, [pc, #716]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	658b      	str	r3, [r1, #88]	; 0x58
 8002d46:	e001      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	7dfb      	ldrb	r3, [r7, #23]
 8002d4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d04b      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d62:	d02e      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8002d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d68:	d828      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6e:	d02a      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d74:	d822      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002d76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d7a:	d026      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002d7c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d80:	d81c      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d86:	d010      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d8c:	d816      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d01d      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d96:	d111      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fd24 	bl	80037ec <RCCEx_PLL2_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002da8:	e012      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3324      	adds	r3, #36	; 0x24
 8002dae:	2102      	movs	r1, #2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fdcd 	bl	8003950 <RCCEx_PLL3_Config>
 8002db6:	4603      	mov	r3, r0
 8002db8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002dba:	e009      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc0:	e006      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002dc2:	bf00      	nop
 8002dc4:	e004      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e002      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002dce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dd0:	7dfb      	ldrb	r3, [r7, #23]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10a      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dd6:	4b8e      	ldr	r3, [pc, #568]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002de4:	498a      	ldr	r1, [pc, #552]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	654b      	str	r3, [r1, #84]	; 0x54
 8002dea:	e001      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
 8002dee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d04b      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e06:	d02e      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8002e08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e0c:	d828      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	d02a      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e18:	d822      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e1e:	d026      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002e20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e24:	d81c      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e2a:	d010      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8002e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e30:	d816      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01d      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3a:	d111      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fcd2 	bl	80037ec <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e4c:	e012      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3324      	adds	r3, #36	; 0x24
 8002e52:	2102      	movs	r1, #2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fd7b 	bl	8003950 <RCCEx_PLL3_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e5e:	e009      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
      break;
 8002e64:	e006      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002e66:	bf00      	nop
 8002e68:	e004      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e002      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002e6e:	bf00      	nop
 8002e70:	e000      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10a      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e7a:	4b65      	ldr	r3, [pc, #404]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e88:	4961      	ldr	r1, [pc, #388]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	658b      	str	r3, [r1, #88]	; 0x58
 8002e8e:	e001      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d04b      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002eaa:	d02e      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8002eac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002eb0:	d828      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d02a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8002eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ebc:	d822      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002ebe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ec2:	d026      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002ec4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ec8:	d81c      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ece:	d010      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8002ed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ed4:	d816      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01d      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ede:	d111      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fc80 	bl	80037ec <RCCEx_PLL2_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ef0:	e012      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3324      	adds	r3, #36	; 0x24
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fd29 	bl	8003950 <RCCEx_PLL3_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f02:	e009      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	75fb      	strb	r3, [r7, #23]
      break;
 8002f08:	e006      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e004      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10a      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f1e:	4b3c      	ldr	r3, [pc, #240]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f2c:	4938      	ldr	r1, [pc, #224]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	658b      	str	r3, [r1, #88]	; 0x58
 8002f32:	e001      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d01a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	d10a      	bne.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3324      	adds	r3, #36	; 0x24
 8002f54:	2102      	movs	r1, #2
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fcfa 	bl	8003950 <RCCEx_PLL3_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f66:	4b2a      	ldr	r3, [pc, #168]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f74:	4926      	ldr	r1, [pc, #152]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f90:	d10a      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3324      	adds	r3, #36	; 0x24
 8002f96:	2102      	movs	r1, #2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fcd9 	bl	8003950 <RCCEx_PLL3_Config>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb6:	4916      	ldr	r1, [pc, #88]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d036      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fd2:	d01f      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fd8:	d817      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8002fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe2:	d009      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8002fe4:	e011      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fbfd 	bl	80037ec <RCCEx_PLL2_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002ff6:	e00e      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3324      	adds	r3, #36	; 0x24
 8002ffc:	2102      	movs	r1, #2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fca6 	bl	8003950 <RCCEx_PLL3_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003008:	e005      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	75fb      	strb	r3, [r7, #23]
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003010:	58024400 	.word	0x58024400
      break;
 8003014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003016:	7dfb      	ldrb	r3, [r7, #23]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800301c:	4b93      	ldr	r3, [pc, #588]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800302a:	4990      	ldr	r1, [pc, #576]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800302c:	4313      	orrs	r3, r2
 800302e:	658b      	str	r3, [r1, #88]	; 0x58
 8003030:	e001      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d033      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003048:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800304c:	d01c      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800304e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003052:	d816      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003058:	d003      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800305a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800305e:	d007      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003060:	e00f      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003062:	4b82      	ldr	r3, [pc, #520]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	4a81      	ldr	r2, [pc, #516]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800306e:	e00c      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3324      	adds	r3, #36	; 0x24
 8003074:	2101      	movs	r1, #1
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fc6a 	bl	8003950 <RCCEx_PLL3_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003080:	e003      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	75fb      	strb	r3, [r7, #23]
      break;
 8003086:	e000      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003090:	4b76      	ldr	r3, [pc, #472]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309e:	4973      	ldr	r1, [pc, #460]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	654b      	str	r3, [r1, #84]	; 0x54
 80030a4:	e001      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a6:	7dfb      	ldrb	r3, [r7, #23]
 80030a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d029      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80030be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c2:	d007      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80030c4:	e00f      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c6:	4b69      	ldr	r3, [pc, #420]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	4a68      	ldr	r2, [pc, #416]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030d2:	e00b      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3304      	adds	r3, #4
 80030d8:	2102      	movs	r1, #2
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fb86 	bl	80037ec <RCCEx_PLL2_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030e4:	e002      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	75fb      	strb	r3, [r7, #23]
      break;
 80030ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80030f2:	4b5e      	ldr	r3, [pc, #376]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fe:	495b      	ldr	r1, [pc, #364]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003100:	4313      	orrs	r3, r2
 8003102:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003104:	e001      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3324      	adds	r3, #36	; 0x24
 800311a:	2102      	movs	r1, #2
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fc17 	bl	8003950 <RCCEx_PLL3_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d030      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003140:	d017      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003146:	d811      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314c:	d013      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800314e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003152:	d80b      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003158:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315c:	d106      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800315e:	4b43      	ldr	r3, [pc, #268]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	4a42      	ldr	r2, [pc, #264]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003168:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800316a:	e007      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	75fb      	strb	r3, [r7, #23]
      break;
 8003170:	e004      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003172:	bf00      	nop
 8003174:	e002      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003176:	bf00      	nop
 8003178:	e000      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800317a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003182:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800318e:	4937      	ldr	r1, [pc, #220]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003190:	4313      	orrs	r3, r2
 8003192:	654b      	str	r3, [r1, #84]	; 0x54
 8003194:	e001      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
 8003198:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b2:	492e      	ldr	r1, [pc, #184]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d009      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80031c4:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031d2:	4926      	ldr	r1, [pc, #152]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f0:	491e      	ldr	r1, [pc, #120]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	4a19      	ldr	r2, [pc, #100]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003208:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800320c:	6113      	str	r3, [r2, #16]
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003210:	691a      	ldr	r2, [r3, #16]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003218:	4914      	ldr	r1, [pc, #80]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	da08      	bge.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003232:	490e      	ldr	r1, [pc, #56]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003234:	4313      	orrs	r3, r2
 8003236:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003252:	4906      	ldr	r1, [pc, #24]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003254:	4313      	orrs	r3, r2
 8003256:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003258:	7dbb      	ldrb	r3, [r7, #22]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	58024400 	.word	0x58024400

08003270 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003274:	f7ff f860 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8003278:	4602      	mov	r2, r0
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	4904      	ldr	r1, [pc, #16]	; (8003298 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003286:	5ccb      	ldrb	r3, [r1, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	58024400 	.word	0x58024400
 8003298:	08004bf4 	.word	0x08004bf4

0800329c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800329c:	b480      	push	{r7}
 800329e:	b089      	sub	sp, #36	; 0x24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032a4:	4ba1      	ldr	r3, [pc, #644]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80032ae:	4b9f      	ldr	r3, [pc, #636]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	0b1b      	lsrs	r3, r3, #12
 80032b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80032ba:	4b9c      	ldr	r3, [pc, #624]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80032c6:	4b99      	ldr	r3, [pc, #612]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	08db      	lsrs	r3, r3, #3
 80032cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8111 	beq.w	800350c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	f000 8083 	beq.w	80033f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	f200 80a1 	bhi.w	800343c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d056      	beq.n	80033b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003306:	e099      	b.n	800343c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003308:	4b88      	ldr	r3, [pc, #544]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0320 	and.w	r3, r3, #32
 8003310:	2b00      	cmp	r3, #0
 8003312:	d02d      	beq.n	8003370 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003314:	4b85      	ldr	r3, [pc, #532]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	08db      	lsrs	r3, r3, #3
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	4a84      	ldr	r2, [pc, #528]	; (8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
 8003324:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333e:	4b7b      	ldr	r3, [pc, #492]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003352:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800336e:	e087      	b.n	8003480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003538 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800337e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003382:	4b6a      	ldr	r3, [pc, #424]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003392:	ed97 6a03 	vldr	s12, [r7, #12]
 8003396:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800339a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033b2:	e065      	b.n	8003480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800353c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80033c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c6:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80033da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033f6:	e043      	b.n	8003480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003540 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b48      	ldr	r3, [pc, #288]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a03 	vldr	s12, [r7, #12]
 800341e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800343a:	e021      	b.n	8003480 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800353c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003462:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003534 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800347e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	0a5b      	lsrs	r3, r3, #9
 8003486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003496:	ee37 7a87 	vadd.f32	s14, s15, s14
 800349a:	edd7 6a07 	vldr	s13, [r7, #28]
 800349e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a6:	ee17 2a90 	vmov	r2, s15
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80034ae:	4b1f      	ldr	r3, [pc, #124]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b8:	ee07 3a90 	vmov	s15, r3
 80034bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034d4:	ee17 2a90 	vmov	r2, s15
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80034dc:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	0e1b      	lsrs	r3, r3, #24
 80034e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80034fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003502:	ee17 2a90 	vmov	r2, s15
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800350a:	e008      	b.n	800351e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
}
 800351e:	bf00      	nop
 8003520:	3724      	adds	r7, #36	; 0x24
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	58024400 	.word	0x58024400
 8003530:	03d09000 	.word	0x03d09000
 8003534:	46000000 	.word	0x46000000
 8003538:	4c742400 	.word	0x4c742400
 800353c:	4a742400 	.word	0x4a742400
 8003540:	4bbebc20 	.word	0x4bbebc20

08003544 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800354c:	4ba1      	ldr	r3, [pc, #644]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003556:	4b9f      	ldr	r3, [pc, #636]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	0d1b      	lsrs	r3, r3, #20
 800355c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003560:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003562:	4b9c      	ldr	r3, [pc, #624]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	0a1b      	lsrs	r3, r3, #8
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800356e:	4b99      	ldr	r3, [pc, #612]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	08db      	lsrs	r3, r3, #3
 8003574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003586:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 8111 	beq.w	80037b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b02      	cmp	r3, #2
 8003596:	f000 8083 	beq.w	80036a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b02      	cmp	r3, #2
 800359e:	f200 80a1 	bhi.w	80036e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d056      	beq.n	800365c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80035ae:	e099      	b.n	80036e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035b0:	4b88      	ldr	r3, [pc, #544]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02d      	beq.n	8003618 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035bc:	4b85      	ldr	r3, [pc, #532]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	08db      	lsrs	r3, r3, #3
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	4a84      	ldr	r2, [pc, #528]	; (80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
 80035cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	ee07 3a90 	vmov	s15, r3
 80035d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035e6:	4b7b      	ldr	r3, [pc, #492]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ee:	ee07 3a90 	vmov	s15, r3
 80035f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80035fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80035fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800360a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800360e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003612:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003616:	e087      	b.n	8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003622:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800362a:	4b6a      	ldr	r3, [pc, #424]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800363a:	ed97 6a03 	vldr	s12, [r7, #12]
 800363e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800364a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800364e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003656:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800365a:	e065      	b.n	8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003666:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800366a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366e:	4b59      	ldr	r3, [pc, #356]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003676:	ee07 3a90 	vmov	s15, r3
 800367a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800367e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003682:	eddf 5a56 	vldr	s11, [pc, #344]	; 80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800368a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800368e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800369e:	e043      	b.n	8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80037e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80036ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036b2:	4b48      	ldr	r3, [pc, #288]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80036c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036e2:	e021      	b.n	8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80036f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f6:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003706:	ed97 6a03 	vldr	s12, [r7, #12]
 800370a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800370e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800371a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800371e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003722:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003726:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003728:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	0a5b      	lsrs	r3, r3, #9
 800372e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800373e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003742:	edd7 6a07 	vldr	s13, [r7, #28]
 8003746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800374a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800374e:	ee17 2a90 	vmov	r2, s15
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003756:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003760:	ee07 3a90 	vmov	s15, r3
 8003764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800376c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003770:	edd7 6a07 	vldr	s13, [r7, #28]
 8003774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800377c:	ee17 2a90 	vmov	r2, s15
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	0e1b      	lsrs	r3, r3, #24
 800378a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800379a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800379e:	edd7 6a07 	vldr	s13, [r7, #28]
 80037a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037aa:	ee17 2a90 	vmov	r2, s15
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80037b2:	e008      	b.n	80037c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	609a      	str	r2, [r3, #8]
}
 80037c6:	bf00      	nop
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	58024400 	.word	0x58024400
 80037d8:	03d09000 	.word	0x03d09000
 80037dc:	46000000 	.word	0x46000000
 80037e0:	4c742400 	.word	0x4c742400
 80037e4:	4a742400 	.word	0x4a742400
 80037e8:	4bbebc20 	.word	0x4bbebc20

080037ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037fa:	4b53      	ldr	r3, [pc, #332]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b03      	cmp	r3, #3
 8003804:	d101      	bne.n	800380a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e099      	b.n	800393e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800380a:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a4e      	ldr	r2, [pc, #312]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 8003810:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003816:	f7fd fa59 	bl	8000ccc <HAL_GetTick>
 800381a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800381c:	e008      	b.n	8003830 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800381e:	f7fd fa55 	bl	8000ccc <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e086      	b.n	800393e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003830:	4b45      	ldr	r3, [pc, #276]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1f0      	bne.n	800381e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800383c:	4b42      	ldr	r3, [pc, #264]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	031b      	lsls	r3, r3, #12
 800384a:	493f      	ldr	r1, [pc, #252]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 800384c:	4313      	orrs	r3, r2
 800384e:	628b      	str	r3, [r1, #40]	; 0x28
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	3b01      	subs	r3, #1
 8003856:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	3b01      	subs	r3, #1
 8003860:	025b      	lsls	r3, r3, #9
 8003862:	b29b      	uxth	r3, r3
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	3b01      	subs	r3, #1
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	3b01      	subs	r3, #1
 800387a:	061b      	lsls	r3, r3, #24
 800387c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003880:	4931      	ldr	r1, [pc, #196]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 8003882:	4313      	orrs	r3, r2
 8003884:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003886:	4b30      	ldr	r3, [pc, #192]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	492d      	ldr	r1, [pc, #180]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 8003894:	4313      	orrs	r3, r2
 8003896:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003898:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 800389a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389c:	f023 0220 	bic.w	r2, r3, #32
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4928      	ldr	r1, [pc, #160]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80038aa:	4b27      	ldr	r3, [pc, #156]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	4a26      	ldr	r2, [pc, #152]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038b0:	f023 0310 	bic.w	r3, r3, #16
 80038b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038ba:	4b24      	ldr	r3, [pc, #144]	; (800394c <RCCEx_PLL2_Config+0x160>)
 80038bc:	4013      	ands	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	69d2      	ldr	r2, [r2, #28]
 80038c2:	00d2      	lsls	r2, r2, #3
 80038c4:	4920      	ldr	r1, [pc, #128]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80038ca:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038d0:	f043 0310 	orr.w	r3, r3, #16
 80038d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80038dc:	4b1a      	ldr	r3, [pc, #104]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038e8:	e00f      	b.n	800390a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d106      	bne.n	80038fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80038f0:	4b15      	ldr	r3, [pc, #84]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 80038f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038fc:	e005      	b.n	800390a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80038fe:	4b12      	ldr	r3, [pc, #72]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	4a11      	ldr	r2, [pc, #68]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 8003904:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003908:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a0e      	ldr	r2, [pc, #56]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 8003910:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003916:	f7fd f9d9 	bl	8000ccc <HAL_GetTick>
 800391a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800391c:	e008      	b.n	8003930 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800391e:	f7fd f9d5 	bl	8000ccc <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e006      	b.n	800393e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003930:	4b05      	ldr	r3, [pc, #20]	; (8003948 <RCCEx_PLL2_Config+0x15c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	58024400 	.word	0x58024400
 800394c:	ffff0007 	.word	0xffff0007

08003950 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800395e:	4b53      	ldr	r3, [pc, #332]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b03      	cmp	r3, #3
 8003968:	d101      	bne.n	800396e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e099      	b.n	8003aa2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800396e:	4b4f      	ldr	r3, [pc, #316]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a4e      	ldr	r2, [pc, #312]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397a:	f7fd f9a7 	bl	8000ccc <HAL_GetTick>
 800397e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003980:	e008      	b.n	8003994 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003982:	f7fd f9a3 	bl	8000ccc <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e086      	b.n	8003aa2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003994:	4b45      	ldr	r3, [pc, #276]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1f0      	bne.n	8003982 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80039a0:	4b42      	ldr	r3, [pc, #264]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	051b      	lsls	r3, r3, #20
 80039ae:	493f      	ldr	r1, [pc, #252]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	628b      	str	r3, [r1, #40]	; 0x28
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	025b      	lsls	r3, r3, #9
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	3b01      	subs	r3, #1
 80039de:	061b      	lsls	r3, r3, #24
 80039e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039e4:	4931      	ldr	r1, [pc, #196]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80039ea:	4b30      	ldr	r3, [pc, #192]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	492d      	ldr	r1, [pc, #180]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80039fc:	4b2b      	ldr	r3, [pc, #172]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	4928      	ldr	r1, [pc, #160]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003a0e:	4b27      	ldr	r3, [pc, #156]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	4a26      	ldr	r2, [pc, #152]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1e:	4b24      	ldr	r3, [pc, #144]	; (8003ab0 <RCCEx_PLL3_Config+0x160>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	69d2      	ldr	r2, [r2, #28]
 8003a26:	00d2      	lsls	r2, r2, #3
 8003a28:	4920      	ldr	r1, [pc, #128]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003a2e:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003a40:	4b1a      	ldr	r3, [pc, #104]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	4a19      	ldr	r2, [pc, #100]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a4c:	e00f      	b.n	8003a6e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d106      	bne.n	8003a62 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003a54:	4b15      	ldr	r3, [pc, #84]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	4a14      	ldr	r2, [pc, #80]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a60:	e005      	b.n	8003a6e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003a62:	4b12      	ldr	r3, [pc, #72]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	4a11      	ldr	r2, [pc, #68]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7a:	f7fd f927 	bl	8000ccc <HAL_GetTick>
 8003a7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a80:	e008      	b.n	8003a94 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a82:	f7fd f923 	bl	8000ccc <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e006      	b.n	8003aa2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <RCCEx_PLL3_Config+0x15c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	58024400 	.word	0x58024400
 8003ab0:	ffff0007 	.word	0xffff0007

08003ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e042      	b.n	8003b4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d106      	bne.n	8003ade <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7fc ffb1 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2224      	movs	r2, #36	; 0x24
 8003ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f82c 	bl	8003b54 <UART_SetConfig>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e022      	b.n	8003b4c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fd80 	bl	8004614 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fe07 	bl	8004758 <UART_CheckIdleState>
 8003b4a:	4603      	mov	r3, r0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b5b0      	push	{r4, r5, r7, lr}
 8003b56:	b08e      	sub	sp, #56	; 0x38
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4bbf      	ldr	r3, [pc, #764]	; (8003e80 <UART_SetConfig+0x32c>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003b8a:	430b      	orrs	r3, r1
 8003b8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4ab5      	ldr	r2, [pc, #724]	; (8003e84 <UART_SetConfig+0x330>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d004      	beq.n	8003bbe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	4bb0      	ldr	r3, [pc, #704]	; (8003e88 <UART_SetConfig+0x334>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	f023 010f 	bic.w	r1, r3, #15
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4aa7      	ldr	r2, [pc, #668]	; (8003e8c <UART_SetConfig+0x338>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d176      	bne.n	8003ce0 <UART_SetConfig+0x18c>
 8003bf2:	4ba7      	ldr	r3, [pc, #668]	; (8003e90 <UART_SetConfig+0x33c>)
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bfa:	2b28      	cmp	r3, #40	; 0x28
 8003bfc:	d86c      	bhi.n	8003cd8 <UART_SetConfig+0x184>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <UART_SetConfig+0xb0>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003ca9 	.word	0x08003ca9
 8003c08:	08003cd9 	.word	0x08003cd9
 8003c0c:	08003cd9 	.word	0x08003cd9
 8003c10:	08003cd9 	.word	0x08003cd9
 8003c14:	08003cd9 	.word	0x08003cd9
 8003c18:	08003cd9 	.word	0x08003cd9
 8003c1c:	08003cd9 	.word	0x08003cd9
 8003c20:	08003cd9 	.word	0x08003cd9
 8003c24:	08003cb1 	.word	0x08003cb1
 8003c28:	08003cd9 	.word	0x08003cd9
 8003c2c:	08003cd9 	.word	0x08003cd9
 8003c30:	08003cd9 	.word	0x08003cd9
 8003c34:	08003cd9 	.word	0x08003cd9
 8003c38:	08003cd9 	.word	0x08003cd9
 8003c3c:	08003cd9 	.word	0x08003cd9
 8003c40:	08003cd9 	.word	0x08003cd9
 8003c44:	08003cb9 	.word	0x08003cb9
 8003c48:	08003cd9 	.word	0x08003cd9
 8003c4c:	08003cd9 	.word	0x08003cd9
 8003c50:	08003cd9 	.word	0x08003cd9
 8003c54:	08003cd9 	.word	0x08003cd9
 8003c58:	08003cd9 	.word	0x08003cd9
 8003c5c:	08003cd9 	.word	0x08003cd9
 8003c60:	08003cd9 	.word	0x08003cd9
 8003c64:	08003cc1 	.word	0x08003cc1
 8003c68:	08003cd9 	.word	0x08003cd9
 8003c6c:	08003cd9 	.word	0x08003cd9
 8003c70:	08003cd9 	.word	0x08003cd9
 8003c74:	08003cd9 	.word	0x08003cd9
 8003c78:	08003cd9 	.word	0x08003cd9
 8003c7c:	08003cd9 	.word	0x08003cd9
 8003c80:	08003cd9 	.word	0x08003cd9
 8003c84:	08003cc9 	.word	0x08003cc9
 8003c88:	08003cd9 	.word	0x08003cd9
 8003c8c:	08003cd9 	.word	0x08003cd9
 8003c90:	08003cd9 	.word	0x08003cd9
 8003c94:	08003cd9 	.word	0x08003cd9
 8003c98:	08003cd9 	.word	0x08003cd9
 8003c9c:	08003cd9 	.word	0x08003cd9
 8003ca0:	08003cd9 	.word	0x08003cd9
 8003ca4:	08003cd1 	.word	0x08003cd1
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003cae:	e222      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003cb6:	e21e      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003cbe:	e21a      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003cc6:	e216      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003cc8:	2320      	movs	r3, #32
 8003cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003cce:	e212      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003cd0:	2340      	movs	r3, #64	; 0x40
 8003cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003cd6:	e20e      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003cde:	e20a      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a6b      	ldr	r2, [pc, #428]	; (8003e94 <UART_SetConfig+0x340>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d130      	bne.n	8003d4c <UART_SetConfig+0x1f8>
 8003cea:	4b69      	ldr	r3, [pc, #420]	; (8003e90 <UART_SetConfig+0x33c>)
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	2b05      	cmp	r3, #5
 8003cf4:	d826      	bhi.n	8003d44 <UART_SetConfig+0x1f0>
 8003cf6:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <UART_SetConfig+0x1a8>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d15 	.word	0x08003d15
 8003d00:	08003d1d 	.word	0x08003d1d
 8003d04:	08003d25 	.word	0x08003d25
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d35 	.word	0x08003d35
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d1a:	e1ec      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d22:	e1e8      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003d24:	2308      	movs	r3, #8
 8003d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d2a:	e1e4      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d32:	e1e0      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003d34:	2320      	movs	r3, #32
 8003d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d3a:	e1dc      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003d3c:	2340      	movs	r3, #64	; 0x40
 8003d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d42:	e1d8      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003d44:	2380      	movs	r3, #128	; 0x80
 8003d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d4a:	e1d4      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a51      	ldr	r2, [pc, #324]	; (8003e98 <UART_SetConfig+0x344>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d130      	bne.n	8003db8 <UART_SetConfig+0x264>
 8003d56:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <UART_SetConfig+0x33c>)
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f003 0307 	and.w	r3, r3, #7
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d826      	bhi.n	8003db0 <UART_SetConfig+0x25c>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <UART_SetConfig+0x214>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003d81 	.word	0x08003d81
 8003d6c:	08003d89 	.word	0x08003d89
 8003d70:	08003d91 	.word	0x08003d91
 8003d74:	08003d99 	.word	0x08003d99
 8003d78:	08003da1 	.word	0x08003da1
 8003d7c:	08003da9 	.word	0x08003da9
 8003d80:	2300      	movs	r3, #0
 8003d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d86:	e1b6      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d8e:	e1b2      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003d90:	2308      	movs	r3, #8
 8003d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d96:	e1ae      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003d9e:	e1aa      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003da0:	2320      	movs	r3, #32
 8003da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003da6:	e1a6      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003da8:	2340      	movs	r3, #64	; 0x40
 8003daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dae:	e1a2      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003db6:	e19e      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a37      	ldr	r2, [pc, #220]	; (8003e9c <UART_SetConfig+0x348>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d130      	bne.n	8003e24 <UART_SetConfig+0x2d0>
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <UART_SetConfig+0x33c>)
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d826      	bhi.n	8003e1c <UART_SetConfig+0x2c8>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <UART_SetConfig+0x280>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003ded 	.word	0x08003ded
 8003dd8:	08003df5 	.word	0x08003df5
 8003ddc:	08003dfd 	.word	0x08003dfd
 8003de0:	08003e05 	.word	0x08003e05
 8003de4:	08003e0d 	.word	0x08003e0d
 8003de8:	08003e15 	.word	0x08003e15
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003df2:	e180      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003df4:	2304      	movs	r3, #4
 8003df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dfa:	e17c      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e02:	e178      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e0a:	e174      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e12:	e170      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003e14:	2340      	movs	r3, #64	; 0x40
 8003e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e1a:	e16c      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e22:	e168      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1d      	ldr	r2, [pc, #116]	; (8003ea0 <UART_SetConfig+0x34c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d142      	bne.n	8003eb4 <UART_SetConfig+0x360>
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <UART_SetConfig+0x33c>)
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	2b05      	cmp	r3, #5
 8003e38:	d838      	bhi.n	8003eac <UART_SetConfig+0x358>
 8003e3a:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <UART_SetConfig+0x2ec>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e59 	.word	0x08003e59
 8003e44:	08003e61 	.word	0x08003e61
 8003e48:	08003e69 	.word	0x08003e69
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003e79 	.word	0x08003e79
 8003e54:	08003ea5 	.word	0x08003ea5
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e5e:	e14a      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003e60:	2304      	movs	r3, #4
 8003e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e66:	e146      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003e68:	2308      	movs	r3, #8
 8003e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e6e:	e142      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003e70:	2310      	movs	r3, #16
 8003e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e76:	e13e      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003e78:	2320      	movs	r3, #32
 8003e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e7e:	e13a      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003e80:	cfff69f3 	.word	0xcfff69f3
 8003e84:	58000c00 	.word	0x58000c00
 8003e88:	11fff4ff 	.word	0x11fff4ff
 8003e8c:	40011000 	.word	0x40011000
 8003e90:	58024400 	.word	0x58024400
 8003e94:	40004400 	.word	0x40004400
 8003e98:	40004800 	.word	0x40004800
 8003e9c:	40004c00 	.word	0x40004c00
 8003ea0:	40005000 	.word	0x40005000
 8003ea4:	2340      	movs	r3, #64	; 0x40
 8003ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eaa:	e124      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003eac:	2380      	movs	r3, #128	; 0x80
 8003eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eb2:	e120      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4acc      	ldr	r2, [pc, #816]	; (80041ec <UART_SetConfig+0x698>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d176      	bne.n	8003fac <UART_SetConfig+0x458>
 8003ebe:	4bcc      	ldr	r3, [pc, #816]	; (80041f0 <UART_SetConfig+0x69c>)
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ec6:	2b28      	cmp	r3, #40	; 0x28
 8003ec8:	d86c      	bhi.n	8003fa4 <UART_SetConfig+0x450>
 8003eca:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0x37c>)
 8003ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed0:	08003f75 	.word	0x08003f75
 8003ed4:	08003fa5 	.word	0x08003fa5
 8003ed8:	08003fa5 	.word	0x08003fa5
 8003edc:	08003fa5 	.word	0x08003fa5
 8003ee0:	08003fa5 	.word	0x08003fa5
 8003ee4:	08003fa5 	.word	0x08003fa5
 8003ee8:	08003fa5 	.word	0x08003fa5
 8003eec:	08003fa5 	.word	0x08003fa5
 8003ef0:	08003f7d 	.word	0x08003f7d
 8003ef4:	08003fa5 	.word	0x08003fa5
 8003ef8:	08003fa5 	.word	0x08003fa5
 8003efc:	08003fa5 	.word	0x08003fa5
 8003f00:	08003fa5 	.word	0x08003fa5
 8003f04:	08003fa5 	.word	0x08003fa5
 8003f08:	08003fa5 	.word	0x08003fa5
 8003f0c:	08003fa5 	.word	0x08003fa5
 8003f10:	08003f85 	.word	0x08003f85
 8003f14:	08003fa5 	.word	0x08003fa5
 8003f18:	08003fa5 	.word	0x08003fa5
 8003f1c:	08003fa5 	.word	0x08003fa5
 8003f20:	08003fa5 	.word	0x08003fa5
 8003f24:	08003fa5 	.word	0x08003fa5
 8003f28:	08003fa5 	.word	0x08003fa5
 8003f2c:	08003fa5 	.word	0x08003fa5
 8003f30:	08003f8d 	.word	0x08003f8d
 8003f34:	08003fa5 	.word	0x08003fa5
 8003f38:	08003fa5 	.word	0x08003fa5
 8003f3c:	08003fa5 	.word	0x08003fa5
 8003f40:	08003fa5 	.word	0x08003fa5
 8003f44:	08003fa5 	.word	0x08003fa5
 8003f48:	08003fa5 	.word	0x08003fa5
 8003f4c:	08003fa5 	.word	0x08003fa5
 8003f50:	08003f95 	.word	0x08003f95
 8003f54:	08003fa5 	.word	0x08003fa5
 8003f58:	08003fa5 	.word	0x08003fa5
 8003f5c:	08003fa5 	.word	0x08003fa5
 8003f60:	08003fa5 	.word	0x08003fa5
 8003f64:	08003fa5 	.word	0x08003fa5
 8003f68:	08003fa5 	.word	0x08003fa5
 8003f6c:	08003fa5 	.word	0x08003fa5
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f7a:	e0bc      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f82:	e0b8      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003f84:	2308      	movs	r3, #8
 8003f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f8a:	e0b4      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f92:	e0b0      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003f94:	2320      	movs	r3, #32
 8003f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f9a:	e0ac      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003f9c:	2340      	movs	r3, #64	; 0x40
 8003f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fa2:	e0a8      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003faa:	e0a4      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a90      	ldr	r2, [pc, #576]	; (80041f4 <UART_SetConfig+0x6a0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d130      	bne.n	8004018 <UART_SetConfig+0x4c4>
 8003fb6:	4b8e      	ldr	r3, [pc, #568]	; (80041f0 <UART_SetConfig+0x69c>)
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d826      	bhi.n	8004010 <UART_SetConfig+0x4bc>
 8003fc2:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <UART_SetConfig+0x474>)
 8003fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc8:	08003fe1 	.word	0x08003fe1
 8003fcc:	08003fe9 	.word	0x08003fe9
 8003fd0:	08003ff1 	.word	0x08003ff1
 8003fd4:	08003ff9 	.word	0x08003ff9
 8003fd8:	08004001 	.word	0x08004001
 8003fdc:	08004009 	.word	0x08004009
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fe6:	e086      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fee:	e082      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ff6:	e07e      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ffe:	e07a      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8004000:	2320      	movs	r3, #32
 8004002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004006:	e076      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8004008:	2340      	movs	r3, #64	; 0x40
 800400a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800400e:	e072      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8004010:	2380      	movs	r3, #128	; 0x80
 8004012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004016:	e06e      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a76      	ldr	r2, [pc, #472]	; (80041f8 <UART_SetConfig+0x6a4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d130      	bne.n	8004084 <UART_SetConfig+0x530>
 8004022:	4b73      	ldr	r3, [pc, #460]	; (80041f0 <UART_SetConfig+0x69c>)
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	2b05      	cmp	r3, #5
 800402c:	d826      	bhi.n	800407c <UART_SetConfig+0x528>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <UART_SetConfig+0x4e0>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	0800404d 	.word	0x0800404d
 8004038:	08004055 	.word	0x08004055
 800403c:	0800405d 	.word	0x0800405d
 8004040:	08004065 	.word	0x08004065
 8004044:	0800406d 	.word	0x0800406d
 8004048:	08004075 	.word	0x08004075
 800404c:	2300      	movs	r3, #0
 800404e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004052:	e050      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8004054:	2304      	movs	r3, #4
 8004056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800405a:	e04c      	b.n	80040f6 <UART_SetConfig+0x5a2>
 800405c:	2308      	movs	r3, #8
 800405e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004062:	e048      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8004064:	2310      	movs	r3, #16
 8004066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800406a:	e044      	b.n	80040f6 <UART_SetConfig+0x5a2>
 800406c:	2320      	movs	r3, #32
 800406e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004072:	e040      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8004074:	2340      	movs	r3, #64	; 0x40
 8004076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800407a:	e03c      	b.n	80040f6 <UART_SetConfig+0x5a2>
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004082:	e038      	b.n	80040f6 <UART_SetConfig+0x5a2>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a5c      	ldr	r2, [pc, #368]	; (80041fc <UART_SetConfig+0x6a8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d130      	bne.n	80040f0 <UART_SetConfig+0x59c>
 800408e:	4b58      	ldr	r3, [pc, #352]	; (80041f0 <UART_SetConfig+0x69c>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	2b05      	cmp	r3, #5
 8004098:	d826      	bhi.n	80040e8 <UART_SetConfig+0x594>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <UART_SetConfig+0x54c>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040b9 	.word	0x080040b9
 80040a4:	080040c1 	.word	0x080040c1
 80040a8:	080040c9 	.word	0x080040c9
 80040ac:	080040d1 	.word	0x080040d1
 80040b0:	080040d9 	.word	0x080040d9
 80040b4:	080040e1 	.word	0x080040e1
 80040b8:	2302      	movs	r3, #2
 80040ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040be:	e01a      	b.n	80040f6 <UART_SetConfig+0x5a2>
 80040c0:	2304      	movs	r3, #4
 80040c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040c6:	e016      	b.n	80040f6 <UART_SetConfig+0x5a2>
 80040c8:	2308      	movs	r3, #8
 80040ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ce:	e012      	b.n	80040f6 <UART_SetConfig+0x5a2>
 80040d0:	2310      	movs	r3, #16
 80040d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040d6:	e00e      	b.n	80040f6 <UART_SetConfig+0x5a2>
 80040d8:	2320      	movs	r3, #32
 80040da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040de:	e00a      	b.n	80040f6 <UART_SetConfig+0x5a2>
 80040e0:	2340      	movs	r3, #64	; 0x40
 80040e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e6:	e006      	b.n	80040f6 <UART_SetConfig+0x5a2>
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ee:	e002      	b.n	80040f6 <UART_SetConfig+0x5a2>
 80040f0:	2380      	movs	r3, #128	; 0x80
 80040f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a40      	ldr	r2, [pc, #256]	; (80041fc <UART_SetConfig+0x6a8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	f040 80ef 	bne.w	80042e0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004102:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004106:	2b20      	cmp	r3, #32
 8004108:	dc46      	bgt.n	8004198 <UART_SetConfig+0x644>
 800410a:	2b02      	cmp	r3, #2
 800410c:	f2c0 8081 	blt.w	8004212 <UART_SetConfig+0x6be>
 8004110:	3b02      	subs	r3, #2
 8004112:	2b1e      	cmp	r3, #30
 8004114:	d87d      	bhi.n	8004212 <UART_SetConfig+0x6be>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <UART_SetConfig+0x5c8>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	0800419f 	.word	0x0800419f
 8004120:	08004213 	.word	0x08004213
 8004124:	080041a7 	.word	0x080041a7
 8004128:	08004213 	.word	0x08004213
 800412c:	08004213 	.word	0x08004213
 8004130:	08004213 	.word	0x08004213
 8004134:	080041b7 	.word	0x080041b7
 8004138:	08004213 	.word	0x08004213
 800413c:	08004213 	.word	0x08004213
 8004140:	08004213 	.word	0x08004213
 8004144:	08004213 	.word	0x08004213
 8004148:	08004213 	.word	0x08004213
 800414c:	08004213 	.word	0x08004213
 8004150:	08004213 	.word	0x08004213
 8004154:	080041c7 	.word	0x080041c7
 8004158:	08004213 	.word	0x08004213
 800415c:	08004213 	.word	0x08004213
 8004160:	08004213 	.word	0x08004213
 8004164:	08004213 	.word	0x08004213
 8004168:	08004213 	.word	0x08004213
 800416c:	08004213 	.word	0x08004213
 8004170:	08004213 	.word	0x08004213
 8004174:	08004213 	.word	0x08004213
 8004178:	08004213 	.word	0x08004213
 800417c:	08004213 	.word	0x08004213
 8004180:	08004213 	.word	0x08004213
 8004184:	08004213 	.word	0x08004213
 8004188:	08004213 	.word	0x08004213
 800418c:	08004213 	.word	0x08004213
 8004190:	08004213 	.word	0x08004213
 8004194:	08004205 	.word	0x08004205
 8004198:	2b40      	cmp	r3, #64	; 0x40
 800419a:	d036      	beq.n	800420a <UART_SetConfig+0x6b6>
 800419c:	e039      	b.n	8004212 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800419e:	f7ff f867 	bl	8003270 <HAL_RCCEx_GetD3PCLK1Freq>
 80041a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80041a4:	e03b      	b.n	800421e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041a6:	f107 0314 	add.w	r3, r7, #20
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff f876 	bl	800329c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041b4:	e033      	b.n	800421e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041b6:	f107 0308 	add.w	r3, r7, #8
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff f9c2 	bl	8003544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041c4:	e02b      	b.n	800421e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <UART_SetConfig+0x69c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <UART_SetConfig+0x69c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	08db      	lsrs	r3, r3, #3
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	4a08      	ldr	r2, [pc, #32]	; (8004200 <UART_SetConfig+0x6ac>)
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80041e4:	e01b      	b.n	800421e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <UART_SetConfig+0x6ac>)
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80041ea:	e018      	b.n	800421e <UART_SetConfig+0x6ca>
 80041ec:	40011400 	.word	0x40011400
 80041f0:	58024400 	.word	0x58024400
 80041f4:	40007800 	.word	0x40007800
 80041f8:	40007c00 	.word	0x40007c00
 80041fc:	58000c00 	.word	0x58000c00
 8004200:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004204:	4bc4      	ldr	r3, [pc, #784]	; (8004518 <UART_SetConfig+0x9c4>)
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004208:	e009      	b.n	800421e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004210:	e005      	b.n	800421e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800421c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 81da 	beq.w	80045da <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	4abc      	ldr	r2, [pc, #752]	; (800451c <UART_SetConfig+0x9c8>)
 800422c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004230:	461a      	mov	r2, r3
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	fbb3 f3f2 	udiv	r3, r3, r2
 8004238:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	4613      	mov	r3, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	4413      	add	r3, r2
 8004244:	6a3a      	ldr	r2, [r7, #32]
 8004246:	429a      	cmp	r2, r3
 8004248:	d305      	bcc.n	8004256 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004250:	6a3a      	ldr	r2, [r7, #32]
 8004252:	429a      	cmp	r2, r3
 8004254:	d903      	bls.n	800425e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800425c:	e1bd      	b.n	80045da <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	4618      	mov	r0, r3
 8004262:	f04f 0100 	mov.w	r1, #0
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	4aac      	ldr	r2, [pc, #688]	; (800451c <UART_SetConfig+0x9c8>)
 800426c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004270:	b29a      	uxth	r2, r3
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	f7fc f82f 	bl	80002d8 <__aeabi_uldivmod>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	020b      	lsls	r3, r1, #8
 800428c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004290:	0202      	lsls	r2, r0, #8
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	6849      	ldr	r1, [r1, #4]
 8004296:	0849      	lsrs	r1, r1, #1
 8004298:	4608      	mov	r0, r1
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	1814      	adds	r4, r2, r0
 80042a0:	eb43 0501 	adc.w	r5, r3, r1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	461a      	mov	r2, r3
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	4620      	mov	r0, r4
 80042b0:	4629      	mov	r1, r5
 80042b2:	f7fc f811 	bl	80002d8 <__aeabi_uldivmod>
 80042b6:	4602      	mov	r2, r0
 80042b8:	460b      	mov	r3, r1
 80042ba:	4613      	mov	r3, r2
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c4:	d308      	bcc.n	80042d8 <UART_SetConfig+0x784>
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042cc:	d204      	bcs.n	80042d8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	e180      	b.n	80045da <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80042de:	e17c      	b.n	80045da <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e8:	f040 80be 	bne.w	8004468 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 80042ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	dc49      	bgt.n	8004388 <UART_SetConfig+0x834>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	db7c      	blt.n	80043f2 <UART_SetConfig+0x89e>
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d87a      	bhi.n	80043f2 <UART_SetConfig+0x89e>
 80042fc:	a201      	add	r2, pc, #4	; (adr r2, 8004304 <UART_SetConfig+0x7b0>)
 80042fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004302:	bf00      	nop
 8004304:	0800438f 	.word	0x0800438f
 8004308:	08004397 	.word	0x08004397
 800430c:	080043f3 	.word	0x080043f3
 8004310:	080043f3 	.word	0x080043f3
 8004314:	0800439f 	.word	0x0800439f
 8004318:	080043f3 	.word	0x080043f3
 800431c:	080043f3 	.word	0x080043f3
 8004320:	080043f3 	.word	0x080043f3
 8004324:	080043af 	.word	0x080043af
 8004328:	080043f3 	.word	0x080043f3
 800432c:	080043f3 	.word	0x080043f3
 8004330:	080043f3 	.word	0x080043f3
 8004334:	080043f3 	.word	0x080043f3
 8004338:	080043f3 	.word	0x080043f3
 800433c:	080043f3 	.word	0x080043f3
 8004340:	080043f3 	.word	0x080043f3
 8004344:	080043bf 	.word	0x080043bf
 8004348:	080043f3 	.word	0x080043f3
 800434c:	080043f3 	.word	0x080043f3
 8004350:	080043f3 	.word	0x080043f3
 8004354:	080043f3 	.word	0x080043f3
 8004358:	080043f3 	.word	0x080043f3
 800435c:	080043f3 	.word	0x080043f3
 8004360:	080043f3 	.word	0x080043f3
 8004364:	080043f3 	.word	0x080043f3
 8004368:	080043f3 	.word	0x080043f3
 800436c:	080043f3 	.word	0x080043f3
 8004370:	080043f3 	.word	0x080043f3
 8004374:	080043f3 	.word	0x080043f3
 8004378:	080043f3 	.word	0x080043f3
 800437c:	080043f3 	.word	0x080043f3
 8004380:	080043f3 	.word	0x080043f3
 8004384:	080043e5 	.word	0x080043e5
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d02e      	beq.n	80043ea <UART_SetConfig+0x896>
 800438c:	e031      	b.n	80043f2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800438e:	f7fe f803 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8004392:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004394:	e033      	b.n	80043fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004396:	f7fe f815 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 800439a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800439c:	e02f      	b.n	80043fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800439e:	f107 0314 	add.w	r3, r7, #20
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fe ff7a 	bl	800329c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043ac:	e027      	b.n	80043fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043ae:	f107 0308 	add.w	r3, r7, #8
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff f8c6 	bl	8003544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043bc:	e01f      	b.n	80043fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043be:	4b58      	ldr	r3, [pc, #352]	; (8004520 <UART_SetConfig+0x9cc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d009      	beq.n	80043de <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80043ca:	4b55      	ldr	r3, [pc, #340]	; (8004520 <UART_SetConfig+0x9cc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	08db      	lsrs	r3, r3, #3
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	4a53      	ldr	r2, [pc, #332]	; (8004524 <UART_SetConfig+0x9d0>)
 80043d6:	fa22 f303 	lsr.w	r3, r2, r3
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043dc:	e00f      	b.n	80043fe <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 80043de:	4b51      	ldr	r3, [pc, #324]	; (8004524 <UART_SetConfig+0x9d0>)
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043e2:	e00c      	b.n	80043fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80043e4:	4b4c      	ldr	r3, [pc, #304]	; (8004518 <UART_SetConfig+0x9c4>)
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043e8:	e009      	b.n	80043fe <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043f0:	e005      	b.n	80043fe <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80043fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 80ea 	beq.w	80045da <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	4a44      	ldr	r2, [pc, #272]	; (800451c <UART_SetConfig+0x9c8>)
 800440c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004410:	461a      	mov	r2, r3
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	fbb3 f3f2 	udiv	r3, r3, r2
 8004418:	005a      	lsls	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	441a      	add	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	2b0f      	cmp	r3, #15
 8004430:	d916      	bls.n	8004460 <UART_SetConfig+0x90c>
 8004432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004438:	d212      	bcs.n	8004460 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	b29b      	uxth	r3, r3
 800443e:	f023 030f 	bic.w	r3, r3, #15
 8004442:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004446:	085b      	lsrs	r3, r3, #1
 8004448:	b29b      	uxth	r3, r3
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	b29a      	uxth	r2, r3
 8004450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004452:	4313      	orrs	r3, r2
 8004454:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	e0bc      	b.n	80045da <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004466:	e0b8      	b.n	80045da <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004468:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800446c:	2b20      	cmp	r3, #32
 800446e:	dc4b      	bgt.n	8004508 <UART_SetConfig+0x9b4>
 8004470:	2b00      	cmp	r3, #0
 8004472:	f2c0 8087 	blt.w	8004584 <UART_SetConfig+0xa30>
 8004476:	2b20      	cmp	r3, #32
 8004478:	f200 8084 	bhi.w	8004584 <UART_SetConfig+0xa30>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <UART_SetConfig+0x930>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	0800450f 	.word	0x0800450f
 8004488:	08004529 	.word	0x08004529
 800448c:	08004585 	.word	0x08004585
 8004490:	08004585 	.word	0x08004585
 8004494:	08004531 	.word	0x08004531
 8004498:	08004585 	.word	0x08004585
 800449c:	08004585 	.word	0x08004585
 80044a0:	08004585 	.word	0x08004585
 80044a4:	08004541 	.word	0x08004541
 80044a8:	08004585 	.word	0x08004585
 80044ac:	08004585 	.word	0x08004585
 80044b0:	08004585 	.word	0x08004585
 80044b4:	08004585 	.word	0x08004585
 80044b8:	08004585 	.word	0x08004585
 80044bc:	08004585 	.word	0x08004585
 80044c0:	08004585 	.word	0x08004585
 80044c4:	08004551 	.word	0x08004551
 80044c8:	08004585 	.word	0x08004585
 80044cc:	08004585 	.word	0x08004585
 80044d0:	08004585 	.word	0x08004585
 80044d4:	08004585 	.word	0x08004585
 80044d8:	08004585 	.word	0x08004585
 80044dc:	08004585 	.word	0x08004585
 80044e0:	08004585 	.word	0x08004585
 80044e4:	08004585 	.word	0x08004585
 80044e8:	08004585 	.word	0x08004585
 80044ec:	08004585 	.word	0x08004585
 80044f0:	08004585 	.word	0x08004585
 80044f4:	08004585 	.word	0x08004585
 80044f8:	08004585 	.word	0x08004585
 80044fc:	08004585 	.word	0x08004585
 8004500:	08004585 	.word	0x08004585
 8004504:	08004577 	.word	0x08004577
 8004508:	2b40      	cmp	r3, #64	; 0x40
 800450a:	d037      	beq.n	800457c <UART_SetConfig+0xa28>
 800450c:	e03a      	b.n	8004584 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800450e:	f7fd ff43 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8004512:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004514:	e03c      	b.n	8004590 <UART_SetConfig+0xa3c>
 8004516:	bf00      	nop
 8004518:	003d0900 	.word	0x003d0900
 800451c:	08004c04 	.word	0x08004c04
 8004520:	58024400 	.word	0x58024400
 8004524:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004528:	f7fd ff4c 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 800452c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800452e:	e02f      	b.n	8004590 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004530:	f107 0314 	add.w	r3, r7, #20
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe feb1 	bl	800329c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800453e:	e027      	b.n	8004590 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004540:	f107 0308 	add.w	r3, r7, #8
 8004544:	4618      	mov	r0, r3
 8004546:	f7fe fffd 	bl	8003544 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800454e:	e01f      	b.n	8004590 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <UART_SetConfig+0xab0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d009      	beq.n	8004570 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800455c:	4b29      	ldr	r3, [pc, #164]	; (8004604 <UART_SetConfig+0xab0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	08db      	lsrs	r3, r3, #3
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	4a28      	ldr	r2, [pc, #160]	; (8004608 <UART_SetConfig+0xab4>)
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
 800456c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800456e:	e00f      	b.n	8004590 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <UART_SetConfig+0xab4>)
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004574:	e00c      	b.n	8004590 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004576:	4b25      	ldr	r3, [pc, #148]	; (800460c <UART_SetConfig+0xab8>)
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800457a:	e009      	b.n	8004590 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800457c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004582:	e005      	b.n	8004590 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800458e:	bf00      	nop
    }

    if (pclk != 0U)
 8004590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d021      	beq.n	80045da <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <UART_SetConfig+0xabc>)
 800459c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045a0:	461a      	mov	r2, r3
 80045a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	085b      	lsrs	r3, r3, #1
 80045ae:	441a      	add	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	2b0f      	cmp	r3, #15
 80045be:	d909      	bls.n	80045d4 <UART_SetConfig+0xa80>
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c6:	d205      	bcs.n	80045d4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	e002      	b.n	80045da <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3738      	adds	r7, #56	; 0x38
 80045fe:	46bd      	mov	sp, r7
 8004600:	bdb0      	pop	{r4, r5, r7, pc}
 8004602:	bf00      	nop
 8004604:	58024400 	.word	0x58024400
 8004608:	03d09000 	.word	0x03d09000
 800460c:	003d0900 	.word	0x003d0900
 8004610:	08004c04 	.word	0x08004c04

08004614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d01a      	beq.n	800472a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004712:	d10a      	bne.n	800472a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af02      	add	r7, sp, #8
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004768:	f7fc fab0 	bl	8000ccc <HAL_GetTick>
 800476c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b08      	cmp	r3, #8
 800477a:	d10e      	bne.n	800479a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800477c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f82f 	bl	80047ee <UART_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e025      	b.n	80047e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d10e      	bne.n	80047c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f819 	bl	80047ee <UART_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e00f      	b.n	80047e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b09c      	sub	sp, #112	; 0x70
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047fe:	e0a9      	b.n	8004954 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	f000 80a5 	beq.w	8004954 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800480a:	f7fc fa5f 	bl	8000ccc <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <UART_WaitOnFlagUntilTimeout+0x32>
 800481a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800481c:	2b00      	cmp	r3, #0
 800481e:	d140      	bne.n	80048a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800482e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004830:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004834:	667b      	str	r3, [r7, #100]	; 0x64
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800483e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004840:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004844:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800484c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e6      	bne.n	8004820 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3308      	adds	r3, #8
 8004858:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	663b      	str	r3, [r7, #96]	; 0x60
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3308      	adds	r3, #8
 8004870:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004872:	64ba      	str	r2, [r7, #72]	; 0x48
 8004874:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e5      	bne.n	8004852 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2220      	movs	r2, #32
 8004892:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e069      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d051      	beq.n	8004954 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048be:	d149      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
 80048ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e6      	bne.n	80048ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3308      	adds	r3, #8
 8004902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	613b      	str	r3, [r7, #16]
   return(result);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f023 0301 	bic.w	r3, r3, #1
 8004912:	66bb      	str	r3, [r7, #104]	; 0x68
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3308      	adds	r3, #8
 800491a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800491c:	623a      	str	r2, [r7, #32]
 800491e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	69f9      	ldr	r1, [r7, #28]
 8004922:	6a3a      	ldr	r2, [r7, #32]
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	61bb      	str	r3, [r7, #24]
   return(result);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e5      	bne.n	80048fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2220      	movs	r2, #32
 8004934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2220      	movs	r2, #32
 800493c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e010      	b.n	8004976 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4013      	ands	r3, r2
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	429a      	cmp	r2, r3
 8004970:	f43f af46 	beq.w	8004800 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3770      	adds	r7, #112	; 0x70
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_UARTEx_DisableFifoMode+0x16>
 8004990:	2302      	movs	r3, #2
 8004992:	e027      	b.n	80049e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	; 0x24
 80049a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80049c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e02d      	b.n	8004a64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2224      	movs	r2, #36	; 0x24
 8004a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f022 0201 	bic.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f84f 	bl	8004ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e02d      	b.n	8004ae0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2224      	movs	r2, #36	; 0x24
 8004a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f811 	bl	8004ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d108      	bne.n	8004b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b08:	e031      	b.n	8004b6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b0e:	2310      	movs	r3, #16
 8004b10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	0e5b      	lsrs	r3, r3, #25
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	0f5b      	lsrs	r3, r3, #29
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b32:	7bbb      	ldrb	r3, [r7, #14]
 8004b34:	7b3a      	ldrb	r2, [r7, #12]
 8004b36:	4911      	ldr	r1, [pc, #68]	; (8004b7c <UARTEx_SetNbDataToProcess+0x94>)
 8004b38:	5c8a      	ldrb	r2, [r1, r2]
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004b3e:	7b3a      	ldrb	r2, [r7, #12]
 8004b40:	490f      	ldr	r1, [pc, #60]	; (8004b80 <UARTEx_SetNbDataToProcess+0x98>)
 8004b42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004b44:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	7b7a      	ldrb	r2, [r7, #13]
 8004b54:	4909      	ldr	r1, [pc, #36]	; (8004b7c <UARTEx_SetNbDataToProcess+0x94>)
 8004b56:	5c8a      	ldrb	r2, [r1, r2]
 8004b58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b5c:	7b7a      	ldrb	r2, [r7, #13]
 8004b5e:	4908      	ldr	r1, [pc, #32]	; (8004b80 <UARTEx_SetNbDataToProcess+0x98>)
 8004b60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b6e:	bf00      	nop
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	08004c1c 	.word	0x08004c1c
 8004b80:	08004c24 	.word	0x08004c24

08004b84 <__libc_init_array>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	4d0d      	ldr	r5, [pc, #52]	; (8004bbc <__libc_init_array+0x38>)
 8004b88:	4c0d      	ldr	r4, [pc, #52]	; (8004bc0 <__libc_init_array+0x3c>)
 8004b8a:	1b64      	subs	r4, r4, r5
 8004b8c:	10a4      	asrs	r4, r4, #2
 8004b8e:	2600      	movs	r6, #0
 8004b90:	42a6      	cmp	r6, r4
 8004b92:	d109      	bne.n	8004ba8 <__libc_init_array+0x24>
 8004b94:	4d0b      	ldr	r5, [pc, #44]	; (8004bc4 <__libc_init_array+0x40>)
 8004b96:	4c0c      	ldr	r4, [pc, #48]	; (8004bc8 <__libc_init_array+0x44>)
 8004b98:	f000 f820 	bl	8004bdc <_init>
 8004b9c:	1b64      	subs	r4, r4, r5
 8004b9e:	10a4      	asrs	r4, r4, #2
 8004ba0:	2600      	movs	r6, #0
 8004ba2:	42a6      	cmp	r6, r4
 8004ba4:	d105      	bne.n	8004bb2 <__libc_init_array+0x2e>
 8004ba6:	bd70      	pop	{r4, r5, r6, pc}
 8004ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bac:	4798      	blx	r3
 8004bae:	3601      	adds	r6, #1
 8004bb0:	e7ee      	b.n	8004b90 <__libc_init_array+0xc>
 8004bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb6:	4798      	blx	r3
 8004bb8:	3601      	adds	r6, #1
 8004bba:	e7f2      	b.n	8004ba2 <__libc_init_array+0x1e>
 8004bbc:	08004c34 	.word	0x08004c34
 8004bc0:	08004c34 	.word	0x08004c34
 8004bc4:	08004c34 	.word	0x08004c34
 8004bc8:	08004c38 	.word	0x08004c38

08004bcc <memset>:
 8004bcc:	4402      	add	r2, r0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d100      	bne.n	8004bd6 <memset+0xa>
 8004bd4:	4770      	bx	lr
 8004bd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bda:	e7f9      	b.n	8004bd0 <memset+0x4>

08004bdc <_init>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr

08004be8 <_fini>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr
