
4_HSEMCoreDev_PeripheralManagement_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce4  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08103f7c  08103f7c  00013f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08103fb4  08103fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08103fbc  08103fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08103fc0  08103fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000001c  10000000  08103fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b0  1000001c  08103fe0  0002001c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100000cc  08103fe0  000200cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017bd8  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026c8  00000000  00000000  00037c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ae8  00000000  00000000  0003a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a40  00000000  00000000  0003add8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000388d1  00000000  00000000  0003b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e61c  00000000  00000000  000740e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178b5c  00000000  00000000  00082705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fb261  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c5c  00000000  00000000  001fb2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	1000001c 	.word	0x1000001c
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08103f64 	.word	0x08103f64

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000020 	.word	0x10000020
 81002d4:	08103f64 	.word	0x08103f64

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b96e 	b.w	81005cc <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	4604      	mov	r4, r0
 8100310:	468c      	mov	ip, r1
 8100312:	2b00      	cmp	r3, #0
 8100314:	f040 8083 	bne.w	810041e <__udivmoddi4+0x116>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d947      	bls.n	81003ae <__udivmoddi4+0xa6>
 810031e:	fab2 f282 	clz	r2, r2
 8100322:	b142      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100324:	f1c2 0020 	rsb	r0, r2, #32
 8100328:	fa24 f000 	lsr.w	r0, r4, r0
 810032c:	4091      	lsls	r1, r2
 810032e:	4097      	lsls	r7, r2
 8100330:	ea40 0c01 	orr.w	ip, r0, r1
 8100334:	4094      	lsls	r4, r2
 8100336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 810033a:	0c23      	lsrs	r3, r4, #16
 810033c:	fbbc f6f8 	udiv	r6, ip, r8
 8100340:	fa1f fe87 	uxth.w	lr, r7
 8100344:	fb08 c116 	mls	r1, r8, r6, ip
 8100348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034c:	fb06 f10e 	mul.w	r1, r6, lr
 8100350:	4299      	cmp	r1, r3
 8100352:	d909      	bls.n	8100368 <__udivmoddi4+0x60>
 8100354:	18fb      	adds	r3, r7, r3
 8100356:	f106 30ff 	add.w	r0, r6, #4294967295
 810035a:	f080 8119 	bcs.w	8100590 <__udivmoddi4+0x288>
 810035e:	4299      	cmp	r1, r3
 8100360:	f240 8116 	bls.w	8100590 <__udivmoddi4+0x288>
 8100364:	3e02      	subs	r6, #2
 8100366:	443b      	add	r3, r7
 8100368:	1a5b      	subs	r3, r3, r1
 810036a:	b2a4      	uxth	r4, r4
 810036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100370:	fb08 3310 	mls	r3, r8, r0, r3
 8100374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100378:	fb00 fe0e 	mul.w	lr, r0, lr
 810037c:	45a6      	cmp	lr, r4
 810037e:	d909      	bls.n	8100394 <__udivmoddi4+0x8c>
 8100380:	193c      	adds	r4, r7, r4
 8100382:	f100 33ff 	add.w	r3, r0, #4294967295
 8100386:	f080 8105 	bcs.w	8100594 <__udivmoddi4+0x28c>
 810038a:	45a6      	cmp	lr, r4
 810038c:	f240 8102 	bls.w	8100594 <__udivmoddi4+0x28c>
 8100390:	3802      	subs	r0, #2
 8100392:	443c      	add	r4, r7
 8100394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100398:	eba4 040e 	sub.w	r4, r4, lr
 810039c:	2600      	movs	r6, #0
 810039e:	b11d      	cbz	r5, 81003a8 <__udivmoddi4+0xa0>
 81003a0:	40d4      	lsrs	r4, r2
 81003a2:	2300      	movs	r3, #0
 81003a4:	e9c5 4300 	strd	r4, r3, [r5]
 81003a8:	4631      	mov	r1, r6
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	b902      	cbnz	r2, 81003b2 <__udivmoddi4+0xaa>
 81003b0:	deff      	udf	#255	; 0xff
 81003b2:	fab2 f282 	clz	r2, r2
 81003b6:	2a00      	cmp	r2, #0
 81003b8:	d150      	bne.n	810045c <__udivmoddi4+0x154>
 81003ba:	1bcb      	subs	r3, r1, r7
 81003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003c0:	fa1f f887 	uxth.w	r8, r7
 81003c4:	2601      	movs	r6, #1
 81003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 81003ca:	0c21      	lsrs	r1, r4, #16
 81003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 81003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81003d4:	fb08 f30c 	mul.w	r3, r8, ip
 81003d8:	428b      	cmp	r3, r1
 81003da:	d907      	bls.n	81003ec <__udivmoddi4+0xe4>
 81003dc:	1879      	adds	r1, r7, r1
 81003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 81003e2:	d202      	bcs.n	81003ea <__udivmoddi4+0xe2>
 81003e4:	428b      	cmp	r3, r1
 81003e6:	f200 80e9 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 81003ea:	4684      	mov	ip, r0
 81003ec:	1ac9      	subs	r1, r1, r3
 81003ee:	b2a3      	uxth	r3, r4
 81003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 81003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 81003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81003fc:	fb08 f800 	mul.w	r8, r8, r0
 8100400:	45a0      	cmp	r8, r4
 8100402:	d907      	bls.n	8100414 <__udivmoddi4+0x10c>
 8100404:	193c      	adds	r4, r7, r4
 8100406:	f100 33ff 	add.w	r3, r0, #4294967295
 810040a:	d202      	bcs.n	8100412 <__udivmoddi4+0x10a>
 810040c:	45a0      	cmp	r8, r4
 810040e:	f200 80d9 	bhi.w	81005c4 <__udivmoddi4+0x2bc>
 8100412:	4618      	mov	r0, r3
 8100414:	eba4 0408 	sub.w	r4, r4, r8
 8100418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 810041c:	e7bf      	b.n	810039e <__udivmoddi4+0x96>
 810041e:	428b      	cmp	r3, r1
 8100420:	d909      	bls.n	8100436 <__udivmoddi4+0x12e>
 8100422:	2d00      	cmp	r5, #0
 8100424:	f000 80b1 	beq.w	810058a <__udivmoddi4+0x282>
 8100428:	2600      	movs	r6, #0
 810042a:	e9c5 0100 	strd	r0, r1, [r5]
 810042e:	4630      	mov	r0, r6
 8100430:	4631      	mov	r1, r6
 8100432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100436:	fab3 f683 	clz	r6, r3
 810043a:	2e00      	cmp	r6, #0
 810043c:	d14a      	bne.n	81004d4 <__udivmoddi4+0x1cc>
 810043e:	428b      	cmp	r3, r1
 8100440:	d302      	bcc.n	8100448 <__udivmoddi4+0x140>
 8100442:	4282      	cmp	r2, r0
 8100444:	f200 80b8 	bhi.w	81005b8 <__udivmoddi4+0x2b0>
 8100448:	1a84      	subs	r4, r0, r2
 810044a:	eb61 0103 	sbc.w	r1, r1, r3
 810044e:	2001      	movs	r0, #1
 8100450:	468c      	mov	ip, r1
 8100452:	2d00      	cmp	r5, #0
 8100454:	d0a8      	beq.n	81003a8 <__udivmoddi4+0xa0>
 8100456:	e9c5 4c00 	strd	r4, ip, [r5]
 810045a:	e7a5      	b.n	81003a8 <__udivmoddi4+0xa0>
 810045c:	f1c2 0320 	rsb	r3, r2, #32
 8100460:	fa20 f603 	lsr.w	r6, r0, r3
 8100464:	4097      	lsls	r7, r2
 8100466:	fa01 f002 	lsl.w	r0, r1, r2
 810046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810046e:	40d9      	lsrs	r1, r3
 8100470:	4330      	orrs	r0, r6
 8100472:	0c03      	lsrs	r3, r0, #16
 8100474:	fbb1 f6fe 	udiv	r6, r1, lr
 8100478:	fa1f f887 	uxth.w	r8, r7
 810047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8100480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100484:	fb06 f108 	mul.w	r1, r6, r8
 8100488:	4299      	cmp	r1, r3
 810048a:	fa04 f402 	lsl.w	r4, r4, r2
 810048e:	d909      	bls.n	81004a4 <__udivmoddi4+0x19c>
 8100490:	18fb      	adds	r3, r7, r3
 8100492:	f106 3cff 	add.w	ip, r6, #4294967295
 8100496:	f080 808d 	bcs.w	81005b4 <__udivmoddi4+0x2ac>
 810049a:	4299      	cmp	r1, r3
 810049c:	f240 808a 	bls.w	81005b4 <__udivmoddi4+0x2ac>
 81004a0:	3e02      	subs	r6, #2
 81004a2:	443b      	add	r3, r7
 81004a4:	1a5b      	subs	r3, r3, r1
 81004a6:	b281      	uxth	r1, r0
 81004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 81004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 81004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81004b4:	fb00 f308 	mul.w	r3, r0, r8
 81004b8:	428b      	cmp	r3, r1
 81004ba:	d907      	bls.n	81004cc <__udivmoddi4+0x1c4>
 81004bc:	1879      	adds	r1, r7, r1
 81004be:	f100 3cff 	add.w	ip, r0, #4294967295
 81004c2:	d273      	bcs.n	81005ac <__udivmoddi4+0x2a4>
 81004c4:	428b      	cmp	r3, r1
 81004c6:	d971      	bls.n	81005ac <__udivmoddi4+0x2a4>
 81004c8:	3802      	subs	r0, #2
 81004ca:	4439      	add	r1, r7
 81004cc:	1acb      	subs	r3, r1, r3
 81004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 81004d2:	e778      	b.n	81003c6 <__udivmoddi4+0xbe>
 81004d4:	f1c6 0c20 	rsb	ip, r6, #32
 81004d8:	fa03 f406 	lsl.w	r4, r3, r6
 81004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 81004e0:	431c      	orrs	r4, r3
 81004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 81004e6:	fa01 f306 	lsl.w	r3, r1, r6
 81004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 81004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 81004f2:	431f      	orrs	r7, r3
 81004f4:	0c3b      	lsrs	r3, r7, #16
 81004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81004fa:	fa1f f884 	uxth.w	r8, r4
 81004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8100502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8100506:	fb09 fa08 	mul.w	sl, r9, r8
 810050a:	458a      	cmp	sl, r1
 810050c:	fa02 f206 	lsl.w	r2, r2, r6
 8100510:	fa00 f306 	lsl.w	r3, r0, r6
 8100514:	d908      	bls.n	8100528 <__udivmoddi4+0x220>
 8100516:	1861      	adds	r1, r4, r1
 8100518:	f109 30ff 	add.w	r0, r9, #4294967295
 810051c:	d248      	bcs.n	81005b0 <__udivmoddi4+0x2a8>
 810051e:	458a      	cmp	sl, r1
 8100520:	d946      	bls.n	81005b0 <__udivmoddi4+0x2a8>
 8100522:	f1a9 0902 	sub.w	r9, r9, #2
 8100526:	4421      	add	r1, r4
 8100528:	eba1 010a 	sub.w	r1, r1, sl
 810052c:	b2bf      	uxth	r7, r7
 810052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8100532:	fb0e 1110 	mls	r1, lr, r0, r1
 8100536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810053a:	fb00 f808 	mul.w	r8, r0, r8
 810053e:	45b8      	cmp	r8, r7
 8100540:	d907      	bls.n	8100552 <__udivmoddi4+0x24a>
 8100542:	19e7      	adds	r7, r4, r7
 8100544:	f100 31ff 	add.w	r1, r0, #4294967295
 8100548:	d22e      	bcs.n	81005a8 <__udivmoddi4+0x2a0>
 810054a:	45b8      	cmp	r8, r7
 810054c:	d92c      	bls.n	81005a8 <__udivmoddi4+0x2a0>
 810054e:	3802      	subs	r0, #2
 8100550:	4427      	add	r7, r4
 8100552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100556:	eba7 0708 	sub.w	r7, r7, r8
 810055a:	fba0 8902 	umull	r8, r9, r0, r2
 810055e:	454f      	cmp	r7, r9
 8100560:	46c6      	mov	lr, r8
 8100562:	4649      	mov	r1, r9
 8100564:	d31a      	bcc.n	810059c <__udivmoddi4+0x294>
 8100566:	d017      	beq.n	8100598 <__udivmoddi4+0x290>
 8100568:	b15d      	cbz	r5, 8100582 <__udivmoddi4+0x27a>
 810056a:	ebb3 020e 	subs.w	r2, r3, lr
 810056e:	eb67 0701 	sbc.w	r7, r7, r1
 8100572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8100576:	40f2      	lsrs	r2, r6
 8100578:	ea4c 0202 	orr.w	r2, ip, r2
 810057c:	40f7      	lsrs	r7, r6
 810057e:	e9c5 2700 	strd	r2, r7, [r5]
 8100582:	2600      	movs	r6, #0
 8100584:	4631      	mov	r1, r6
 8100586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810058a:	462e      	mov	r6, r5
 810058c:	4628      	mov	r0, r5
 810058e:	e70b      	b.n	81003a8 <__udivmoddi4+0xa0>
 8100590:	4606      	mov	r6, r0
 8100592:	e6e9      	b.n	8100368 <__udivmoddi4+0x60>
 8100594:	4618      	mov	r0, r3
 8100596:	e6fd      	b.n	8100394 <__udivmoddi4+0x8c>
 8100598:	4543      	cmp	r3, r8
 810059a:	d2e5      	bcs.n	8100568 <__udivmoddi4+0x260>
 810059c:	ebb8 0e02 	subs.w	lr, r8, r2
 81005a0:	eb69 0104 	sbc.w	r1, r9, r4
 81005a4:	3801      	subs	r0, #1
 81005a6:	e7df      	b.n	8100568 <__udivmoddi4+0x260>
 81005a8:	4608      	mov	r0, r1
 81005aa:	e7d2      	b.n	8100552 <__udivmoddi4+0x24a>
 81005ac:	4660      	mov	r0, ip
 81005ae:	e78d      	b.n	81004cc <__udivmoddi4+0x1c4>
 81005b0:	4681      	mov	r9, r0
 81005b2:	e7b9      	b.n	8100528 <__udivmoddi4+0x220>
 81005b4:	4666      	mov	r6, ip
 81005b6:	e775      	b.n	81004a4 <__udivmoddi4+0x19c>
 81005b8:	4630      	mov	r0, r6
 81005ba:	e74a      	b.n	8100452 <__udivmoddi4+0x14a>
 81005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 81005c0:	4439      	add	r1, r7
 81005c2:	e713      	b.n	81003ec <__udivmoddi4+0xe4>
 81005c4:	3802      	subs	r0, #2
 81005c6:	443c      	add	r4, r7
 81005c8:	e724      	b.n	8100414 <__udivmoddi4+0x10c>
 81005ca:	bf00      	nop

081005cc <__aeabi_idiv0>:
 81005cc:	4770      	bx	lr
 81005ce:	bf00      	nop

081005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005d0:	b480      	push	{r7}
 81005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005d4:	4b0b      	ldr	r3, [pc, #44]	; (8100604 <SystemInit+0x34>)
 81005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005da:	4a0a      	ldr	r2, [pc, #40]	; (8100604 <SystemInit+0x34>)
 81005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005e4:	4b07      	ldr	r3, [pc, #28]	; (8100604 <SystemInit+0x34>)
 81005e6:	691b      	ldr	r3, [r3, #16]
 81005e8:	4a06      	ldr	r2, [pc, #24]	; (8100604 <SystemInit+0x34>)
 81005ea:	f043 0310 	orr.w	r3, r3, #16
 81005ee:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81005f0:	4b04      	ldr	r3, [pc, #16]	; (8100604 <SystemInit+0x34>)
 81005f2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81005f6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81005f8:	bf00      	nop
 81005fa:	46bd      	mov	sp, r7
 81005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop
 8100604:	e000ed00 	.word	0xe000ed00

08100608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100608:	b580      	push	{r7, lr}
 810060a:	b082      	sub	sp, #8
 810060c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810060e:	4b25      	ldr	r3, [pc, #148]	; (81006a4 <main+0x9c>)
 8100610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100614:	4a23      	ldr	r2, [pc, #140]	; (81006a4 <main+0x9c>)
 8100616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810061a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810061e:	4b21      	ldr	r3, [pc, #132]	; (81006a4 <main+0x9c>)
 8100620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100628:	607b      	str	r3, [r7, #4]
 810062a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810062c:	2001      	movs	r0, #1
 810062e:	f000 fd77 	bl	8101120 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100632:	f000 fe25 	bl	8101280 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100636:	2201      	movs	r2, #1
 8100638:	2102      	movs	r1, #2
 810063a:	2000      	movs	r0, #0
 810063c:	f000 fda6 	bl	810118c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100640:	4b19      	ldr	r3, [pc, #100]	; (81006a8 <main+0xa0>)
 8100642:	681b      	ldr	r3, [r3, #0]
 8100644:	091b      	lsrs	r3, r3, #4
 8100646:	f003 030f 	and.w	r3, r3, #15
 810064a:	2b07      	cmp	r3, #7
 810064c:	d108      	bne.n	8100660 <main+0x58>
 810064e:	4b17      	ldr	r3, [pc, #92]	; (81006ac <main+0xa4>)
 8100650:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100654:	4a15      	ldr	r2, [pc, #84]	; (81006ac <main+0xa4>)
 8100656:	f043 0301 	orr.w	r3, r3, #1
 810065a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810065e:	e007      	b.n	8100670 <main+0x68>
 8100660:	4b12      	ldr	r3, [pc, #72]	; (81006ac <main+0xa4>)
 8100662:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100666:	4a11      	ldr	r2, [pc, #68]	; (81006ac <main+0xa4>)
 8100668:	f043 0301 	orr.w	r3, r3, #1
 810066c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100670:	f000 f958 	bl	8100924 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_USART3_UART_Init();
 8100674:	f000 f820 	bl	81006b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100678:	f000 f86a 	bl	8100750 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_HSEM_Take(HSEM_ID_1,0);
 810067c:	2100      	movs	r1, #0
 810067e:	2001      	movs	r0, #1
 8100680:	f000 fd16 	bl	81010b0 <HAL_HSEM_Take>
		//HAL_GPIO_TogglePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin);
		HAL_UART_Transmit(&huart3,(uint8_t*)test_buff,10,100);
 8100684:	2364      	movs	r3, #100	; 0x64
 8100686:	220a      	movs	r2, #10
 8100688:	4909      	ldr	r1, [pc, #36]	; (81006b0 <main+0xa8>)
 810068a:	480a      	ldr	r0, [pc, #40]	; (81006b4 <main+0xac>)
 810068c:	f002 fb90 	bl	8102db0 <HAL_UART_Transmit>
		HAL_Delay(500);
 8100690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8100694:	f000 f9fa 	bl	8100a8c <HAL_Delay>
		/* Release The Hardware Semaphore */
		HAL_HSEM_Release(HSEM_ID_1,0);
 8100698:	2100      	movs	r1, #0
 810069a:	2001      	movs	r0, #1
 810069c:	f000 fd2c 	bl	81010f8 <HAL_HSEM_Release>
		HAL_HSEM_Take(HSEM_ID_1,0);
 81006a0:	e7ec      	b.n	810067c <main+0x74>
 81006a2:	bf00      	nop
 81006a4:	58024400 	.word	0x58024400
 81006a8:	e000ed00 	.word	0xe000ed00
 81006ac:	58026400 	.word	0x58026400
 81006b0:	10000008 	.word	0x10000008
 81006b4:	10000038 	.word	0x10000038

081006b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 81006b8:	b580      	push	{r7, lr}
 81006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 81006bc:	4b22      	ldr	r3, [pc, #136]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006be:	4a23      	ldr	r2, [pc, #140]	; (810074c <MX_USART3_UART_Init+0x94>)
 81006c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 81006c2:	4b21      	ldr	r3, [pc, #132]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 81006c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 81006ca:	4b1f      	ldr	r3, [pc, #124]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006cc:	2200      	movs	r2, #0
 81006ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 81006d0:	4b1d      	ldr	r3, [pc, #116]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006d2:	2200      	movs	r2, #0
 81006d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 81006d6:	4b1c      	ldr	r3, [pc, #112]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006d8:	2200      	movs	r2, #0
 81006da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81006dc:	4b1a      	ldr	r3, [pc, #104]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006de:	220c      	movs	r2, #12
 81006e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81006e2:	4b19      	ldr	r3, [pc, #100]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006e4:	2200      	movs	r2, #0
 81006e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81006e8:	4b17      	ldr	r3, [pc, #92]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006ea:	2200      	movs	r2, #0
 81006ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81006ee:	4b16      	ldr	r3, [pc, #88]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006f0:	2200      	movs	r2, #0
 81006f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81006f4:	4b14      	ldr	r3, [pc, #80]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006f6:	2200      	movs	r2, #0
 81006f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81006fa:	4b13      	ldr	r3, [pc, #76]	; (8100748 <MX_USART3_UART_Init+0x90>)
 81006fc:	2200      	movs	r2, #0
 81006fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100700:	4811      	ldr	r0, [pc, #68]	; (8100748 <MX_USART3_UART_Init+0x90>)
 8100702:	f002 fb05 	bl	8102d10 <HAL_UART_Init>
 8100706:	4603      	mov	r3, r0
 8100708:	2b00      	cmp	r3, #0
 810070a:	d001      	beq.n	8100710 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810070c:	f000 f854 	bl	81007b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100710:	2100      	movs	r1, #0
 8100712:	480d      	ldr	r0, [pc, #52]	; (8100748 <MX_USART3_UART_Init+0x90>)
 8100714:	f003 fb30 	bl	8103d78 <HAL_UARTEx_SetTxFifoThreshold>
 8100718:	4603      	mov	r3, r0
 810071a:	2b00      	cmp	r3, #0
 810071c:	d001      	beq.n	8100722 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810071e:	f000 f84b 	bl	81007b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100722:	2100      	movs	r1, #0
 8100724:	4808      	ldr	r0, [pc, #32]	; (8100748 <MX_USART3_UART_Init+0x90>)
 8100726:	f003 fb65 	bl	8103df4 <HAL_UARTEx_SetRxFifoThreshold>
 810072a:	4603      	mov	r3, r0
 810072c:	2b00      	cmp	r3, #0
 810072e:	d001      	beq.n	8100734 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100730:	f000 f842 	bl	81007b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100734:	4804      	ldr	r0, [pc, #16]	; (8100748 <MX_USART3_UART_Init+0x90>)
 8100736:	f003 fae6 	bl	8103d06 <HAL_UARTEx_DisableFifoMode>
 810073a:	4603      	mov	r3, r0
 810073c:	2b00      	cmp	r3, #0
 810073e:	d001      	beq.n	8100744 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100740:	f000 f83a 	bl	81007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100744:	bf00      	nop
 8100746:	bd80      	pop	{r7, pc}
 8100748:	10000038 	.word	0x10000038
 810074c:	40004800 	.word	0x40004800

08100750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100750:	b580      	push	{r7, lr}
 8100752:	b086      	sub	sp, #24
 8100754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100756:	1d3b      	adds	r3, r7, #4
 8100758:	2200      	movs	r2, #0
 810075a:	601a      	str	r2, [r3, #0]
 810075c:	605a      	str	r2, [r3, #4]
 810075e:	609a      	str	r2, [r3, #8]
 8100760:	60da      	str	r2, [r3, #12]
 8100762:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100764:	4b12      	ldr	r3, [pc, #72]	; (81007b0 <MX_GPIO_Init+0x60>)
 8100766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810076a:	4a11      	ldr	r2, [pc, #68]	; (81007b0 <MX_GPIO_Init+0x60>)
 810076c:	f043 0302 	orr.w	r3, r3, #2
 8100770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100774:	4b0e      	ldr	r3, [pc, #56]	; (81007b0 <MX_GPIO_Init+0x60>)
 8100776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810077a:	f003 0302 	and.w	r3, r3, #2
 810077e:	603b      	str	r3, [r7, #0]
 8100780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8100782:	2200      	movs	r2, #0
 8100784:	2101      	movs	r1, #1
 8100786:	480b      	ldr	r0, [pc, #44]	; (81007b4 <MX_GPIO_Init+0x64>)
 8100788:	f000 fc78 	bl	810107c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 810078c:	2301      	movs	r3, #1
 810078e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100790:	2301      	movs	r3, #1
 8100792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100794:	2300      	movs	r3, #0
 8100796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100798:	2300      	movs	r3, #0
 810079a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 810079c:	1d3b      	adds	r3, r7, #4
 810079e:	4619      	mov	r1, r3
 81007a0:	4804      	ldr	r0, [pc, #16]	; (81007b4 <MX_GPIO_Init+0x64>)
 81007a2:	f000 fabb 	bl	8100d1c <HAL_GPIO_Init>

}
 81007a6:	bf00      	nop
 81007a8:	3718      	adds	r7, #24
 81007aa:	46bd      	mov	sp, r7
 81007ac:	bd80      	pop	{r7, pc}
 81007ae:	bf00      	nop
 81007b0:	58024400 	.word	0x58024400
 81007b4:	58020400 	.word	0x58020400

081007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81007b8:	b480      	push	{r7}
 81007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81007bc:	b672      	cpsid	i
}
 81007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81007c0:	e7fe      	b.n	81007c0 <Error_Handler+0x8>
	...

081007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81007c4:	b580      	push	{r7, lr}
 81007c6:	b082      	sub	sp, #8
 81007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81007ca:	4b0d      	ldr	r3, [pc, #52]	; (8100800 <HAL_MspInit+0x3c>)
 81007cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81007d0:	4a0b      	ldr	r2, [pc, #44]	; (8100800 <HAL_MspInit+0x3c>)
 81007d2:	f043 0302 	orr.w	r3, r3, #2
 81007d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81007da:	4b09      	ldr	r3, [pc, #36]	; (8100800 <HAL_MspInit+0x3c>)
 81007dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81007e0:	f003 0302 	and.w	r3, r3, #2
 81007e4:	607b      	str	r3, [r7, #4]
 81007e6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 81007e8:	2200      	movs	r2, #0
 81007ea:	2100      	movs	r1, #0
 81007ec:	207e      	movs	r0, #126	; 0x7e
 81007ee:	f000 fa4c 	bl	8100c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 81007f2:	207e      	movs	r0, #126	; 0x7e
 81007f4:	f000 fa63 	bl	8100cbe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81007f8:	bf00      	nop
 81007fa:	3708      	adds	r7, #8
 81007fc:	46bd      	mov	sp, r7
 81007fe:	bd80      	pop	{r7, pc}
 8100800:	58024400 	.word	0x58024400

08100804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100804:	b580      	push	{r7, lr}
 8100806:	b0b2      	sub	sp, #200	; 0xc8
 8100808:	af00      	add	r7, sp, #0
 810080a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810080c:	f107 030c 	add.w	r3, r7, #12
 8100810:	22bc      	movs	r2, #188	; 0xbc
 8100812:	2100      	movs	r1, #0
 8100814:	4618      	mov	r0, r3
 8100816:	f003 fb9d 	bl	8103f54 <memset>
  if(huart->Instance==USART3)
 810081a:	687b      	ldr	r3, [r7, #4]
 810081c:	681b      	ldr	r3, [r3, #0]
 810081e:	4a12      	ldr	r2, [pc, #72]	; (8100868 <HAL_UART_MspInit+0x64>)
 8100820:	4293      	cmp	r3, r2
 8100822:	d11d      	bne.n	8100860 <HAL_UART_MspInit+0x5c>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100824:	2302      	movs	r3, #2
 8100826:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100828:	2300      	movs	r3, #0
 810082a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810082e:	f107 030c 	add.w	r3, r7, #12
 8100832:	4618      	mov	r0, r3
 8100834:	f000 ff0a 	bl	810164c <HAL_RCCEx_PeriphCLKConfig>
 8100838:	4603      	mov	r3, r0
 810083a:	2b00      	cmp	r3, #0
 810083c:	d001      	beq.n	8100842 <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
 810083e:	f7ff ffbb 	bl	81007b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100842:	4b0a      	ldr	r3, [pc, #40]	; (810086c <HAL_UART_MspInit+0x68>)
 8100844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100848:	4a08      	ldr	r2, [pc, #32]	; (810086c <HAL_UART_MspInit+0x68>)
 810084a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810084e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100852:	4b06      	ldr	r3, [pc, #24]	; (810086c <HAL_UART_MspInit+0x68>)
 8100854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810085c:	60bb      	str	r3, [r7, #8]
 810085e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8100860:	bf00      	nop
 8100862:	37c8      	adds	r7, #200	; 0xc8
 8100864:	46bd      	mov	sp, r7
 8100866:	bd80      	pop	{r7, pc}
 8100868:	40004800 	.word	0x40004800
 810086c:	58024400 	.word	0x58024400

08100870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100870:	b480      	push	{r7}
 8100872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100874:	e7fe      	b.n	8100874 <NMI_Handler+0x4>

08100876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100876:	b480      	push	{r7}
 8100878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810087a:	e7fe      	b.n	810087a <HardFault_Handler+0x4>

0810087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810087c:	b480      	push	{r7}
 810087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100880:	e7fe      	b.n	8100880 <MemManage_Handler+0x4>

08100882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100882:	b480      	push	{r7}
 8100884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100886:	e7fe      	b.n	8100886 <BusFault_Handler+0x4>

08100888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100888:	b480      	push	{r7}
 810088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810088c:	e7fe      	b.n	810088c <UsageFault_Handler+0x4>

0810088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810088e:	b480      	push	{r7}
 8100890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100892:	bf00      	nop
 8100894:	46bd      	mov	sp, r7
 8100896:	f85d 7b04 	ldr.w	r7, [sp], #4
 810089a:	4770      	bx	lr

0810089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810089c:	b480      	push	{r7}
 810089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81008a0:	bf00      	nop
 81008a2:	46bd      	mov	sp, r7
 81008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008a8:	4770      	bx	lr

081008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81008aa:	b480      	push	{r7}
 81008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81008ae:	bf00      	nop
 81008b0:	46bd      	mov	sp, r7
 81008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008b6:	4770      	bx	lr

081008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81008b8:	b580      	push	{r7, lr}
 81008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81008bc:	f000 f8c6 	bl	8100a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81008c0:	bf00      	nop
 81008c2:	bd80      	pop	{r7, pc}

081008c4 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81008c4:	b580      	push	{r7, lr}
 81008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81008c8:	f000 fc3c 	bl	8101144 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81008cc:	bf00      	nop
 81008ce:	bd80      	pop	{r7, pc}

081008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100908 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81008d4:	f7ff fe7c 	bl	81005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81008d8:	480c      	ldr	r0, [pc, #48]	; (810090c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81008da:	490d      	ldr	r1, [pc, #52]	; (8100910 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81008dc:	4a0d      	ldr	r2, [pc, #52]	; (8100914 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81008e0:	e002      	b.n	81008e8 <LoopCopyDataInit>

081008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81008e6:	3304      	adds	r3, #4

081008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81008ec:	d3f9      	bcc.n	81008e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81008ee:	4a0a      	ldr	r2, [pc, #40]	; (8100918 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81008f0:	4c0a      	ldr	r4, [pc, #40]	; (810091c <LoopFillZerobss+0x22>)
  movs r3, #0
 81008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81008f4:	e001      	b.n	81008fa <LoopFillZerobss>

081008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81008f8:	3204      	adds	r2, #4

081008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81008fc:	d3fb      	bcc.n	81008f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81008fe:	f003 fb05 	bl	8103f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100902:	f7ff fe81 	bl	8100608 <main>
  bx  lr
 8100906:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100908:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810090c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100910:	1000001c 	.word	0x1000001c
  ldr r2, =_sidata
 8100914:	08103fc4 	.word	0x08103fc4
  ldr r2, =_sbss
 8100918:	1000001c 	.word	0x1000001c
  ldr r4, =_ebss
 810091c:	100000cc 	.word	0x100000cc

08100920 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100920:	e7fe      	b.n	8100920 <ADC3_IRQHandler>
	...

08100924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100924:	b580      	push	{r7, lr}
 8100926:	b082      	sub	sp, #8
 8100928:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810092a:	4b28      	ldr	r3, [pc, #160]	; (81009cc <HAL_Init+0xa8>)
 810092c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100930:	4a26      	ldr	r2, [pc, #152]	; (81009cc <HAL_Init+0xa8>)
 8100932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100936:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810093a:	4b24      	ldr	r3, [pc, #144]	; (81009cc <HAL_Init+0xa8>)
 810093c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100944:	603b      	str	r3, [r7, #0]
 8100946:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100948:	4b21      	ldr	r3, [pc, #132]	; (81009d0 <HAL_Init+0xac>)
 810094a:	681b      	ldr	r3, [r3, #0]
 810094c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100950:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100954:	4a1e      	ldr	r2, [pc, #120]	; (81009d0 <HAL_Init+0xac>)
 8100956:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810095a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810095c:	4b1c      	ldr	r3, [pc, #112]	; (81009d0 <HAL_Init+0xac>)
 810095e:	681b      	ldr	r3, [r3, #0]
 8100960:	4a1b      	ldr	r2, [pc, #108]	; (81009d0 <HAL_Init+0xac>)
 8100962:	f043 0301 	orr.w	r3, r3, #1
 8100966:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100968:	2003      	movs	r0, #3
 810096a:	f000 f983 	bl	8100c74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810096e:	f000 fc95 	bl	810129c <HAL_RCC_GetSysClockFreq>
 8100972:	4602      	mov	r2, r0
 8100974:	4b15      	ldr	r3, [pc, #84]	; (81009cc <HAL_Init+0xa8>)
 8100976:	699b      	ldr	r3, [r3, #24]
 8100978:	0a1b      	lsrs	r3, r3, #8
 810097a:	f003 030f 	and.w	r3, r3, #15
 810097e:	4915      	ldr	r1, [pc, #84]	; (81009d4 <HAL_Init+0xb0>)
 8100980:	5ccb      	ldrb	r3, [r1, r3]
 8100982:	f003 031f 	and.w	r3, r3, #31
 8100986:	fa22 f303 	lsr.w	r3, r2, r3
 810098a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810098c:	4b0f      	ldr	r3, [pc, #60]	; (81009cc <HAL_Init+0xa8>)
 810098e:	699b      	ldr	r3, [r3, #24]
 8100990:	f003 030f 	and.w	r3, r3, #15
 8100994:	4a0f      	ldr	r2, [pc, #60]	; (81009d4 <HAL_Init+0xb0>)
 8100996:	5cd3      	ldrb	r3, [r2, r3]
 8100998:	f003 031f 	and.w	r3, r3, #31
 810099c:	687a      	ldr	r2, [r7, #4]
 810099e:	fa22 f303 	lsr.w	r3, r2, r3
 81009a2:	4a0d      	ldr	r2, [pc, #52]	; (81009d8 <HAL_Init+0xb4>)
 81009a4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81009a6:	4b0c      	ldr	r3, [pc, #48]	; (81009d8 <HAL_Init+0xb4>)
 81009a8:	681b      	ldr	r3, [r3, #0]
 81009aa:	4a0c      	ldr	r2, [pc, #48]	; (81009dc <HAL_Init+0xb8>)
 81009ac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81009ae:	200f      	movs	r0, #15
 81009b0:	f000 f816 	bl	81009e0 <HAL_InitTick>
 81009b4:	4603      	mov	r3, r0
 81009b6:	2b00      	cmp	r3, #0
 81009b8:	d001      	beq.n	81009be <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81009ba:	2301      	movs	r3, #1
 81009bc:	e002      	b.n	81009c4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81009be:	f7ff ff01 	bl	81007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81009c2:	2300      	movs	r3, #0
}
 81009c4:	4618      	mov	r0, r3
 81009c6:	3708      	adds	r7, #8
 81009c8:	46bd      	mov	sp, r7
 81009ca:	bd80      	pop	{r7, pc}
 81009cc:	58024400 	.word	0x58024400
 81009d0:	40024400 	.word	0x40024400
 81009d4:	08103f7c 	.word	0x08103f7c
 81009d8:	10000004 	.word	0x10000004
 81009dc:	10000000 	.word	0x10000000

081009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81009e0:	b580      	push	{r7, lr}
 81009e2:	b082      	sub	sp, #8
 81009e4:	af00      	add	r7, sp, #0
 81009e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81009e8:	4b15      	ldr	r3, [pc, #84]	; (8100a40 <HAL_InitTick+0x60>)
 81009ea:	781b      	ldrb	r3, [r3, #0]
 81009ec:	2b00      	cmp	r3, #0
 81009ee:	d101      	bne.n	81009f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81009f0:	2301      	movs	r3, #1
 81009f2:	e021      	b.n	8100a38 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81009f4:	4b13      	ldr	r3, [pc, #76]	; (8100a44 <HAL_InitTick+0x64>)
 81009f6:	681a      	ldr	r2, [r3, #0]
 81009f8:	4b11      	ldr	r3, [pc, #68]	; (8100a40 <HAL_InitTick+0x60>)
 81009fa:	781b      	ldrb	r3, [r3, #0]
 81009fc:	4619      	mov	r1, r3
 81009fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a0a:	4618      	mov	r0, r3
 8100a0c:	f000 f965 	bl	8100cda <HAL_SYSTICK_Config>
 8100a10:	4603      	mov	r3, r0
 8100a12:	2b00      	cmp	r3, #0
 8100a14:	d001      	beq.n	8100a1a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100a16:	2301      	movs	r3, #1
 8100a18:	e00e      	b.n	8100a38 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100a1a:	687b      	ldr	r3, [r7, #4]
 8100a1c:	2b0f      	cmp	r3, #15
 8100a1e:	d80a      	bhi.n	8100a36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100a20:	2200      	movs	r2, #0
 8100a22:	6879      	ldr	r1, [r7, #4]
 8100a24:	f04f 30ff 	mov.w	r0, #4294967295
 8100a28:	f000 f92f 	bl	8100c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100a2c:	4a06      	ldr	r2, [pc, #24]	; (8100a48 <HAL_InitTick+0x68>)
 8100a2e:	687b      	ldr	r3, [r7, #4]
 8100a30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100a32:	2300      	movs	r3, #0
 8100a34:	e000      	b.n	8100a38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100a36:	2301      	movs	r3, #1
}
 8100a38:	4618      	mov	r0, r3
 8100a3a:	3708      	adds	r7, #8
 8100a3c:	46bd      	mov	sp, r7
 8100a3e:	bd80      	pop	{r7, pc}
 8100a40:	10000018 	.word	0x10000018
 8100a44:	10000000 	.word	0x10000000
 8100a48:	10000014 	.word	0x10000014

08100a4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100a4c:	b480      	push	{r7}
 8100a4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100a50:	4b06      	ldr	r3, [pc, #24]	; (8100a6c <HAL_IncTick+0x20>)
 8100a52:	781b      	ldrb	r3, [r3, #0]
 8100a54:	461a      	mov	r2, r3
 8100a56:	4b06      	ldr	r3, [pc, #24]	; (8100a70 <HAL_IncTick+0x24>)
 8100a58:	681b      	ldr	r3, [r3, #0]
 8100a5a:	4413      	add	r3, r2
 8100a5c:	4a04      	ldr	r2, [pc, #16]	; (8100a70 <HAL_IncTick+0x24>)
 8100a5e:	6013      	str	r3, [r2, #0]
}
 8100a60:	bf00      	nop
 8100a62:	46bd      	mov	sp, r7
 8100a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a68:	4770      	bx	lr
 8100a6a:	bf00      	nop
 8100a6c:	10000018 	.word	0x10000018
 8100a70:	100000c8 	.word	0x100000c8

08100a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100a74:	b480      	push	{r7}
 8100a76:	af00      	add	r7, sp, #0
  return uwTick;
 8100a78:	4b03      	ldr	r3, [pc, #12]	; (8100a88 <HAL_GetTick+0x14>)
 8100a7a:	681b      	ldr	r3, [r3, #0]
}
 8100a7c:	4618      	mov	r0, r3
 8100a7e:	46bd      	mov	sp, r7
 8100a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a84:	4770      	bx	lr
 8100a86:	bf00      	nop
 8100a88:	100000c8 	.word	0x100000c8

08100a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100a8c:	b580      	push	{r7, lr}
 8100a8e:	b084      	sub	sp, #16
 8100a90:	af00      	add	r7, sp, #0
 8100a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100a94:	f7ff ffee 	bl	8100a74 <HAL_GetTick>
 8100a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100a9a:	687b      	ldr	r3, [r7, #4]
 8100a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100a9e:	68fb      	ldr	r3, [r7, #12]
 8100aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100aa4:	d005      	beq.n	8100ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100aa6:	4b0a      	ldr	r3, [pc, #40]	; (8100ad0 <HAL_Delay+0x44>)
 8100aa8:	781b      	ldrb	r3, [r3, #0]
 8100aaa:	461a      	mov	r2, r3
 8100aac:	68fb      	ldr	r3, [r7, #12]
 8100aae:	4413      	add	r3, r2
 8100ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100ab2:	bf00      	nop
 8100ab4:	f7ff ffde 	bl	8100a74 <HAL_GetTick>
 8100ab8:	4602      	mov	r2, r0
 8100aba:	68bb      	ldr	r3, [r7, #8]
 8100abc:	1ad3      	subs	r3, r2, r3
 8100abe:	68fa      	ldr	r2, [r7, #12]
 8100ac0:	429a      	cmp	r2, r3
 8100ac2:	d8f7      	bhi.n	8100ab4 <HAL_Delay+0x28>
  {
  }
}
 8100ac4:	bf00      	nop
 8100ac6:	bf00      	nop
 8100ac8:	3710      	adds	r7, #16
 8100aca:	46bd      	mov	sp, r7
 8100acc:	bd80      	pop	{r7, pc}
 8100ace:	bf00      	nop
 8100ad0:	10000018 	.word	0x10000018

08100ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100ad4:	b480      	push	{r7}
 8100ad6:	b085      	sub	sp, #20
 8100ad8:	af00      	add	r7, sp, #0
 8100ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100adc:	687b      	ldr	r3, [r7, #4]
 8100ade:	f003 0307 	and.w	r3, r3, #7
 8100ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100ae4:	4b0c      	ldr	r3, [pc, #48]	; (8100b18 <__NVIC_SetPriorityGrouping+0x44>)
 8100ae6:	68db      	ldr	r3, [r3, #12]
 8100ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100aea:	68ba      	ldr	r2, [r7, #8]
 8100aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100af0:	4013      	ands	r3, r2
 8100af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100af4:	68fb      	ldr	r3, [r7, #12]
 8100af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100af8:	68bb      	ldr	r3, [r7, #8]
 8100afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100b06:	4a04      	ldr	r2, [pc, #16]	; (8100b18 <__NVIC_SetPriorityGrouping+0x44>)
 8100b08:	68bb      	ldr	r3, [r7, #8]
 8100b0a:	60d3      	str	r3, [r2, #12]
}
 8100b0c:	bf00      	nop
 8100b0e:	3714      	adds	r7, #20
 8100b10:	46bd      	mov	sp, r7
 8100b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b16:	4770      	bx	lr
 8100b18:	e000ed00 	.word	0xe000ed00

08100b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100b1c:	b480      	push	{r7}
 8100b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100b20:	4b04      	ldr	r3, [pc, #16]	; (8100b34 <__NVIC_GetPriorityGrouping+0x18>)
 8100b22:	68db      	ldr	r3, [r3, #12]
 8100b24:	0a1b      	lsrs	r3, r3, #8
 8100b26:	f003 0307 	and.w	r3, r3, #7
}
 8100b2a:	4618      	mov	r0, r3
 8100b2c:	46bd      	mov	sp, r7
 8100b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b32:	4770      	bx	lr
 8100b34:	e000ed00 	.word	0xe000ed00

08100b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100b38:	b480      	push	{r7}
 8100b3a:	b083      	sub	sp, #12
 8100b3c:	af00      	add	r7, sp, #0
 8100b3e:	4603      	mov	r3, r0
 8100b40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b46:	2b00      	cmp	r3, #0
 8100b48:	db0b      	blt.n	8100b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100b4a:	88fb      	ldrh	r3, [r7, #6]
 8100b4c:	f003 021f 	and.w	r2, r3, #31
 8100b50:	4907      	ldr	r1, [pc, #28]	; (8100b70 <__NVIC_EnableIRQ+0x38>)
 8100b52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b56:	095b      	lsrs	r3, r3, #5
 8100b58:	2001      	movs	r0, #1
 8100b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8100b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100b62:	bf00      	nop
 8100b64:	370c      	adds	r7, #12
 8100b66:	46bd      	mov	sp, r7
 8100b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b6c:	4770      	bx	lr
 8100b6e:	bf00      	nop
 8100b70:	e000e100 	.word	0xe000e100

08100b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100b74:	b480      	push	{r7}
 8100b76:	b083      	sub	sp, #12
 8100b78:	af00      	add	r7, sp, #0
 8100b7a:	4603      	mov	r3, r0
 8100b7c:	6039      	str	r1, [r7, #0]
 8100b7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b84:	2b00      	cmp	r3, #0
 8100b86:	db0a      	blt.n	8100b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100b88:	683b      	ldr	r3, [r7, #0]
 8100b8a:	b2da      	uxtb	r2, r3
 8100b8c:	490c      	ldr	r1, [pc, #48]	; (8100bc0 <__NVIC_SetPriority+0x4c>)
 8100b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b92:	0112      	lsls	r2, r2, #4
 8100b94:	b2d2      	uxtb	r2, r2
 8100b96:	440b      	add	r3, r1
 8100b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100b9c:	e00a      	b.n	8100bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100b9e:	683b      	ldr	r3, [r7, #0]
 8100ba0:	b2da      	uxtb	r2, r3
 8100ba2:	4908      	ldr	r1, [pc, #32]	; (8100bc4 <__NVIC_SetPriority+0x50>)
 8100ba4:	88fb      	ldrh	r3, [r7, #6]
 8100ba6:	f003 030f 	and.w	r3, r3, #15
 8100baa:	3b04      	subs	r3, #4
 8100bac:	0112      	lsls	r2, r2, #4
 8100bae:	b2d2      	uxtb	r2, r2
 8100bb0:	440b      	add	r3, r1
 8100bb2:	761a      	strb	r2, [r3, #24]
}
 8100bb4:	bf00      	nop
 8100bb6:	370c      	adds	r7, #12
 8100bb8:	46bd      	mov	sp, r7
 8100bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bbe:	4770      	bx	lr
 8100bc0:	e000e100 	.word	0xe000e100
 8100bc4:	e000ed00 	.word	0xe000ed00

08100bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100bc8:	b480      	push	{r7}
 8100bca:	b089      	sub	sp, #36	; 0x24
 8100bcc:	af00      	add	r7, sp, #0
 8100bce:	60f8      	str	r0, [r7, #12]
 8100bd0:	60b9      	str	r1, [r7, #8]
 8100bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100bd4:	68fb      	ldr	r3, [r7, #12]
 8100bd6:	f003 0307 	and.w	r3, r3, #7
 8100bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100bdc:	69fb      	ldr	r3, [r7, #28]
 8100bde:	f1c3 0307 	rsb	r3, r3, #7
 8100be2:	2b04      	cmp	r3, #4
 8100be4:	bf28      	it	cs
 8100be6:	2304      	movcs	r3, #4
 8100be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100bea:	69fb      	ldr	r3, [r7, #28]
 8100bec:	3304      	adds	r3, #4
 8100bee:	2b06      	cmp	r3, #6
 8100bf0:	d902      	bls.n	8100bf8 <NVIC_EncodePriority+0x30>
 8100bf2:	69fb      	ldr	r3, [r7, #28]
 8100bf4:	3b03      	subs	r3, #3
 8100bf6:	e000      	b.n	8100bfa <NVIC_EncodePriority+0x32>
 8100bf8:	2300      	movs	r3, #0
 8100bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8100c00:	69bb      	ldr	r3, [r7, #24]
 8100c02:	fa02 f303 	lsl.w	r3, r2, r3
 8100c06:	43da      	mvns	r2, r3
 8100c08:	68bb      	ldr	r3, [r7, #8]
 8100c0a:	401a      	ands	r2, r3
 8100c0c:	697b      	ldr	r3, [r7, #20]
 8100c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c10:	f04f 31ff 	mov.w	r1, #4294967295
 8100c14:	697b      	ldr	r3, [r7, #20]
 8100c16:	fa01 f303 	lsl.w	r3, r1, r3
 8100c1a:	43d9      	mvns	r1, r3
 8100c1c:	687b      	ldr	r3, [r7, #4]
 8100c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c20:	4313      	orrs	r3, r2
         );
}
 8100c22:	4618      	mov	r0, r3
 8100c24:	3724      	adds	r7, #36	; 0x24
 8100c26:	46bd      	mov	sp, r7
 8100c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c2c:	4770      	bx	lr
	...

08100c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100c30:	b580      	push	{r7, lr}
 8100c32:	b082      	sub	sp, #8
 8100c34:	af00      	add	r7, sp, #0
 8100c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c38:	687b      	ldr	r3, [r7, #4]
 8100c3a:	3b01      	subs	r3, #1
 8100c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100c40:	d301      	bcc.n	8100c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100c42:	2301      	movs	r3, #1
 8100c44:	e00f      	b.n	8100c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c46:	4a0a      	ldr	r2, [pc, #40]	; (8100c70 <SysTick_Config+0x40>)
 8100c48:	687b      	ldr	r3, [r7, #4]
 8100c4a:	3b01      	subs	r3, #1
 8100c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100c4e:	210f      	movs	r1, #15
 8100c50:	f04f 30ff 	mov.w	r0, #4294967295
 8100c54:	f7ff ff8e 	bl	8100b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100c58:	4b05      	ldr	r3, [pc, #20]	; (8100c70 <SysTick_Config+0x40>)
 8100c5a:	2200      	movs	r2, #0
 8100c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100c5e:	4b04      	ldr	r3, [pc, #16]	; (8100c70 <SysTick_Config+0x40>)
 8100c60:	2207      	movs	r2, #7
 8100c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100c64:	2300      	movs	r3, #0
}
 8100c66:	4618      	mov	r0, r3
 8100c68:	3708      	adds	r7, #8
 8100c6a:	46bd      	mov	sp, r7
 8100c6c:	bd80      	pop	{r7, pc}
 8100c6e:	bf00      	nop
 8100c70:	e000e010 	.word	0xe000e010

08100c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100c74:	b580      	push	{r7, lr}
 8100c76:	b082      	sub	sp, #8
 8100c78:	af00      	add	r7, sp, #0
 8100c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100c7c:	6878      	ldr	r0, [r7, #4]
 8100c7e:	f7ff ff29 	bl	8100ad4 <__NVIC_SetPriorityGrouping>
}
 8100c82:	bf00      	nop
 8100c84:	3708      	adds	r7, #8
 8100c86:	46bd      	mov	sp, r7
 8100c88:	bd80      	pop	{r7, pc}

08100c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c8a:	b580      	push	{r7, lr}
 8100c8c:	b086      	sub	sp, #24
 8100c8e:	af00      	add	r7, sp, #0
 8100c90:	4603      	mov	r3, r0
 8100c92:	60b9      	str	r1, [r7, #8]
 8100c94:	607a      	str	r2, [r7, #4]
 8100c96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100c98:	f7ff ff40 	bl	8100b1c <__NVIC_GetPriorityGrouping>
 8100c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100c9e:	687a      	ldr	r2, [r7, #4]
 8100ca0:	68b9      	ldr	r1, [r7, #8]
 8100ca2:	6978      	ldr	r0, [r7, #20]
 8100ca4:	f7ff ff90 	bl	8100bc8 <NVIC_EncodePriority>
 8100ca8:	4602      	mov	r2, r0
 8100caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100cae:	4611      	mov	r1, r2
 8100cb0:	4618      	mov	r0, r3
 8100cb2:	f7ff ff5f 	bl	8100b74 <__NVIC_SetPriority>
}
 8100cb6:	bf00      	nop
 8100cb8:	3718      	adds	r7, #24
 8100cba:	46bd      	mov	sp, r7
 8100cbc:	bd80      	pop	{r7, pc}

08100cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100cbe:	b580      	push	{r7, lr}
 8100cc0:	b082      	sub	sp, #8
 8100cc2:	af00      	add	r7, sp, #0
 8100cc4:	4603      	mov	r3, r0
 8100cc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100ccc:	4618      	mov	r0, r3
 8100cce:	f7ff ff33 	bl	8100b38 <__NVIC_EnableIRQ>
}
 8100cd2:	bf00      	nop
 8100cd4:	3708      	adds	r7, #8
 8100cd6:	46bd      	mov	sp, r7
 8100cd8:	bd80      	pop	{r7, pc}

08100cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100cda:	b580      	push	{r7, lr}
 8100cdc:	b082      	sub	sp, #8
 8100cde:	af00      	add	r7, sp, #0
 8100ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100ce2:	6878      	ldr	r0, [r7, #4]
 8100ce4:	f7ff ffa4 	bl	8100c30 <SysTick_Config>
 8100ce8:	4603      	mov	r3, r0
}
 8100cea:	4618      	mov	r0, r3
 8100cec:	3708      	adds	r7, #8
 8100cee:	46bd      	mov	sp, r7
 8100cf0:	bd80      	pop	{r7, pc}
	...

08100cf4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100cf4:	b480      	push	{r7}
 8100cf6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100cf8:	4b07      	ldr	r3, [pc, #28]	; (8100d18 <HAL_GetCurrentCPUID+0x24>)
 8100cfa:	681b      	ldr	r3, [r3, #0]
 8100cfc:	091b      	lsrs	r3, r3, #4
 8100cfe:	f003 030f 	and.w	r3, r3, #15
 8100d02:	2b07      	cmp	r3, #7
 8100d04:	d101      	bne.n	8100d0a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100d06:	2303      	movs	r3, #3
 8100d08:	e000      	b.n	8100d0c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100d0a:	2301      	movs	r3, #1
  }
}
 8100d0c:	4618      	mov	r0, r3
 8100d0e:	46bd      	mov	sp, r7
 8100d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d14:	4770      	bx	lr
 8100d16:	bf00      	nop
 8100d18:	e000ed00 	.word	0xe000ed00

08100d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100d1c:	b480      	push	{r7}
 8100d1e:	b089      	sub	sp, #36	; 0x24
 8100d20:	af00      	add	r7, sp, #0
 8100d22:	6078      	str	r0, [r7, #4]
 8100d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100d26:	2300      	movs	r3, #0
 8100d28:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100d2a:	4b89      	ldr	r3, [pc, #548]	; (8100f50 <HAL_GPIO_Init+0x234>)
 8100d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100d2e:	e194      	b.n	810105a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100d30:	683b      	ldr	r3, [r7, #0]
 8100d32:	681a      	ldr	r2, [r3, #0]
 8100d34:	2101      	movs	r1, #1
 8100d36:	69fb      	ldr	r3, [r7, #28]
 8100d38:	fa01 f303 	lsl.w	r3, r1, r3
 8100d3c:	4013      	ands	r3, r2
 8100d3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100d40:	693b      	ldr	r3, [r7, #16]
 8100d42:	2b00      	cmp	r3, #0
 8100d44:	f000 8186 	beq.w	8101054 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100d48:	683b      	ldr	r3, [r7, #0]
 8100d4a:	685b      	ldr	r3, [r3, #4]
 8100d4c:	f003 0303 	and.w	r3, r3, #3
 8100d50:	2b01      	cmp	r3, #1
 8100d52:	d005      	beq.n	8100d60 <HAL_GPIO_Init+0x44>
 8100d54:	683b      	ldr	r3, [r7, #0]
 8100d56:	685b      	ldr	r3, [r3, #4]
 8100d58:	f003 0303 	and.w	r3, r3, #3
 8100d5c:	2b02      	cmp	r3, #2
 8100d5e:	d130      	bne.n	8100dc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100d60:	687b      	ldr	r3, [r7, #4]
 8100d62:	689b      	ldr	r3, [r3, #8]
 8100d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100d66:	69fb      	ldr	r3, [r7, #28]
 8100d68:	005b      	lsls	r3, r3, #1
 8100d6a:	2203      	movs	r2, #3
 8100d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8100d70:	43db      	mvns	r3, r3
 8100d72:	69ba      	ldr	r2, [r7, #24]
 8100d74:	4013      	ands	r3, r2
 8100d76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100d78:	683b      	ldr	r3, [r7, #0]
 8100d7a:	68da      	ldr	r2, [r3, #12]
 8100d7c:	69fb      	ldr	r3, [r7, #28]
 8100d7e:	005b      	lsls	r3, r3, #1
 8100d80:	fa02 f303 	lsl.w	r3, r2, r3
 8100d84:	69ba      	ldr	r2, [r7, #24]
 8100d86:	4313      	orrs	r3, r2
 8100d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100d8a:	687b      	ldr	r3, [r7, #4]
 8100d8c:	69ba      	ldr	r2, [r7, #24]
 8100d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100d90:	687b      	ldr	r3, [r7, #4]
 8100d92:	685b      	ldr	r3, [r3, #4]
 8100d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100d96:	2201      	movs	r2, #1
 8100d98:	69fb      	ldr	r3, [r7, #28]
 8100d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8100d9e:	43db      	mvns	r3, r3
 8100da0:	69ba      	ldr	r2, [r7, #24]
 8100da2:	4013      	ands	r3, r2
 8100da4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100da6:	683b      	ldr	r3, [r7, #0]
 8100da8:	685b      	ldr	r3, [r3, #4]
 8100daa:	091b      	lsrs	r3, r3, #4
 8100dac:	f003 0201 	and.w	r2, r3, #1
 8100db0:	69fb      	ldr	r3, [r7, #28]
 8100db2:	fa02 f303 	lsl.w	r3, r2, r3
 8100db6:	69ba      	ldr	r2, [r7, #24]
 8100db8:	4313      	orrs	r3, r2
 8100dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100dbc:	687b      	ldr	r3, [r7, #4]
 8100dbe:	69ba      	ldr	r2, [r7, #24]
 8100dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100dc2:	683b      	ldr	r3, [r7, #0]
 8100dc4:	685b      	ldr	r3, [r3, #4]
 8100dc6:	f003 0303 	and.w	r3, r3, #3
 8100dca:	2b03      	cmp	r3, #3
 8100dcc:	d017      	beq.n	8100dfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100dce:	687b      	ldr	r3, [r7, #4]
 8100dd0:	68db      	ldr	r3, [r3, #12]
 8100dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100dd4:	69fb      	ldr	r3, [r7, #28]
 8100dd6:	005b      	lsls	r3, r3, #1
 8100dd8:	2203      	movs	r2, #3
 8100dda:	fa02 f303 	lsl.w	r3, r2, r3
 8100dde:	43db      	mvns	r3, r3
 8100de0:	69ba      	ldr	r2, [r7, #24]
 8100de2:	4013      	ands	r3, r2
 8100de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100de6:	683b      	ldr	r3, [r7, #0]
 8100de8:	689a      	ldr	r2, [r3, #8]
 8100dea:	69fb      	ldr	r3, [r7, #28]
 8100dec:	005b      	lsls	r3, r3, #1
 8100dee:	fa02 f303 	lsl.w	r3, r2, r3
 8100df2:	69ba      	ldr	r2, [r7, #24]
 8100df4:	4313      	orrs	r3, r2
 8100df6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100df8:	687b      	ldr	r3, [r7, #4]
 8100dfa:	69ba      	ldr	r2, [r7, #24]
 8100dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100dfe:	683b      	ldr	r3, [r7, #0]
 8100e00:	685b      	ldr	r3, [r3, #4]
 8100e02:	f003 0303 	and.w	r3, r3, #3
 8100e06:	2b02      	cmp	r3, #2
 8100e08:	d123      	bne.n	8100e52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100e0a:	69fb      	ldr	r3, [r7, #28]
 8100e0c:	08da      	lsrs	r2, r3, #3
 8100e0e:	687b      	ldr	r3, [r7, #4]
 8100e10:	3208      	adds	r2, #8
 8100e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100e18:	69fb      	ldr	r3, [r7, #28]
 8100e1a:	f003 0307 	and.w	r3, r3, #7
 8100e1e:	009b      	lsls	r3, r3, #2
 8100e20:	220f      	movs	r2, #15
 8100e22:	fa02 f303 	lsl.w	r3, r2, r3
 8100e26:	43db      	mvns	r3, r3
 8100e28:	69ba      	ldr	r2, [r7, #24]
 8100e2a:	4013      	ands	r3, r2
 8100e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100e2e:	683b      	ldr	r3, [r7, #0]
 8100e30:	691a      	ldr	r2, [r3, #16]
 8100e32:	69fb      	ldr	r3, [r7, #28]
 8100e34:	f003 0307 	and.w	r3, r3, #7
 8100e38:	009b      	lsls	r3, r3, #2
 8100e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e3e:	69ba      	ldr	r2, [r7, #24]
 8100e40:	4313      	orrs	r3, r2
 8100e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100e44:	69fb      	ldr	r3, [r7, #28]
 8100e46:	08da      	lsrs	r2, r3, #3
 8100e48:	687b      	ldr	r3, [r7, #4]
 8100e4a:	3208      	adds	r2, #8
 8100e4c:	69b9      	ldr	r1, [r7, #24]
 8100e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100e52:	687b      	ldr	r3, [r7, #4]
 8100e54:	681b      	ldr	r3, [r3, #0]
 8100e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100e58:	69fb      	ldr	r3, [r7, #28]
 8100e5a:	005b      	lsls	r3, r3, #1
 8100e5c:	2203      	movs	r2, #3
 8100e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e62:	43db      	mvns	r3, r3
 8100e64:	69ba      	ldr	r2, [r7, #24]
 8100e66:	4013      	ands	r3, r2
 8100e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100e6a:	683b      	ldr	r3, [r7, #0]
 8100e6c:	685b      	ldr	r3, [r3, #4]
 8100e6e:	f003 0203 	and.w	r2, r3, #3
 8100e72:	69fb      	ldr	r3, [r7, #28]
 8100e74:	005b      	lsls	r3, r3, #1
 8100e76:	fa02 f303 	lsl.w	r3, r2, r3
 8100e7a:	69ba      	ldr	r2, [r7, #24]
 8100e7c:	4313      	orrs	r3, r2
 8100e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100e80:	687b      	ldr	r3, [r7, #4]
 8100e82:	69ba      	ldr	r2, [r7, #24]
 8100e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100e86:	683b      	ldr	r3, [r7, #0]
 8100e88:	685b      	ldr	r3, [r3, #4]
 8100e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8100e8e:	2b00      	cmp	r3, #0
 8100e90:	f000 80e0 	beq.w	8101054 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100e94:	4b2f      	ldr	r3, [pc, #188]	; (8100f54 <HAL_GPIO_Init+0x238>)
 8100e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100e9a:	4a2e      	ldr	r2, [pc, #184]	; (8100f54 <HAL_GPIO_Init+0x238>)
 8100e9c:	f043 0302 	orr.w	r3, r3, #2
 8100ea0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100ea4:	4b2b      	ldr	r3, [pc, #172]	; (8100f54 <HAL_GPIO_Init+0x238>)
 8100ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100eaa:	f003 0302 	and.w	r3, r3, #2
 8100eae:	60fb      	str	r3, [r7, #12]
 8100eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100eb2:	4a29      	ldr	r2, [pc, #164]	; (8100f58 <HAL_GPIO_Init+0x23c>)
 8100eb4:	69fb      	ldr	r3, [r7, #28]
 8100eb6:	089b      	lsrs	r3, r3, #2
 8100eb8:	3302      	adds	r3, #2
 8100eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100ec0:	69fb      	ldr	r3, [r7, #28]
 8100ec2:	f003 0303 	and.w	r3, r3, #3
 8100ec6:	009b      	lsls	r3, r3, #2
 8100ec8:	220f      	movs	r2, #15
 8100eca:	fa02 f303 	lsl.w	r3, r2, r3
 8100ece:	43db      	mvns	r3, r3
 8100ed0:	69ba      	ldr	r2, [r7, #24]
 8100ed2:	4013      	ands	r3, r2
 8100ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100ed6:	687b      	ldr	r3, [r7, #4]
 8100ed8:	4a20      	ldr	r2, [pc, #128]	; (8100f5c <HAL_GPIO_Init+0x240>)
 8100eda:	4293      	cmp	r3, r2
 8100edc:	d052      	beq.n	8100f84 <HAL_GPIO_Init+0x268>
 8100ede:	687b      	ldr	r3, [r7, #4]
 8100ee0:	4a1f      	ldr	r2, [pc, #124]	; (8100f60 <HAL_GPIO_Init+0x244>)
 8100ee2:	4293      	cmp	r3, r2
 8100ee4:	d031      	beq.n	8100f4a <HAL_GPIO_Init+0x22e>
 8100ee6:	687b      	ldr	r3, [r7, #4]
 8100ee8:	4a1e      	ldr	r2, [pc, #120]	; (8100f64 <HAL_GPIO_Init+0x248>)
 8100eea:	4293      	cmp	r3, r2
 8100eec:	d02b      	beq.n	8100f46 <HAL_GPIO_Init+0x22a>
 8100eee:	687b      	ldr	r3, [r7, #4]
 8100ef0:	4a1d      	ldr	r2, [pc, #116]	; (8100f68 <HAL_GPIO_Init+0x24c>)
 8100ef2:	4293      	cmp	r3, r2
 8100ef4:	d025      	beq.n	8100f42 <HAL_GPIO_Init+0x226>
 8100ef6:	687b      	ldr	r3, [r7, #4]
 8100ef8:	4a1c      	ldr	r2, [pc, #112]	; (8100f6c <HAL_GPIO_Init+0x250>)
 8100efa:	4293      	cmp	r3, r2
 8100efc:	d01f      	beq.n	8100f3e <HAL_GPIO_Init+0x222>
 8100efe:	687b      	ldr	r3, [r7, #4]
 8100f00:	4a1b      	ldr	r2, [pc, #108]	; (8100f70 <HAL_GPIO_Init+0x254>)
 8100f02:	4293      	cmp	r3, r2
 8100f04:	d019      	beq.n	8100f3a <HAL_GPIO_Init+0x21e>
 8100f06:	687b      	ldr	r3, [r7, #4]
 8100f08:	4a1a      	ldr	r2, [pc, #104]	; (8100f74 <HAL_GPIO_Init+0x258>)
 8100f0a:	4293      	cmp	r3, r2
 8100f0c:	d013      	beq.n	8100f36 <HAL_GPIO_Init+0x21a>
 8100f0e:	687b      	ldr	r3, [r7, #4]
 8100f10:	4a19      	ldr	r2, [pc, #100]	; (8100f78 <HAL_GPIO_Init+0x25c>)
 8100f12:	4293      	cmp	r3, r2
 8100f14:	d00d      	beq.n	8100f32 <HAL_GPIO_Init+0x216>
 8100f16:	687b      	ldr	r3, [r7, #4]
 8100f18:	4a18      	ldr	r2, [pc, #96]	; (8100f7c <HAL_GPIO_Init+0x260>)
 8100f1a:	4293      	cmp	r3, r2
 8100f1c:	d007      	beq.n	8100f2e <HAL_GPIO_Init+0x212>
 8100f1e:	687b      	ldr	r3, [r7, #4]
 8100f20:	4a17      	ldr	r2, [pc, #92]	; (8100f80 <HAL_GPIO_Init+0x264>)
 8100f22:	4293      	cmp	r3, r2
 8100f24:	d101      	bne.n	8100f2a <HAL_GPIO_Init+0x20e>
 8100f26:	2309      	movs	r3, #9
 8100f28:	e02d      	b.n	8100f86 <HAL_GPIO_Init+0x26a>
 8100f2a:	230a      	movs	r3, #10
 8100f2c:	e02b      	b.n	8100f86 <HAL_GPIO_Init+0x26a>
 8100f2e:	2308      	movs	r3, #8
 8100f30:	e029      	b.n	8100f86 <HAL_GPIO_Init+0x26a>
 8100f32:	2307      	movs	r3, #7
 8100f34:	e027      	b.n	8100f86 <HAL_GPIO_Init+0x26a>
 8100f36:	2306      	movs	r3, #6
 8100f38:	e025      	b.n	8100f86 <HAL_GPIO_Init+0x26a>
 8100f3a:	2305      	movs	r3, #5
 8100f3c:	e023      	b.n	8100f86 <HAL_GPIO_Init+0x26a>
 8100f3e:	2304      	movs	r3, #4
 8100f40:	e021      	b.n	8100f86 <HAL_GPIO_Init+0x26a>
 8100f42:	2303      	movs	r3, #3
 8100f44:	e01f      	b.n	8100f86 <HAL_GPIO_Init+0x26a>
 8100f46:	2302      	movs	r3, #2
 8100f48:	e01d      	b.n	8100f86 <HAL_GPIO_Init+0x26a>
 8100f4a:	2301      	movs	r3, #1
 8100f4c:	e01b      	b.n	8100f86 <HAL_GPIO_Init+0x26a>
 8100f4e:	bf00      	nop
 8100f50:	580000c0 	.word	0x580000c0
 8100f54:	58024400 	.word	0x58024400
 8100f58:	58000400 	.word	0x58000400
 8100f5c:	58020000 	.word	0x58020000
 8100f60:	58020400 	.word	0x58020400
 8100f64:	58020800 	.word	0x58020800
 8100f68:	58020c00 	.word	0x58020c00
 8100f6c:	58021000 	.word	0x58021000
 8100f70:	58021400 	.word	0x58021400
 8100f74:	58021800 	.word	0x58021800
 8100f78:	58021c00 	.word	0x58021c00
 8100f7c:	58022000 	.word	0x58022000
 8100f80:	58022400 	.word	0x58022400
 8100f84:	2300      	movs	r3, #0
 8100f86:	69fa      	ldr	r2, [r7, #28]
 8100f88:	f002 0203 	and.w	r2, r2, #3
 8100f8c:	0092      	lsls	r2, r2, #2
 8100f8e:	4093      	lsls	r3, r2
 8100f90:	69ba      	ldr	r2, [r7, #24]
 8100f92:	4313      	orrs	r3, r2
 8100f94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100f96:	4938      	ldr	r1, [pc, #224]	; (8101078 <HAL_GPIO_Init+0x35c>)
 8100f98:	69fb      	ldr	r3, [r7, #28]
 8100f9a:	089b      	lsrs	r3, r3, #2
 8100f9c:	3302      	adds	r3, #2
 8100f9e:	69ba      	ldr	r2, [r7, #24]
 8100fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100fa8:	681b      	ldr	r3, [r3, #0]
 8100faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100fac:	693b      	ldr	r3, [r7, #16]
 8100fae:	43db      	mvns	r3, r3
 8100fb0:	69ba      	ldr	r2, [r7, #24]
 8100fb2:	4013      	ands	r3, r2
 8100fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100fb6:	683b      	ldr	r3, [r7, #0]
 8100fb8:	685b      	ldr	r3, [r3, #4]
 8100fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8100fbe:	2b00      	cmp	r3, #0
 8100fc0:	d003      	beq.n	8100fca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100fc2:	69ba      	ldr	r2, [r7, #24]
 8100fc4:	693b      	ldr	r3, [r7, #16]
 8100fc6:	4313      	orrs	r3, r2
 8100fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100fce:	69bb      	ldr	r3, [r7, #24]
 8100fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8100fd6:	685b      	ldr	r3, [r3, #4]
 8100fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100fda:	693b      	ldr	r3, [r7, #16]
 8100fdc:	43db      	mvns	r3, r3
 8100fde:	69ba      	ldr	r2, [r7, #24]
 8100fe0:	4013      	ands	r3, r2
 8100fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100fe4:	683b      	ldr	r3, [r7, #0]
 8100fe6:	685b      	ldr	r3, [r3, #4]
 8100fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100fec:	2b00      	cmp	r3, #0
 8100fee:	d003      	beq.n	8100ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100ff0:	69ba      	ldr	r2, [r7, #24]
 8100ff2:	693b      	ldr	r3, [r7, #16]
 8100ff4:	4313      	orrs	r3, r2
 8100ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100ff8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8100ffc:	69bb      	ldr	r3, [r7, #24]
 8100ffe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101000:	697b      	ldr	r3, [r7, #20]
 8101002:	685b      	ldr	r3, [r3, #4]
 8101004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101006:	693b      	ldr	r3, [r7, #16]
 8101008:	43db      	mvns	r3, r3
 810100a:	69ba      	ldr	r2, [r7, #24]
 810100c:	4013      	ands	r3, r2
 810100e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101010:	683b      	ldr	r3, [r7, #0]
 8101012:	685b      	ldr	r3, [r3, #4]
 8101014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101018:	2b00      	cmp	r3, #0
 810101a:	d003      	beq.n	8101024 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810101c:	69ba      	ldr	r2, [r7, #24]
 810101e:	693b      	ldr	r3, [r7, #16]
 8101020:	4313      	orrs	r3, r2
 8101022:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101024:	697b      	ldr	r3, [r7, #20]
 8101026:	69ba      	ldr	r2, [r7, #24]
 8101028:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810102a:	697b      	ldr	r3, [r7, #20]
 810102c:	681b      	ldr	r3, [r3, #0]
 810102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101030:	693b      	ldr	r3, [r7, #16]
 8101032:	43db      	mvns	r3, r3
 8101034:	69ba      	ldr	r2, [r7, #24]
 8101036:	4013      	ands	r3, r2
 8101038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810103a:	683b      	ldr	r3, [r7, #0]
 810103c:	685b      	ldr	r3, [r3, #4]
 810103e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101042:	2b00      	cmp	r3, #0
 8101044:	d003      	beq.n	810104e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101046:	69ba      	ldr	r2, [r7, #24]
 8101048:	693b      	ldr	r3, [r7, #16]
 810104a:	4313      	orrs	r3, r2
 810104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810104e:	697b      	ldr	r3, [r7, #20]
 8101050:	69ba      	ldr	r2, [r7, #24]
 8101052:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101054:	69fb      	ldr	r3, [r7, #28]
 8101056:	3301      	adds	r3, #1
 8101058:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810105a:	683b      	ldr	r3, [r7, #0]
 810105c:	681a      	ldr	r2, [r3, #0]
 810105e:	69fb      	ldr	r3, [r7, #28]
 8101060:	fa22 f303 	lsr.w	r3, r2, r3
 8101064:	2b00      	cmp	r3, #0
 8101066:	f47f ae63 	bne.w	8100d30 <HAL_GPIO_Init+0x14>
  }
}
 810106a:	bf00      	nop
 810106c:	bf00      	nop
 810106e:	3724      	adds	r7, #36	; 0x24
 8101070:	46bd      	mov	sp, r7
 8101072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101076:	4770      	bx	lr
 8101078:	58000400 	.word	0x58000400

0810107c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810107c:	b480      	push	{r7}
 810107e:	b083      	sub	sp, #12
 8101080:	af00      	add	r7, sp, #0
 8101082:	6078      	str	r0, [r7, #4]
 8101084:	460b      	mov	r3, r1
 8101086:	807b      	strh	r3, [r7, #2]
 8101088:	4613      	mov	r3, r2
 810108a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 810108c:	787b      	ldrb	r3, [r7, #1]
 810108e:	2b00      	cmp	r3, #0
 8101090:	d003      	beq.n	810109a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101092:	887a      	ldrh	r2, [r7, #2]
 8101094:	687b      	ldr	r3, [r7, #4]
 8101096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101098:	e003      	b.n	81010a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810109a:	887b      	ldrh	r3, [r7, #2]
 810109c:	041a      	lsls	r2, r3, #16
 810109e:	687b      	ldr	r3, [r7, #4]
 81010a0:	619a      	str	r2, [r3, #24]
}
 81010a2:	bf00      	nop
 81010a4:	370c      	adds	r7, #12
 81010a6:	46bd      	mov	sp, r7
 81010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ac:	4770      	bx	lr
	...

081010b0 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 81010b0:	b480      	push	{r7}
 81010b2:	b083      	sub	sp, #12
 81010b4:	af00      	add	r7, sp, #0
 81010b6:	6078      	str	r0, [r7, #4]
 81010b8:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 81010ba:	490e      	ldr	r1, [pc, #56]	; (81010f4 <HAL_HSEM_Take+0x44>)
 81010bc:	683b      	ldr	r3, [r7, #0]
 81010be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81010c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81010c6:	687a      	ldr	r2, [r7, #4]
 81010c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 81010cc:	4a09      	ldr	r2, [pc, #36]	; (81010f4 <HAL_HSEM_Take+0x44>)
 81010ce:	687b      	ldr	r3, [r7, #4]
 81010d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81010d4:	683b      	ldr	r3, [r7, #0]
 81010d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81010da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81010de:	429a      	cmp	r2, r3
 81010e0:	d101      	bne.n	81010e6 <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 81010e2:	2300      	movs	r3, #0
 81010e4:	e000      	b.n	81010e8 <HAL_HSEM_Take+0x38>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 81010e6:	2301      	movs	r3, #1
}
 81010e8:	4618      	mov	r0, r3
 81010ea:	370c      	adds	r7, #12
 81010ec:	46bd      	mov	sp, r7
 81010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010f2:	4770      	bx	lr
 81010f4:	58026400 	.word	0x58026400

081010f8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 81010f8:	b480      	push	{r7}
 81010fa:	b083      	sub	sp, #12
 81010fc:	af00      	add	r7, sp, #0
 81010fe:	6078      	str	r0, [r7, #4]
 8101100:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8101102:	4906      	ldr	r1, [pc, #24]	; (810111c <HAL_HSEM_Release+0x24>)
 8101104:	683b      	ldr	r3, [r7, #0]
 8101106:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810110a:	687b      	ldr	r3, [r7, #4]
 810110c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8101110:	bf00      	nop
 8101112:	370c      	adds	r7, #12
 8101114:	46bd      	mov	sp, r7
 8101116:	f85d 7b04 	ldr.w	r7, [sp], #4
 810111a:	4770      	bx	lr
 810111c:	58026400 	.word	0x58026400

08101120 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101120:	b480      	push	{r7}
 8101122:	b083      	sub	sp, #12
 8101124:	af00      	add	r7, sp, #0
 8101126:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101128:	4b05      	ldr	r3, [pc, #20]	; (8101140 <HAL_HSEM_ActivateNotification+0x20>)
 810112a:	681a      	ldr	r2, [r3, #0]
 810112c:	4904      	ldr	r1, [pc, #16]	; (8101140 <HAL_HSEM_ActivateNotification+0x20>)
 810112e:	687b      	ldr	r3, [r7, #4]
 8101130:	4313      	orrs	r3, r2
 8101132:	600b      	str	r3, [r1, #0]
#endif
}
 8101134:	bf00      	nop
 8101136:	370c      	adds	r7, #12
 8101138:	46bd      	mov	sp, r7
 810113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810113e:	4770      	bx	lr
 8101140:	58026510 	.word	0x58026510

08101144 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8101144:	b580      	push	{r7, lr}
 8101146:	b082      	sub	sp, #8
 8101148:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810114a:	4b0a      	ldr	r3, [pc, #40]	; (8101174 <HAL_HSEM_IRQHandler+0x30>)
 810114c:	68db      	ldr	r3, [r3, #12]
 810114e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8101150:	4b08      	ldr	r3, [pc, #32]	; (8101174 <HAL_HSEM_IRQHandler+0x30>)
 8101152:	681a      	ldr	r2, [r3, #0]
 8101154:	687b      	ldr	r3, [r7, #4]
 8101156:	43db      	mvns	r3, r3
 8101158:	4906      	ldr	r1, [pc, #24]	; (8101174 <HAL_HSEM_IRQHandler+0x30>)
 810115a:	4013      	ands	r3, r2
 810115c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810115e:	4a05      	ldr	r2, [pc, #20]	; (8101174 <HAL_HSEM_IRQHandler+0x30>)
 8101160:	687b      	ldr	r3, [r7, #4]
 8101162:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8101164:	6878      	ldr	r0, [r7, #4]
 8101166:	f000 f807 	bl	8101178 <HAL_HSEM_FreeCallback>
}
 810116a:	bf00      	nop
 810116c:	3708      	adds	r7, #8
 810116e:	46bd      	mov	sp, r7
 8101170:	bd80      	pop	{r7, pc}
 8101172:	bf00      	nop
 8101174:	58026510 	.word	0x58026510

08101178 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8101178:	b480      	push	{r7}
 810117a:	b083      	sub	sp, #12
 810117c:	af00      	add	r7, sp, #0
 810117e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8101180:	bf00      	nop
 8101182:	370c      	adds	r7, #12
 8101184:	46bd      	mov	sp, r7
 8101186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810118a:	4770      	bx	lr

0810118c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810118c:	b580      	push	{r7, lr}
 810118e:	b084      	sub	sp, #16
 8101190:	af00      	add	r7, sp, #0
 8101192:	60f8      	str	r0, [r7, #12]
 8101194:	460b      	mov	r3, r1
 8101196:	607a      	str	r2, [r7, #4]
 8101198:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810119a:	4b37      	ldr	r3, [pc, #220]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 810119c:	681b      	ldr	r3, [r3, #0]
 810119e:	f023 0201 	bic.w	r2, r3, #1
 81011a2:	4935      	ldr	r1, [pc, #212]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011a4:	68fb      	ldr	r3, [r7, #12]
 81011a6:	4313      	orrs	r3, r2
 81011a8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81011aa:	687b      	ldr	r3, [r7, #4]
 81011ac:	2b00      	cmp	r3, #0
 81011ae:	d123      	bne.n	81011f8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81011b0:	f7ff fda0 	bl	8100cf4 <HAL_GetCurrentCPUID>
 81011b4:	4603      	mov	r3, r0
 81011b6:	2b03      	cmp	r3, #3
 81011b8:	d158      	bne.n	810126c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81011ba:	4b2f      	ldr	r3, [pc, #188]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011bc:	691b      	ldr	r3, [r3, #16]
 81011be:	4a2e      	ldr	r2, [pc, #184]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 81011c0:	f023 0301 	bic.w	r3, r3, #1
 81011c4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011c6:	4b2d      	ldr	r3, [pc, #180]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011c8:	691b      	ldr	r3, [r3, #16]
 81011ca:	4a2c      	ldr	r2, [pc, #176]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011cc:	f043 0304 	orr.w	r3, r3, #4
 81011d0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81011d2:	f3bf 8f4f 	dsb	sy
}
 81011d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81011d8:	f3bf 8f6f 	isb	sy
}
 81011dc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81011de:	7afb      	ldrb	r3, [r7, #11]
 81011e0:	2b01      	cmp	r3, #1
 81011e2:	d101      	bne.n	81011e8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81011e4:	bf30      	wfi
 81011e6:	e000      	b.n	81011ea <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81011e8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81011ea:	4b24      	ldr	r3, [pc, #144]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011ec:	691b      	ldr	r3, [r3, #16]
 81011ee:	4a23      	ldr	r2, [pc, #140]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81011f0:	f023 0304 	bic.w	r3, r3, #4
 81011f4:	6113      	str	r3, [r2, #16]
 81011f6:	e03c      	b.n	8101272 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81011f8:	687b      	ldr	r3, [r7, #4]
 81011fa:	2b01      	cmp	r3, #1
 81011fc:	d123      	bne.n	8101246 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81011fe:	f7ff fd79 	bl	8100cf4 <HAL_GetCurrentCPUID>
 8101202:	4603      	mov	r3, r0
 8101204:	2b01      	cmp	r3, #1
 8101206:	d133      	bne.n	8101270 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101208:	4b1b      	ldr	r3, [pc, #108]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 810120a:	695b      	ldr	r3, [r3, #20]
 810120c:	4a1a      	ldr	r2, [pc, #104]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 810120e:	f023 0302 	bic.w	r3, r3, #2
 8101212:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101214:	4b19      	ldr	r3, [pc, #100]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101216:	691b      	ldr	r3, [r3, #16]
 8101218:	4a18      	ldr	r2, [pc, #96]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810121a:	f043 0304 	orr.w	r3, r3, #4
 810121e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101220:	f3bf 8f4f 	dsb	sy
}
 8101224:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101226:	f3bf 8f6f 	isb	sy
}
 810122a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810122c:	7afb      	ldrb	r3, [r7, #11]
 810122e:	2b01      	cmp	r3, #1
 8101230:	d101      	bne.n	8101236 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101232:	bf30      	wfi
 8101234:	e000      	b.n	8101238 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101236:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101238:	4b10      	ldr	r3, [pc, #64]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810123a:	691b      	ldr	r3, [r3, #16]
 810123c:	4a0f      	ldr	r2, [pc, #60]	; (810127c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810123e:	f023 0304 	bic.w	r3, r3, #4
 8101242:	6113      	str	r3, [r2, #16]
 8101244:	e015      	b.n	8101272 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101246:	f7ff fd55 	bl	8100cf4 <HAL_GetCurrentCPUID>
 810124a:	4603      	mov	r3, r0
 810124c:	2b03      	cmp	r3, #3
 810124e:	d106      	bne.n	810125e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101250:	4b09      	ldr	r3, [pc, #36]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101252:	691b      	ldr	r3, [r3, #16]
 8101254:	4a08      	ldr	r2, [pc, #32]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101256:	f023 0304 	bic.w	r3, r3, #4
 810125a:	6113      	str	r3, [r2, #16]
 810125c:	e009      	b.n	8101272 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810125e:	4b06      	ldr	r3, [pc, #24]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101260:	695b      	ldr	r3, [r3, #20]
 8101262:	4a05      	ldr	r2, [pc, #20]	; (8101278 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101264:	f023 0304 	bic.w	r3, r3, #4
 8101268:	6153      	str	r3, [r2, #20]
 810126a:	e002      	b.n	8101272 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810126c:	bf00      	nop
 810126e:	e000      	b.n	8101272 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101270:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101272:	3710      	adds	r7, #16
 8101274:	46bd      	mov	sp, r7
 8101276:	bd80      	pop	{r7, pc}
 8101278:	58024800 	.word	0x58024800
 810127c:	e000ed00 	.word	0xe000ed00

08101280 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101280:	b580      	push	{r7, lr}
 8101282:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101284:	f7ff fd36 	bl	8100cf4 <HAL_GetCurrentCPUID>
 8101288:	4603      	mov	r3, r0
 810128a:	2b03      	cmp	r3, #3
 810128c:	d101      	bne.n	8101292 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810128e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101290:	e001      	b.n	8101296 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101292:	bf40      	sev
    __WFE ();
 8101294:	bf20      	wfe
}
 8101296:	bf00      	nop
 8101298:	bd80      	pop	{r7, pc}
	...

0810129c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810129c:	b480      	push	{r7}
 810129e:	b089      	sub	sp, #36	; 0x24
 81012a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81012a2:	4bb3      	ldr	r3, [pc, #716]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012a4:	691b      	ldr	r3, [r3, #16]
 81012a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81012aa:	2b18      	cmp	r3, #24
 81012ac:	f200 8155 	bhi.w	810155a <HAL_RCC_GetSysClockFreq+0x2be>
 81012b0:	a201      	add	r2, pc, #4	; (adr r2, 81012b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81012b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81012b6:	bf00      	nop
 81012b8:	0810131d 	.word	0x0810131d
 81012bc:	0810155b 	.word	0x0810155b
 81012c0:	0810155b 	.word	0x0810155b
 81012c4:	0810155b 	.word	0x0810155b
 81012c8:	0810155b 	.word	0x0810155b
 81012cc:	0810155b 	.word	0x0810155b
 81012d0:	0810155b 	.word	0x0810155b
 81012d4:	0810155b 	.word	0x0810155b
 81012d8:	08101343 	.word	0x08101343
 81012dc:	0810155b 	.word	0x0810155b
 81012e0:	0810155b 	.word	0x0810155b
 81012e4:	0810155b 	.word	0x0810155b
 81012e8:	0810155b 	.word	0x0810155b
 81012ec:	0810155b 	.word	0x0810155b
 81012f0:	0810155b 	.word	0x0810155b
 81012f4:	0810155b 	.word	0x0810155b
 81012f8:	08101349 	.word	0x08101349
 81012fc:	0810155b 	.word	0x0810155b
 8101300:	0810155b 	.word	0x0810155b
 8101304:	0810155b 	.word	0x0810155b
 8101308:	0810155b 	.word	0x0810155b
 810130c:	0810155b 	.word	0x0810155b
 8101310:	0810155b 	.word	0x0810155b
 8101314:	0810155b 	.word	0x0810155b
 8101318:	0810134f 	.word	0x0810134f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810131c:	4b94      	ldr	r3, [pc, #592]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810131e:	681b      	ldr	r3, [r3, #0]
 8101320:	f003 0320 	and.w	r3, r3, #32
 8101324:	2b00      	cmp	r3, #0
 8101326:	d009      	beq.n	810133c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101328:	4b91      	ldr	r3, [pc, #580]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810132a:	681b      	ldr	r3, [r3, #0]
 810132c:	08db      	lsrs	r3, r3, #3
 810132e:	f003 0303 	and.w	r3, r3, #3
 8101332:	4a90      	ldr	r2, [pc, #576]	; (8101574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101334:	fa22 f303 	lsr.w	r3, r2, r3
 8101338:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810133a:	e111      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810133c:	4b8d      	ldr	r3, [pc, #564]	; (8101574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810133e:	61bb      	str	r3, [r7, #24]
    break;
 8101340:	e10e      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101342:	4b8d      	ldr	r3, [pc, #564]	; (8101578 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101344:	61bb      	str	r3, [r7, #24]
    break;
 8101346:	e10b      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101348:	4b8c      	ldr	r3, [pc, #560]	; (810157c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810134a:	61bb      	str	r3, [r7, #24]
    break;
 810134c:	e108      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810134e:	4b88      	ldr	r3, [pc, #544]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101352:	f003 0303 	and.w	r3, r3, #3
 8101356:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101358:	4b85      	ldr	r3, [pc, #532]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810135c:	091b      	lsrs	r3, r3, #4
 810135e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101362:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101364:	4b82      	ldr	r3, [pc, #520]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101368:	f003 0301 	and.w	r3, r3, #1
 810136c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810136e:	4b80      	ldr	r3, [pc, #512]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101372:	08db      	lsrs	r3, r3, #3
 8101374:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101378:	68fa      	ldr	r2, [r7, #12]
 810137a:	fb02 f303 	mul.w	r3, r2, r3
 810137e:	ee07 3a90 	vmov	s15, r3
 8101382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101386:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810138a:	693b      	ldr	r3, [r7, #16]
 810138c:	2b00      	cmp	r3, #0
 810138e:	f000 80e1 	beq.w	8101554 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101392:	697b      	ldr	r3, [r7, #20]
 8101394:	2b02      	cmp	r3, #2
 8101396:	f000 8083 	beq.w	81014a0 <HAL_RCC_GetSysClockFreq+0x204>
 810139a:	697b      	ldr	r3, [r7, #20]
 810139c:	2b02      	cmp	r3, #2
 810139e:	f200 80a1 	bhi.w	81014e4 <HAL_RCC_GetSysClockFreq+0x248>
 81013a2:	697b      	ldr	r3, [r7, #20]
 81013a4:	2b00      	cmp	r3, #0
 81013a6:	d003      	beq.n	81013b0 <HAL_RCC_GetSysClockFreq+0x114>
 81013a8:	697b      	ldr	r3, [r7, #20]
 81013aa:	2b01      	cmp	r3, #1
 81013ac:	d056      	beq.n	810145c <HAL_RCC_GetSysClockFreq+0x1c0>
 81013ae:	e099      	b.n	81014e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81013b0:	4b6f      	ldr	r3, [pc, #444]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013b2:	681b      	ldr	r3, [r3, #0]
 81013b4:	f003 0320 	and.w	r3, r3, #32
 81013b8:	2b00      	cmp	r3, #0
 81013ba:	d02d      	beq.n	8101418 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81013bc:	4b6c      	ldr	r3, [pc, #432]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013be:	681b      	ldr	r3, [r3, #0]
 81013c0:	08db      	lsrs	r3, r3, #3
 81013c2:	f003 0303 	and.w	r3, r3, #3
 81013c6:	4a6b      	ldr	r2, [pc, #428]	; (8101574 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81013c8:	fa22 f303 	lsr.w	r3, r2, r3
 81013cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81013ce:	687b      	ldr	r3, [r7, #4]
 81013d0:	ee07 3a90 	vmov	s15, r3
 81013d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013d8:	693b      	ldr	r3, [r7, #16]
 81013da:	ee07 3a90 	vmov	s15, r3
 81013de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013e6:	4b62      	ldr	r3, [pc, #392]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81013ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81013ee:	ee07 3a90 	vmov	s15, r3
 81013f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81013fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101580 <HAL_RCC_GetSysClockFreq+0x2e4>
 81013fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810140a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810140e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101412:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101416:	e087      	b.n	8101528 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101418:	693b      	ldr	r3, [r7, #16]
 810141a:	ee07 3a90 	vmov	s15, r3
 810141e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101422:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101584 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810142a:	4b51      	ldr	r3, [pc, #324]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810142e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101432:	ee07 3a90 	vmov	s15, r3
 8101436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810143a:	ed97 6a02 	vldr	s12, [r7, #8]
 810143e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101580 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810144a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810144e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810145a:	e065      	b.n	8101528 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810145c:	693b      	ldr	r3, [r7, #16]
 810145e:	ee07 3a90 	vmov	s15, r3
 8101462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101466:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101588 <HAL_RCC_GetSysClockFreq+0x2ec>
 810146a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810146e:	4b40      	ldr	r3, [pc, #256]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101476:	ee07 3a90 	vmov	s15, r3
 810147a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810147e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101482:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101580 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810148a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810148e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101496:	ee67 7a27 	vmul.f32	s15, s14, s15
 810149a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810149e:	e043      	b.n	8101528 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81014a0:	693b      	ldr	r3, [r7, #16]
 81014a2:	ee07 3a90 	vmov	s15, r3
 81014a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 810158c <HAL_RCC_GetSysClockFreq+0x2f0>
 81014ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014b2:	4b2f      	ldr	r3, [pc, #188]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014ba:	ee07 3a90 	vmov	s15, r3
 81014be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81014c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81014c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101580 <HAL_RCC_GetSysClockFreq+0x2e4>
 81014ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81014ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81014d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81014d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81014da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81014de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81014e2:	e021      	b.n	8101528 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81014e4:	693b      	ldr	r3, [r7, #16]
 81014e6:	ee07 3a90 	vmov	s15, r3
 81014ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81014ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101588 <HAL_RCC_GetSysClockFreq+0x2ec>
 81014f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81014f6:	4b1e      	ldr	r3, [pc, #120]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81014fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81014fe:	ee07 3a90 	vmov	s15, r3
 8101502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101506:	ed97 6a02 	vldr	s12, [r7, #8]
 810150a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101580 <HAL_RCC_GetSysClockFreq+0x2e4>
 810150e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810151a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810151e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101526:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101528:	4b11      	ldr	r3, [pc, #68]	; (8101570 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810152c:	0a5b      	lsrs	r3, r3, #9
 810152e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101532:	3301      	adds	r3, #1
 8101534:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101536:	683b      	ldr	r3, [r7, #0]
 8101538:	ee07 3a90 	vmov	s15, r3
 810153c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101540:	edd7 6a07 	vldr	s13, [r7, #28]
 8101544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810154c:	ee17 3a90 	vmov	r3, s15
 8101550:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101552:	e005      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101554:	2300      	movs	r3, #0
 8101556:	61bb      	str	r3, [r7, #24]
    break;
 8101558:	e002      	b.n	8101560 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810155a:	4b07      	ldr	r3, [pc, #28]	; (8101578 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810155c:	61bb      	str	r3, [r7, #24]
    break;
 810155e:	bf00      	nop
  }

  return sysclockfreq;
 8101560:	69bb      	ldr	r3, [r7, #24]
}
 8101562:	4618      	mov	r0, r3
 8101564:	3724      	adds	r7, #36	; 0x24
 8101566:	46bd      	mov	sp, r7
 8101568:	f85d 7b04 	ldr.w	r7, [sp], #4
 810156c:	4770      	bx	lr
 810156e:	bf00      	nop
 8101570:	58024400 	.word	0x58024400
 8101574:	03d09000 	.word	0x03d09000
 8101578:	003d0900 	.word	0x003d0900
 810157c:	017d7840 	.word	0x017d7840
 8101580:	46000000 	.word	0x46000000
 8101584:	4c742400 	.word	0x4c742400
 8101588:	4a742400 	.word	0x4a742400
 810158c:	4bbebc20 	.word	0x4bbebc20

08101590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101590:	b580      	push	{r7, lr}
 8101592:	b082      	sub	sp, #8
 8101594:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101596:	f7ff fe81 	bl	810129c <HAL_RCC_GetSysClockFreq>
 810159a:	4602      	mov	r2, r0
 810159c:	4b11      	ldr	r3, [pc, #68]	; (81015e4 <HAL_RCC_GetHCLKFreq+0x54>)
 810159e:	699b      	ldr	r3, [r3, #24]
 81015a0:	0a1b      	lsrs	r3, r3, #8
 81015a2:	f003 030f 	and.w	r3, r3, #15
 81015a6:	4910      	ldr	r1, [pc, #64]	; (81015e8 <HAL_RCC_GetHCLKFreq+0x58>)
 81015a8:	5ccb      	ldrb	r3, [r1, r3]
 81015aa:	f003 031f 	and.w	r3, r3, #31
 81015ae:	fa22 f303 	lsr.w	r3, r2, r3
 81015b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81015b4:	4b0b      	ldr	r3, [pc, #44]	; (81015e4 <HAL_RCC_GetHCLKFreq+0x54>)
 81015b6:	699b      	ldr	r3, [r3, #24]
 81015b8:	f003 030f 	and.w	r3, r3, #15
 81015bc:	4a0a      	ldr	r2, [pc, #40]	; (81015e8 <HAL_RCC_GetHCLKFreq+0x58>)
 81015be:	5cd3      	ldrb	r3, [r2, r3]
 81015c0:	f003 031f 	and.w	r3, r3, #31
 81015c4:	687a      	ldr	r2, [r7, #4]
 81015c6:	fa22 f303 	lsr.w	r3, r2, r3
 81015ca:	4a08      	ldr	r2, [pc, #32]	; (81015ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81015cc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81015ce:	4b07      	ldr	r3, [pc, #28]	; (81015ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81015d0:	681b      	ldr	r3, [r3, #0]
 81015d2:	4a07      	ldr	r2, [pc, #28]	; (81015f0 <HAL_RCC_GetHCLKFreq+0x60>)
 81015d4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81015d6:	4b05      	ldr	r3, [pc, #20]	; (81015ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81015d8:	681b      	ldr	r3, [r3, #0]
}
 81015da:	4618      	mov	r0, r3
 81015dc:	3708      	adds	r7, #8
 81015de:	46bd      	mov	sp, r7
 81015e0:	bd80      	pop	{r7, pc}
 81015e2:	bf00      	nop
 81015e4:	58024400 	.word	0x58024400
 81015e8:	08103f7c 	.word	0x08103f7c
 81015ec:	10000004 	.word	0x10000004
 81015f0:	10000000 	.word	0x10000000

081015f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81015f4:	b580      	push	{r7, lr}
 81015f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81015f8:	f7ff ffca 	bl	8101590 <HAL_RCC_GetHCLKFreq>
 81015fc:	4602      	mov	r2, r0
 81015fe:	4b06      	ldr	r3, [pc, #24]	; (8101618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101600:	69db      	ldr	r3, [r3, #28]
 8101602:	091b      	lsrs	r3, r3, #4
 8101604:	f003 0307 	and.w	r3, r3, #7
 8101608:	4904      	ldr	r1, [pc, #16]	; (810161c <HAL_RCC_GetPCLK1Freq+0x28>)
 810160a:	5ccb      	ldrb	r3, [r1, r3]
 810160c:	f003 031f 	and.w	r3, r3, #31
 8101610:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101614:	4618      	mov	r0, r3
 8101616:	bd80      	pop	{r7, pc}
 8101618:	58024400 	.word	0x58024400
 810161c:	08103f7c 	.word	0x08103f7c

08101620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101620:	b580      	push	{r7, lr}
 8101622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101624:	f7ff ffb4 	bl	8101590 <HAL_RCC_GetHCLKFreq>
 8101628:	4602      	mov	r2, r0
 810162a:	4b06      	ldr	r3, [pc, #24]	; (8101644 <HAL_RCC_GetPCLK2Freq+0x24>)
 810162c:	69db      	ldr	r3, [r3, #28]
 810162e:	0a1b      	lsrs	r3, r3, #8
 8101630:	f003 0307 	and.w	r3, r3, #7
 8101634:	4904      	ldr	r1, [pc, #16]	; (8101648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8101636:	5ccb      	ldrb	r3, [r1, r3]
 8101638:	f003 031f 	and.w	r3, r3, #31
 810163c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101640:	4618      	mov	r0, r3
 8101642:	bd80      	pop	{r7, pc}
 8101644:	58024400 	.word	0x58024400
 8101648:	08103f7c 	.word	0x08103f7c

0810164c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810164c:	b580      	push	{r7, lr}
 810164e:	b086      	sub	sp, #24
 8101650:	af00      	add	r7, sp, #0
 8101652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101654:	2300      	movs	r3, #0
 8101656:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101658:	2300      	movs	r3, #0
 810165a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810165c:	687b      	ldr	r3, [r7, #4]
 810165e:	681b      	ldr	r3, [r3, #0]
 8101660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101664:	2b00      	cmp	r3, #0
 8101666:	d03f      	beq.n	81016e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8101668:	687b      	ldr	r3, [r7, #4]
 810166a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810166c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101670:	d02a      	beq.n	81016c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8101672:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101676:	d824      	bhi.n	81016c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810167c:	d018      	beq.n	81016b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810167e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101682:	d81e      	bhi.n	81016c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101684:	2b00      	cmp	r3, #0
 8101686:	d003      	beq.n	8101690 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8101688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810168c:	d007      	beq.n	810169e <HAL_RCCEx_PeriphCLKConfig+0x52>
 810168e:	e018      	b.n	81016c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101690:	4bab      	ldr	r3, [pc, #684]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101694:	4aaa      	ldr	r2, [pc, #680]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810169a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810169c:	e015      	b.n	81016ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810169e:	687b      	ldr	r3, [r7, #4]
 81016a0:	3304      	adds	r3, #4
 81016a2:	2102      	movs	r1, #2
 81016a4:	4618      	mov	r0, r3
 81016a6:	f001 f9cf 	bl	8102a48 <RCCEx_PLL2_Config>
 81016aa:	4603      	mov	r3, r0
 81016ac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81016ae:	e00c      	b.n	81016ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81016b0:	687b      	ldr	r3, [r7, #4]
 81016b2:	3324      	adds	r3, #36	; 0x24
 81016b4:	2102      	movs	r1, #2
 81016b6:	4618      	mov	r0, r3
 81016b8:	f001 fa78 	bl	8102bac <RCCEx_PLL3_Config>
 81016bc:	4603      	mov	r3, r0
 81016be:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81016c0:	e003      	b.n	81016ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81016c2:	2301      	movs	r3, #1
 81016c4:	75fb      	strb	r3, [r7, #23]
      break;
 81016c6:	e000      	b.n	81016ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81016c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81016ca:	7dfb      	ldrb	r3, [r7, #23]
 81016cc:	2b00      	cmp	r3, #0
 81016ce:	d109      	bne.n	81016e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81016d0:	4b9b      	ldr	r3, [pc, #620]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81016d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81016d8:	687b      	ldr	r3, [r7, #4]
 81016da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81016dc:	4998      	ldr	r1, [pc, #608]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81016de:	4313      	orrs	r3, r2
 81016e0:	650b      	str	r3, [r1, #80]	; 0x50
 81016e2:	e001      	b.n	81016e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81016e4:	7dfb      	ldrb	r3, [r7, #23]
 81016e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81016e8:	687b      	ldr	r3, [r7, #4]
 81016ea:	681b      	ldr	r3, [r3, #0]
 81016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81016f0:	2b00      	cmp	r3, #0
 81016f2:	d03d      	beq.n	8101770 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81016f8:	2b04      	cmp	r3, #4
 81016fa:	d826      	bhi.n	810174a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81016fc:	a201      	add	r2, pc, #4	; (adr r2, 8101704 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81016fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101702:	bf00      	nop
 8101704:	08101719 	.word	0x08101719
 8101708:	08101727 	.word	0x08101727
 810170c:	08101739 	.word	0x08101739
 8101710:	08101751 	.word	0x08101751
 8101714:	08101751 	.word	0x08101751
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101718:	4b89      	ldr	r3, [pc, #548]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810171c:	4a88      	ldr	r2, [pc, #544]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810171e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101722:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101724:	e015      	b.n	8101752 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	3304      	adds	r3, #4
 810172a:	2100      	movs	r1, #0
 810172c:	4618      	mov	r0, r3
 810172e:	f001 f98b 	bl	8102a48 <RCCEx_PLL2_Config>
 8101732:	4603      	mov	r3, r0
 8101734:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101736:	e00c      	b.n	8101752 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101738:	687b      	ldr	r3, [r7, #4]
 810173a:	3324      	adds	r3, #36	; 0x24
 810173c:	2100      	movs	r1, #0
 810173e:	4618      	mov	r0, r3
 8101740:	f001 fa34 	bl	8102bac <RCCEx_PLL3_Config>
 8101744:	4603      	mov	r3, r0
 8101746:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101748:	e003      	b.n	8101752 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810174a:	2301      	movs	r3, #1
 810174c:	75fb      	strb	r3, [r7, #23]
      break;
 810174e:	e000      	b.n	8101752 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8101750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101752:	7dfb      	ldrb	r3, [r7, #23]
 8101754:	2b00      	cmp	r3, #0
 8101756:	d109      	bne.n	810176c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101758:	4b79      	ldr	r3, [pc, #484]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810175a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810175c:	f023 0207 	bic.w	r2, r3, #7
 8101760:	687b      	ldr	r3, [r7, #4]
 8101762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101764:	4976      	ldr	r1, [pc, #472]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101766:	4313      	orrs	r3, r2
 8101768:	650b      	str	r3, [r1, #80]	; 0x50
 810176a:	e001      	b.n	8101770 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810176c:	7dfb      	ldrb	r3, [r7, #23]
 810176e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101770:	687b      	ldr	r3, [r7, #4]
 8101772:	681b      	ldr	r3, [r3, #0]
 8101774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101778:	2b00      	cmp	r3, #0
 810177a:	d042      	beq.n	8101802 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101784:	d02b      	beq.n	81017de <HAL_RCCEx_PeriphCLKConfig+0x192>
 8101786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810178a:	d825      	bhi.n	81017d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810178c:	2bc0      	cmp	r3, #192	; 0xc0
 810178e:	d028      	beq.n	81017e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8101790:	2bc0      	cmp	r3, #192	; 0xc0
 8101792:	d821      	bhi.n	81017d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101794:	2b80      	cmp	r3, #128	; 0x80
 8101796:	d016      	beq.n	81017c6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8101798:	2b80      	cmp	r3, #128	; 0x80
 810179a:	d81d      	bhi.n	81017d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810179c:	2b00      	cmp	r3, #0
 810179e:	d002      	beq.n	81017a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81017a0:	2b40      	cmp	r3, #64	; 0x40
 81017a2:	d007      	beq.n	81017b4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 81017a4:	e018      	b.n	81017d8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81017a6:	4b66      	ldr	r3, [pc, #408]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81017aa:	4a65      	ldr	r2, [pc, #404]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81017b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81017b2:	e017      	b.n	81017e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81017b4:	687b      	ldr	r3, [r7, #4]
 81017b6:	3304      	adds	r3, #4
 81017b8:	2100      	movs	r1, #0
 81017ba:	4618      	mov	r0, r3
 81017bc:	f001 f944 	bl	8102a48 <RCCEx_PLL2_Config>
 81017c0:	4603      	mov	r3, r0
 81017c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81017c4:	e00e      	b.n	81017e4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	3324      	adds	r3, #36	; 0x24
 81017ca:	2100      	movs	r1, #0
 81017cc:	4618      	mov	r0, r3
 81017ce:	f001 f9ed 	bl	8102bac <RCCEx_PLL3_Config>
 81017d2:	4603      	mov	r3, r0
 81017d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81017d6:	e005      	b.n	81017e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81017d8:	2301      	movs	r3, #1
 81017da:	75fb      	strb	r3, [r7, #23]
      break;
 81017dc:	e002      	b.n	81017e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81017de:	bf00      	nop
 81017e0:	e000      	b.n	81017e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81017e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81017e4:	7dfb      	ldrb	r3, [r7, #23]
 81017e6:	2b00      	cmp	r3, #0
 81017e8:	d109      	bne.n	81017fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81017ea:	4b55      	ldr	r3, [pc, #340]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81017ee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81017f2:	687b      	ldr	r3, [r7, #4]
 81017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81017f6:	4952      	ldr	r1, [pc, #328]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81017f8:	4313      	orrs	r3, r2
 81017fa:	650b      	str	r3, [r1, #80]	; 0x50
 81017fc:	e001      	b.n	8101802 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81017fe:	7dfb      	ldrb	r3, [r7, #23]
 8101800:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101802:	687b      	ldr	r3, [r7, #4]
 8101804:	681b      	ldr	r3, [r3, #0]
 8101806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810180a:	2b00      	cmp	r3, #0
 810180c:	d049      	beq.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810180e:	687b      	ldr	r3, [r7, #4]
 8101810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101814:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101818:	d030      	beq.n	810187c <HAL_RCCEx_PeriphCLKConfig+0x230>
 810181a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810181e:	d82a      	bhi.n	8101876 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101820:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101824:	d02c      	beq.n	8101880 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8101826:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810182a:	d824      	bhi.n	8101876 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810182c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101830:	d018      	beq.n	8101864 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8101832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101836:	d81e      	bhi.n	8101876 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101838:	2b00      	cmp	r3, #0
 810183a:	d003      	beq.n	8101844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 810183c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101840:	d007      	beq.n	8101852 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8101842:	e018      	b.n	8101876 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101844:	4b3e      	ldr	r3, [pc, #248]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101848:	4a3d      	ldr	r2, [pc, #244]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810184a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810184e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101850:	e017      	b.n	8101882 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101852:	687b      	ldr	r3, [r7, #4]
 8101854:	3304      	adds	r3, #4
 8101856:	2100      	movs	r1, #0
 8101858:	4618      	mov	r0, r3
 810185a:	f001 f8f5 	bl	8102a48 <RCCEx_PLL2_Config>
 810185e:	4603      	mov	r3, r0
 8101860:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101862:	e00e      	b.n	8101882 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101864:	687b      	ldr	r3, [r7, #4]
 8101866:	3324      	adds	r3, #36	; 0x24
 8101868:	2100      	movs	r1, #0
 810186a:	4618      	mov	r0, r3
 810186c:	f001 f99e 	bl	8102bac <RCCEx_PLL3_Config>
 8101870:	4603      	mov	r3, r0
 8101872:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101874:	e005      	b.n	8101882 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101876:	2301      	movs	r3, #1
 8101878:	75fb      	strb	r3, [r7, #23]
      break;
 810187a:	e002      	b.n	8101882 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 810187c:	bf00      	nop
 810187e:	e000      	b.n	8101882 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101882:	7dfb      	ldrb	r3, [r7, #23]
 8101884:	2b00      	cmp	r3, #0
 8101886:	d10a      	bne.n	810189e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101888:	4b2d      	ldr	r3, [pc, #180]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810188a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810188c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101890:	687b      	ldr	r3, [r7, #4]
 8101892:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101896:	492a      	ldr	r1, [pc, #168]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101898:	4313      	orrs	r3, r2
 810189a:	658b      	str	r3, [r1, #88]	; 0x58
 810189c:	e001      	b.n	81018a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810189e:	7dfb      	ldrb	r3, [r7, #23]
 81018a0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81018a2:	687b      	ldr	r3, [r7, #4]
 81018a4:	681b      	ldr	r3, [r3, #0]
 81018a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81018aa:	2b00      	cmp	r3, #0
 81018ac:	d04c      	beq.n	8101948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81018ae:	687b      	ldr	r3, [r7, #4]
 81018b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81018b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81018b8:	d030      	beq.n	810191c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81018ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81018be:	d82a      	bhi.n	8101916 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81018c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81018c4:	d02c      	beq.n	8101920 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 81018c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81018ca:	d824      	bhi.n	8101916 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81018cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81018d0:	d018      	beq.n	8101904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81018d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81018d6:	d81e      	bhi.n	8101916 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81018d8:	2b00      	cmp	r3, #0
 81018da:	d003      	beq.n	81018e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81018dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81018e0:	d007      	beq.n	81018f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81018e2:	e018      	b.n	8101916 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81018e4:	4b16      	ldr	r3, [pc, #88]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81018e8:	4a15      	ldr	r2, [pc, #84]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81018ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81018ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81018f0:	e017      	b.n	8101922 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	3304      	adds	r3, #4
 81018f6:	2100      	movs	r1, #0
 81018f8:	4618      	mov	r0, r3
 81018fa:	f001 f8a5 	bl	8102a48 <RCCEx_PLL2_Config>
 81018fe:	4603      	mov	r3, r0
 8101900:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101902:	e00e      	b.n	8101922 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101904:	687b      	ldr	r3, [r7, #4]
 8101906:	3324      	adds	r3, #36	; 0x24
 8101908:	2100      	movs	r1, #0
 810190a:	4618      	mov	r0, r3
 810190c:	f001 f94e 	bl	8102bac <RCCEx_PLL3_Config>
 8101910:	4603      	mov	r3, r0
 8101912:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101914:	e005      	b.n	8101922 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101916:	2301      	movs	r3, #1
 8101918:	75fb      	strb	r3, [r7, #23]
      break;
 810191a:	e002      	b.n	8101922 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810191c:	bf00      	nop
 810191e:	e000      	b.n	8101922 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8101920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101922:	7dfb      	ldrb	r3, [r7, #23]
 8101924:	2b00      	cmp	r3, #0
 8101926:	d10d      	bne.n	8101944 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101928:	4b05      	ldr	r3, [pc, #20]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810192a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810192c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101936:	4902      	ldr	r1, [pc, #8]	; (8101940 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101938:	4313      	orrs	r3, r2
 810193a:	658b      	str	r3, [r1, #88]	; 0x58
 810193c:	e004      	b.n	8101948 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 810193e:	bf00      	nop
 8101940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101944:	7dfb      	ldrb	r3, [r7, #23]
 8101946:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101948:	687b      	ldr	r3, [r7, #4]
 810194a:	681b      	ldr	r3, [r3, #0]
 810194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101950:	2b00      	cmp	r3, #0
 8101952:	d032      	beq.n	81019ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8101954:	687b      	ldr	r3, [r7, #4]
 8101956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101958:	2b30      	cmp	r3, #48	; 0x30
 810195a:	d01c      	beq.n	8101996 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810195c:	2b30      	cmp	r3, #48	; 0x30
 810195e:	d817      	bhi.n	8101990 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8101960:	2b20      	cmp	r3, #32
 8101962:	d00c      	beq.n	810197e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8101964:	2b20      	cmp	r3, #32
 8101966:	d813      	bhi.n	8101990 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8101968:	2b00      	cmp	r3, #0
 810196a:	d016      	beq.n	810199a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 810196c:	2b10      	cmp	r3, #16
 810196e:	d10f      	bne.n	8101990 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101970:	4baf      	ldr	r3, [pc, #700]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101974:	4aae      	ldr	r2, [pc, #696]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810197a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810197c:	e00e      	b.n	810199c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810197e:	687b      	ldr	r3, [r7, #4]
 8101980:	3304      	adds	r3, #4
 8101982:	2102      	movs	r1, #2
 8101984:	4618      	mov	r0, r3
 8101986:	f001 f85f 	bl	8102a48 <RCCEx_PLL2_Config>
 810198a:	4603      	mov	r3, r0
 810198c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810198e:	e005      	b.n	810199c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101990:	2301      	movs	r3, #1
 8101992:	75fb      	strb	r3, [r7, #23]
      break;
 8101994:	e002      	b.n	810199c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8101996:	bf00      	nop
 8101998:	e000      	b.n	810199c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810199a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810199c:	7dfb      	ldrb	r3, [r7, #23]
 810199e:	2b00      	cmp	r3, #0
 81019a0:	d109      	bne.n	81019b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81019a2:	4ba3      	ldr	r3, [pc, #652]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81019a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81019ae:	49a0      	ldr	r1, [pc, #640]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019b0:	4313      	orrs	r3, r2
 81019b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81019b4:	e001      	b.n	81019ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81019b6:	7dfb      	ldrb	r3, [r7, #23]
 81019b8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	681b      	ldr	r3, [r3, #0]
 81019be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81019c2:	2b00      	cmp	r3, #0
 81019c4:	d047      	beq.n	8101a56 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81019c6:	687b      	ldr	r3, [r7, #4]
 81019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81019ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81019ce:	d030      	beq.n	8101a32 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81019d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81019d4:	d82a      	bhi.n	8101a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81019d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81019da:	d02c      	beq.n	8101a36 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81019dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81019e0:	d824      	bhi.n	8101a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81019e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81019e6:	d018      	beq.n	8101a1a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81019e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81019ec:	d81e      	bhi.n	8101a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81019ee:	2b00      	cmp	r3, #0
 81019f0:	d003      	beq.n	81019fa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81019f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81019f6:	d007      	beq.n	8101a08 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 81019f8:	e018      	b.n	8101a2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019fa:	4b8d      	ldr	r3, [pc, #564]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81019fe:	4a8c      	ldr	r2, [pc, #560]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101a04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101a06:	e017      	b.n	8101a38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101a08:	687b      	ldr	r3, [r7, #4]
 8101a0a:	3304      	adds	r3, #4
 8101a0c:	2100      	movs	r1, #0
 8101a0e:	4618      	mov	r0, r3
 8101a10:	f001 f81a 	bl	8102a48 <RCCEx_PLL2_Config>
 8101a14:	4603      	mov	r3, r0
 8101a16:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101a18:	e00e      	b.n	8101a38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101a1a:	687b      	ldr	r3, [r7, #4]
 8101a1c:	3324      	adds	r3, #36	; 0x24
 8101a1e:	2100      	movs	r1, #0
 8101a20:	4618      	mov	r0, r3
 8101a22:	f001 f8c3 	bl	8102bac <RCCEx_PLL3_Config>
 8101a26:	4603      	mov	r3, r0
 8101a28:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8101a2a:	e005      	b.n	8101a38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101a2c:	2301      	movs	r3, #1
 8101a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8101a30:	e002      	b.n	8101a38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8101a32:	bf00      	nop
 8101a34:	e000      	b.n	8101a38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8101a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101a38:	7dfb      	ldrb	r3, [r7, #23]
 8101a3a:	2b00      	cmp	r3, #0
 8101a3c:	d109      	bne.n	8101a52 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101a3e:	4b7c      	ldr	r3, [pc, #496]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101a42:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8101a46:	687b      	ldr	r3, [r7, #4]
 8101a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101a4a:	4979      	ldr	r1, [pc, #484]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101a4c:	4313      	orrs	r3, r2
 8101a4e:	650b      	str	r3, [r1, #80]	; 0x50
 8101a50:	e001      	b.n	8101a56 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a52:	7dfb      	ldrb	r3, [r7, #23]
 8101a54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101a56:	687b      	ldr	r3, [r7, #4]
 8101a58:	681b      	ldr	r3, [r3, #0]
 8101a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8101a5e:	2b00      	cmp	r3, #0
 8101a60:	d049      	beq.n	8101af6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8101a62:	687b      	ldr	r3, [r7, #4]
 8101a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101a66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101a6a:	d02e      	beq.n	8101aca <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8101a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8101a70:	d828      	bhi.n	8101ac4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101a76:	d02a      	beq.n	8101ace <HAL_RCCEx_PeriphCLKConfig+0x482>
 8101a78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8101a7c:	d822      	bhi.n	8101ac4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101a7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101a82:	d026      	beq.n	8101ad2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8101a84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8101a88:	d81c      	bhi.n	8101ac4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101a8e:	d010      	beq.n	8101ab2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8101a90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101a94:	d816      	bhi.n	8101ac4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8101a96:	2b00      	cmp	r3, #0
 8101a98:	d01d      	beq.n	8101ad6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8101a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101a9e:	d111      	bne.n	8101ac4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101aa0:	687b      	ldr	r3, [r7, #4]
 8101aa2:	3304      	adds	r3, #4
 8101aa4:	2101      	movs	r1, #1
 8101aa6:	4618      	mov	r0, r3
 8101aa8:	f000 ffce 	bl	8102a48 <RCCEx_PLL2_Config>
 8101aac:	4603      	mov	r3, r0
 8101aae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101ab0:	e012      	b.n	8101ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101ab2:	687b      	ldr	r3, [r7, #4]
 8101ab4:	3324      	adds	r3, #36	; 0x24
 8101ab6:	2101      	movs	r1, #1
 8101ab8:	4618      	mov	r0, r3
 8101aba:	f001 f877 	bl	8102bac <RCCEx_PLL3_Config>
 8101abe:	4603      	mov	r3, r0
 8101ac0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8101ac2:	e009      	b.n	8101ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101ac4:	2301      	movs	r3, #1
 8101ac6:	75fb      	strb	r3, [r7, #23]
      break;
 8101ac8:	e006      	b.n	8101ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101aca:	bf00      	nop
 8101acc:	e004      	b.n	8101ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101ace:	bf00      	nop
 8101ad0:	e002      	b.n	8101ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101ad2:	bf00      	nop
 8101ad4:	e000      	b.n	8101ad8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8101ad6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ad8:	7dfb      	ldrb	r3, [r7, #23]
 8101ada:	2b00      	cmp	r3, #0
 8101adc:	d109      	bne.n	8101af2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101ade:	4b54      	ldr	r3, [pc, #336]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101ae2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8101ae6:	687b      	ldr	r3, [r7, #4]
 8101ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101aea:	4951      	ldr	r1, [pc, #324]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101aec:	4313      	orrs	r3, r2
 8101aee:	650b      	str	r3, [r1, #80]	; 0x50
 8101af0:	e001      	b.n	8101af6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101af2:	7dfb      	ldrb	r3, [r7, #23]
 8101af4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	681b      	ldr	r3, [r3, #0]
 8101afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101afe:	2b00      	cmp	r3, #0
 8101b00:	d04b      	beq.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8101b02:	687b      	ldr	r3, [r7, #4]
 8101b04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101b0c:	d02e      	beq.n	8101b6c <HAL_RCCEx_PeriphCLKConfig+0x520>
 8101b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101b12:	d828      	bhi.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b18:	d02a      	beq.n	8101b70 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8101b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101b1e:	d822      	bhi.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101b24:	d026      	beq.n	8101b74 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8101b26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101b2a:	d81c      	bhi.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101b30:	d010      	beq.n	8101b54 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8101b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101b36:	d816      	bhi.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8101b38:	2b00      	cmp	r3, #0
 8101b3a:	d01d      	beq.n	8101b78 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8101b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101b40:	d111      	bne.n	8101b66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	3304      	adds	r3, #4
 8101b46:	2101      	movs	r1, #1
 8101b48:	4618      	mov	r0, r3
 8101b4a:	f000 ff7d 	bl	8102a48 <RCCEx_PLL2_Config>
 8101b4e:	4603      	mov	r3, r0
 8101b50:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101b52:	e012      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	3324      	adds	r3, #36	; 0x24
 8101b58:	2101      	movs	r1, #1
 8101b5a:	4618      	mov	r0, r3
 8101b5c:	f001 f826 	bl	8102bac <RCCEx_PLL3_Config>
 8101b60:	4603      	mov	r3, r0
 8101b62:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8101b64:	e009      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8101b66:	2301      	movs	r3, #1
 8101b68:	75fb      	strb	r3, [r7, #23]
      break;
 8101b6a:	e006      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101b6c:	bf00      	nop
 8101b6e:	e004      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101b70:	bf00      	nop
 8101b72:	e002      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101b74:	bf00      	nop
 8101b76:	e000      	b.n	8101b7a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8101b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101b7a:	7dfb      	ldrb	r3, [r7, #23]
 8101b7c:	2b00      	cmp	r3, #0
 8101b7e:	d10a      	bne.n	8101b96 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101b80:	4b2b      	ldr	r3, [pc, #172]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101b84:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8101b8e:	4928      	ldr	r1, [pc, #160]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101b90:	4313      	orrs	r3, r2
 8101b92:	658b      	str	r3, [r1, #88]	; 0x58
 8101b94:	e001      	b.n	8101b9a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b96:	7dfb      	ldrb	r3, [r7, #23]
 8101b98:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101b9a:	687b      	ldr	r3, [r7, #4]
 8101b9c:	681b      	ldr	r3, [r3, #0]
 8101b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101ba2:	2b00      	cmp	r3, #0
 8101ba4:	d02f      	beq.n	8101c06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8101ba6:	687b      	ldr	r3, [r7, #4]
 8101ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101bae:	d00e      	beq.n	8101bce <HAL_RCCEx_PeriphCLKConfig+0x582>
 8101bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101bb4:	d814      	bhi.n	8101be0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8101bb6:	2b00      	cmp	r3, #0
 8101bb8:	d015      	beq.n	8101be6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101bbe:	d10f      	bne.n	8101be0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101bc0:	4b1b      	ldr	r3, [pc, #108]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101bc4:	4a1a      	ldr	r2, [pc, #104]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101bcc:	e00c      	b.n	8101be8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101bce:	687b      	ldr	r3, [r7, #4]
 8101bd0:	3304      	adds	r3, #4
 8101bd2:	2101      	movs	r1, #1
 8101bd4:	4618      	mov	r0, r3
 8101bd6:	f000 ff37 	bl	8102a48 <RCCEx_PLL2_Config>
 8101bda:	4603      	mov	r3, r0
 8101bdc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8101bde:	e003      	b.n	8101be8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101be0:	2301      	movs	r3, #1
 8101be2:	75fb      	strb	r3, [r7, #23]
      break;
 8101be4:	e000      	b.n	8101be8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8101be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101be8:	7dfb      	ldrb	r3, [r7, #23]
 8101bea:	2b00      	cmp	r3, #0
 8101bec:	d109      	bne.n	8101c02 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101bee:	4b10      	ldr	r3, [pc, #64]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101bf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8101bf6:	687b      	ldr	r3, [r7, #4]
 8101bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101bfa:	490d      	ldr	r1, [pc, #52]	; (8101c30 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101bfc:	4313      	orrs	r3, r2
 8101bfe:	650b      	str	r3, [r1, #80]	; 0x50
 8101c00:	e001      	b.n	8101c06 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c02:	7dfb      	ldrb	r3, [r7, #23]
 8101c04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	681b      	ldr	r3, [r3, #0]
 8101c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101c0e:	2b00      	cmp	r3, #0
 8101c10:	d033      	beq.n	8101c7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101c16:	2b03      	cmp	r3, #3
 8101c18:	d81c      	bhi.n	8101c54 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8101c1a:	a201      	add	r2, pc, #4	; (adr r2, 8101c20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8101c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101c20:	08101c5b 	.word	0x08101c5b
 8101c24:	08101c35 	.word	0x08101c35
 8101c28:	08101c43 	.word	0x08101c43
 8101c2c:	08101c5b 	.word	0x08101c5b
 8101c30:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c34:	4bb9      	ldr	r3, [pc, #740]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c38:	4ab8      	ldr	r2, [pc, #736]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101c40:	e00c      	b.n	8101c5c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101c42:	687b      	ldr	r3, [r7, #4]
 8101c44:	3304      	adds	r3, #4
 8101c46:	2102      	movs	r1, #2
 8101c48:	4618      	mov	r0, r3
 8101c4a:	f000 fefd 	bl	8102a48 <RCCEx_PLL2_Config>
 8101c4e:	4603      	mov	r3, r0
 8101c50:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8101c52:	e003      	b.n	8101c5c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101c54:	2301      	movs	r3, #1
 8101c56:	75fb      	strb	r3, [r7, #23]
      break;
 8101c58:	e000      	b.n	8101c5c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8101c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101c5c:	7dfb      	ldrb	r3, [r7, #23]
 8101c5e:	2b00      	cmp	r3, #0
 8101c60:	d109      	bne.n	8101c76 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101c62:	4bae      	ldr	r3, [pc, #696]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101c66:	f023 0203 	bic.w	r2, r3, #3
 8101c6a:	687b      	ldr	r3, [r7, #4]
 8101c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101c6e:	49ab      	ldr	r1, [pc, #684]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101c70:	4313      	orrs	r3, r2
 8101c72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101c74:	e001      	b.n	8101c7a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c76:	7dfb      	ldrb	r3, [r7, #23]
 8101c78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101c7a:	687b      	ldr	r3, [r7, #4]
 8101c7c:	681b      	ldr	r3, [r3, #0]
 8101c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101c82:	2b00      	cmp	r3, #0
 8101c84:	f000 8088 	beq.w	8101d98 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101c88:	4ba5      	ldr	r3, [pc, #660]	; (8101f20 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101c8a:	681b      	ldr	r3, [r3, #0]
 8101c8c:	4aa4      	ldr	r2, [pc, #656]	; (8101f20 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101c92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101c94:	f7fe feee 	bl	8100a74 <HAL_GetTick>
 8101c98:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101c9a:	e009      	b.n	8101cb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101c9c:	f7fe feea 	bl	8100a74 <HAL_GetTick>
 8101ca0:	4602      	mov	r2, r0
 8101ca2:	693b      	ldr	r3, [r7, #16]
 8101ca4:	1ad3      	subs	r3, r2, r3
 8101ca6:	2b64      	cmp	r3, #100	; 0x64
 8101ca8:	d902      	bls.n	8101cb0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8101caa:	2303      	movs	r3, #3
 8101cac:	75fb      	strb	r3, [r7, #23]
        break;
 8101cae:	e005      	b.n	8101cbc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101cb0:	4b9b      	ldr	r3, [pc, #620]	; (8101f20 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8101cb2:	681b      	ldr	r3, [r3, #0]
 8101cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101cb8:	2b00      	cmp	r3, #0
 8101cba:	d0ef      	beq.n	8101c9c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8101cbc:	7dfb      	ldrb	r3, [r7, #23]
 8101cbe:	2b00      	cmp	r3, #0
 8101cc0:	d168      	bne.n	8101d94 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101cc2:	4b96      	ldr	r3, [pc, #600]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101cc6:	687b      	ldr	r3, [r7, #4]
 8101cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101ccc:	4053      	eors	r3, r2
 8101cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101cd2:	2b00      	cmp	r3, #0
 8101cd4:	d013      	beq.n	8101cfe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101cd6:	4b91      	ldr	r3, [pc, #580]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8101cde:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101ce0:	4b8e      	ldr	r3, [pc, #568]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101ce4:	4a8d      	ldr	r2, [pc, #564]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101cea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101cec:	4b8b      	ldr	r3, [pc, #556]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101cf0:	4a8a      	ldr	r2, [pc, #552]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8101cf6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101cf8:	4a88      	ldr	r2, [pc, #544]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101cfa:	68fb      	ldr	r3, [r7, #12]
 8101cfc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101cfe:	687b      	ldr	r3, [r7, #4]
 8101d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101d08:	d115      	bne.n	8101d36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101d0a:	f7fe feb3 	bl	8100a74 <HAL_GetTick>
 8101d0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101d10:	e00b      	b.n	8101d2a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101d12:	f7fe feaf 	bl	8100a74 <HAL_GetTick>
 8101d16:	4602      	mov	r2, r0
 8101d18:	693b      	ldr	r3, [r7, #16]
 8101d1a:	1ad3      	subs	r3, r2, r3
 8101d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8101d20:	4293      	cmp	r3, r2
 8101d22:	d902      	bls.n	8101d2a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8101d24:	2303      	movs	r3, #3
 8101d26:	75fb      	strb	r3, [r7, #23]
            break;
 8101d28:	e005      	b.n	8101d36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101d2a:	4b7c      	ldr	r3, [pc, #496]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101d2e:	f003 0302 	and.w	r3, r3, #2
 8101d32:	2b00      	cmp	r3, #0
 8101d34:	d0ed      	beq.n	8101d12 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8101d36:	7dfb      	ldrb	r3, [r7, #23]
 8101d38:	2b00      	cmp	r3, #0
 8101d3a:	d128      	bne.n	8101d8e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101d3c:	687b      	ldr	r3, [r7, #4]
 8101d3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8101d46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8101d4a:	d10f      	bne.n	8101d6c <HAL_RCCEx_PeriphCLKConfig+0x720>
 8101d4c:	4b73      	ldr	r3, [pc, #460]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d4e:	691b      	ldr	r3, [r3, #16]
 8101d50:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8101d54:	687b      	ldr	r3, [r7, #4]
 8101d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d5a:	091b      	lsrs	r3, r3, #4
 8101d5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8101d60:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8101d64:	496d      	ldr	r1, [pc, #436]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d66:	4313      	orrs	r3, r2
 8101d68:	610b      	str	r3, [r1, #16]
 8101d6a:	e005      	b.n	8101d78 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8101d6c:	4b6b      	ldr	r3, [pc, #428]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d6e:	691b      	ldr	r3, [r3, #16]
 8101d70:	4a6a      	ldr	r2, [pc, #424]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8101d76:	6113      	str	r3, [r2, #16]
 8101d78:	4b68      	ldr	r3, [pc, #416]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8101d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101d86:	4965      	ldr	r1, [pc, #404]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101d88:	4313      	orrs	r3, r2
 8101d8a:	670b      	str	r3, [r1, #112]	; 0x70
 8101d8c:	e004      	b.n	8101d98 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101d8e:	7dfb      	ldrb	r3, [r7, #23]
 8101d90:	75bb      	strb	r3, [r7, #22]
 8101d92:	e001      	b.n	8101d98 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d94:	7dfb      	ldrb	r3, [r7, #23]
 8101d96:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101d98:	687b      	ldr	r3, [r7, #4]
 8101d9a:	681b      	ldr	r3, [r3, #0]
 8101d9c:	f003 0301 	and.w	r3, r3, #1
 8101da0:	2b00      	cmp	r3, #0
 8101da2:	d07e      	beq.n	8101ea2 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8101da4:	687b      	ldr	r3, [r7, #4]
 8101da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101da8:	2b28      	cmp	r3, #40	; 0x28
 8101daa:	d867      	bhi.n	8101e7c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8101dac:	a201      	add	r2, pc, #4	; (adr r2, 8101db4 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8101dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101db2:	bf00      	nop
 8101db4:	08101e83 	.word	0x08101e83
 8101db8:	08101e7d 	.word	0x08101e7d
 8101dbc:	08101e7d 	.word	0x08101e7d
 8101dc0:	08101e7d 	.word	0x08101e7d
 8101dc4:	08101e7d 	.word	0x08101e7d
 8101dc8:	08101e7d 	.word	0x08101e7d
 8101dcc:	08101e7d 	.word	0x08101e7d
 8101dd0:	08101e7d 	.word	0x08101e7d
 8101dd4:	08101e59 	.word	0x08101e59
 8101dd8:	08101e7d 	.word	0x08101e7d
 8101ddc:	08101e7d 	.word	0x08101e7d
 8101de0:	08101e7d 	.word	0x08101e7d
 8101de4:	08101e7d 	.word	0x08101e7d
 8101de8:	08101e7d 	.word	0x08101e7d
 8101dec:	08101e7d 	.word	0x08101e7d
 8101df0:	08101e7d 	.word	0x08101e7d
 8101df4:	08101e6b 	.word	0x08101e6b
 8101df8:	08101e7d 	.word	0x08101e7d
 8101dfc:	08101e7d 	.word	0x08101e7d
 8101e00:	08101e7d 	.word	0x08101e7d
 8101e04:	08101e7d 	.word	0x08101e7d
 8101e08:	08101e7d 	.word	0x08101e7d
 8101e0c:	08101e7d 	.word	0x08101e7d
 8101e10:	08101e7d 	.word	0x08101e7d
 8101e14:	08101e83 	.word	0x08101e83
 8101e18:	08101e7d 	.word	0x08101e7d
 8101e1c:	08101e7d 	.word	0x08101e7d
 8101e20:	08101e7d 	.word	0x08101e7d
 8101e24:	08101e7d 	.word	0x08101e7d
 8101e28:	08101e7d 	.word	0x08101e7d
 8101e2c:	08101e7d 	.word	0x08101e7d
 8101e30:	08101e7d 	.word	0x08101e7d
 8101e34:	08101e83 	.word	0x08101e83
 8101e38:	08101e7d 	.word	0x08101e7d
 8101e3c:	08101e7d 	.word	0x08101e7d
 8101e40:	08101e7d 	.word	0x08101e7d
 8101e44:	08101e7d 	.word	0x08101e7d
 8101e48:	08101e7d 	.word	0x08101e7d
 8101e4c:	08101e7d 	.word	0x08101e7d
 8101e50:	08101e7d 	.word	0x08101e7d
 8101e54:	08101e83 	.word	0x08101e83
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	3304      	adds	r3, #4
 8101e5c:	2101      	movs	r1, #1
 8101e5e:	4618      	mov	r0, r3
 8101e60:	f000 fdf2 	bl	8102a48 <RCCEx_PLL2_Config>
 8101e64:	4603      	mov	r3, r0
 8101e66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101e68:	e00c      	b.n	8101e84 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101e6a:	687b      	ldr	r3, [r7, #4]
 8101e6c:	3324      	adds	r3, #36	; 0x24
 8101e6e:	2101      	movs	r1, #1
 8101e70:	4618      	mov	r0, r3
 8101e72:	f000 fe9b 	bl	8102bac <RCCEx_PLL3_Config>
 8101e76:	4603      	mov	r3, r0
 8101e78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8101e7a:	e003      	b.n	8101e84 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101e7c:	2301      	movs	r3, #1
 8101e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8101e80:	e000      	b.n	8101e84 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8101e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101e84:	7dfb      	ldrb	r3, [r7, #23]
 8101e86:	2b00      	cmp	r3, #0
 8101e88:	d109      	bne.n	8101e9e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8101e8a:	4b24      	ldr	r3, [pc, #144]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101e8e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8101e96:	4921      	ldr	r1, [pc, #132]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101e98:	4313      	orrs	r3, r2
 8101e9a:	654b      	str	r3, [r1, #84]	; 0x54
 8101e9c:	e001      	b.n	8101ea2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e9e:	7dfb      	ldrb	r3, [r7, #23]
 8101ea0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8101ea2:	687b      	ldr	r3, [r7, #4]
 8101ea4:	681b      	ldr	r3, [r3, #0]
 8101ea6:	f003 0302 	and.w	r3, r3, #2
 8101eaa:	2b00      	cmp	r3, #0
 8101eac:	d03c      	beq.n	8101f28 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8101eae:	687b      	ldr	r3, [r7, #4]
 8101eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101eb2:	2b05      	cmp	r3, #5
 8101eb4:	d820      	bhi.n	8101ef8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8101eb6:	a201      	add	r2, pc, #4	; (adr r2, 8101ebc <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8101eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101ebc:	08101eff 	.word	0x08101eff
 8101ec0:	08101ed5 	.word	0x08101ed5
 8101ec4:	08101ee7 	.word	0x08101ee7
 8101ec8:	08101eff 	.word	0x08101eff
 8101ecc:	08101eff 	.word	0x08101eff
 8101ed0:	08101eff 	.word	0x08101eff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101ed4:	687b      	ldr	r3, [r7, #4]
 8101ed6:	3304      	adds	r3, #4
 8101ed8:	2101      	movs	r1, #1
 8101eda:	4618      	mov	r0, r3
 8101edc:	f000 fdb4 	bl	8102a48 <RCCEx_PLL2_Config>
 8101ee0:	4603      	mov	r3, r0
 8101ee2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101ee4:	e00c      	b.n	8101f00 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101ee6:	687b      	ldr	r3, [r7, #4]
 8101ee8:	3324      	adds	r3, #36	; 0x24
 8101eea:	2101      	movs	r1, #1
 8101eec:	4618      	mov	r0, r3
 8101eee:	f000 fe5d 	bl	8102bac <RCCEx_PLL3_Config>
 8101ef2:	4603      	mov	r3, r0
 8101ef4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8101ef6:	e003      	b.n	8101f00 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101ef8:	2301      	movs	r3, #1
 8101efa:	75fb      	strb	r3, [r7, #23]
      break;
 8101efc:	e000      	b.n	8101f00 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8101efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f00:	7dfb      	ldrb	r3, [r7, #23]
 8101f02:	2b00      	cmp	r3, #0
 8101f04:	d10e      	bne.n	8101f24 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8101f06:	4b05      	ldr	r3, [pc, #20]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f0a:	f023 0207 	bic.w	r2, r3, #7
 8101f0e:	687b      	ldr	r3, [r7, #4]
 8101f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8101f12:	4902      	ldr	r1, [pc, #8]	; (8101f1c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8101f14:	4313      	orrs	r3, r2
 8101f16:	654b      	str	r3, [r1, #84]	; 0x54
 8101f18:	e006      	b.n	8101f28 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8101f1a:	bf00      	nop
 8101f1c:	58024400 	.word	0x58024400
 8101f20:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f24:	7dfb      	ldrb	r3, [r7, #23]
 8101f26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8101f28:	687b      	ldr	r3, [r7, #4]
 8101f2a:	681b      	ldr	r3, [r3, #0]
 8101f2c:	f003 0304 	and.w	r3, r3, #4
 8101f30:	2b00      	cmp	r3, #0
 8101f32:	d039      	beq.n	8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101f3a:	2b05      	cmp	r3, #5
 8101f3c:	d820      	bhi.n	8101f80 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8101f3e:	a201      	add	r2, pc, #4	; (adr r2, 8101f44 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8101f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101f44:	08101f87 	.word	0x08101f87
 8101f48:	08101f5d 	.word	0x08101f5d
 8101f4c:	08101f6f 	.word	0x08101f6f
 8101f50:	08101f87 	.word	0x08101f87
 8101f54:	08101f87 	.word	0x08101f87
 8101f58:	08101f87 	.word	0x08101f87
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	3304      	adds	r3, #4
 8101f60:	2101      	movs	r1, #1
 8101f62:	4618      	mov	r0, r3
 8101f64:	f000 fd70 	bl	8102a48 <RCCEx_PLL2_Config>
 8101f68:	4603      	mov	r3, r0
 8101f6a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101f6c:	e00c      	b.n	8101f88 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	3324      	adds	r3, #36	; 0x24
 8101f72:	2101      	movs	r1, #1
 8101f74:	4618      	mov	r0, r3
 8101f76:	f000 fe19 	bl	8102bac <RCCEx_PLL3_Config>
 8101f7a:	4603      	mov	r3, r0
 8101f7c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8101f7e:	e003      	b.n	8101f88 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101f80:	2301      	movs	r3, #1
 8101f82:	75fb      	strb	r3, [r7, #23]
      break;
 8101f84:	e000      	b.n	8101f88 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8101f86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f88:	7dfb      	ldrb	r3, [r7, #23]
 8101f8a:	2b00      	cmp	r3, #0
 8101f8c:	d10a      	bne.n	8101fa4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8101f8e:	4bb7      	ldr	r3, [pc, #732]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8101f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101f92:	f023 0207 	bic.w	r2, r3, #7
 8101f96:	687b      	ldr	r3, [r7, #4]
 8101f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8101f9c:	49b3      	ldr	r1, [pc, #716]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8101f9e:	4313      	orrs	r3, r2
 8101fa0:	658b      	str	r3, [r1, #88]	; 0x58
 8101fa2:	e001      	b.n	8101fa8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101fa4:	7dfb      	ldrb	r3, [r7, #23]
 8101fa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	f003 0320 	and.w	r3, r3, #32
 8101fb0:	2b00      	cmp	r3, #0
 8101fb2:	d04b      	beq.n	810204c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8101fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101fbe:	d02e      	beq.n	810201e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8101fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8101fc4:	d828      	bhi.n	8102018 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8101fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101fca:	d02a      	beq.n	8102022 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8101fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101fd0:	d822      	bhi.n	8102018 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8101fd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101fd6:	d026      	beq.n	8102026 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8101fd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101fdc:	d81c      	bhi.n	8102018 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8101fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101fe2:	d010      	beq.n	8102006 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8101fe4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101fe8:	d816      	bhi.n	8102018 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8101fea:	2b00      	cmp	r3, #0
 8101fec:	d01d      	beq.n	810202a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8101fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101ff2:	d111      	bne.n	8102018 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	3304      	adds	r3, #4
 8101ff8:	2100      	movs	r1, #0
 8101ffa:	4618      	mov	r0, r3
 8101ffc:	f000 fd24 	bl	8102a48 <RCCEx_PLL2_Config>
 8102000:	4603      	mov	r3, r0
 8102002:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102004:	e012      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	3324      	adds	r3, #36	; 0x24
 810200a:	2102      	movs	r1, #2
 810200c:	4618      	mov	r0, r3
 810200e:	f000 fdcd 	bl	8102bac <RCCEx_PLL3_Config>
 8102012:	4603      	mov	r3, r0
 8102014:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102016:	e009      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102018:	2301      	movs	r3, #1
 810201a:	75fb      	strb	r3, [r7, #23]
      break;
 810201c:	e006      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810201e:	bf00      	nop
 8102020:	e004      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102022:	bf00      	nop
 8102024:	e002      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102026:	bf00      	nop
 8102028:	e000      	b.n	810202c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810202a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810202c:	7dfb      	ldrb	r3, [r7, #23]
 810202e:	2b00      	cmp	r3, #0
 8102030:	d10a      	bne.n	8102048 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102032:	4b8e      	ldr	r3, [pc, #568]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102036:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810203a:	687b      	ldr	r3, [r7, #4]
 810203c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102040:	498a      	ldr	r1, [pc, #552]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102042:	4313      	orrs	r3, r2
 8102044:	654b      	str	r3, [r1, #84]	; 0x54
 8102046:	e001      	b.n	810204c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102048:	7dfb      	ldrb	r3, [r7, #23]
 810204a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	681b      	ldr	r3, [r3, #0]
 8102050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102054:	2b00      	cmp	r3, #0
 8102056:	d04b      	beq.n	81020f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102058:	687b      	ldr	r3, [r7, #4]
 810205a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810205e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102062:	d02e      	beq.n	81020c2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8102064:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102068:	d828      	bhi.n	81020bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810206a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810206e:	d02a      	beq.n	81020c6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8102070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102074:	d822      	bhi.n	81020bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102076:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810207a:	d026      	beq.n	81020ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810207c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102080:	d81c      	bhi.n	81020bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102086:	d010      	beq.n	81020aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8102088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810208c:	d816      	bhi.n	81020bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810208e:	2b00      	cmp	r3, #0
 8102090:	d01d      	beq.n	81020ce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8102092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102096:	d111      	bne.n	81020bc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102098:	687b      	ldr	r3, [r7, #4]
 810209a:	3304      	adds	r3, #4
 810209c:	2100      	movs	r1, #0
 810209e:	4618      	mov	r0, r3
 81020a0:	f000 fcd2 	bl	8102a48 <RCCEx_PLL2_Config>
 81020a4:	4603      	mov	r3, r0
 81020a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81020a8:	e012      	b.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	3324      	adds	r3, #36	; 0x24
 81020ae:	2102      	movs	r1, #2
 81020b0:	4618      	mov	r0, r3
 81020b2:	f000 fd7b 	bl	8102bac <RCCEx_PLL3_Config>
 81020b6:	4603      	mov	r3, r0
 81020b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81020ba:	e009      	b.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81020bc:	2301      	movs	r3, #1
 81020be:	75fb      	strb	r3, [r7, #23]
      break;
 81020c0:	e006      	b.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020c2:	bf00      	nop
 81020c4:	e004      	b.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020c6:	bf00      	nop
 81020c8:	e002      	b.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020ca:	bf00      	nop
 81020cc:	e000      	b.n	81020d0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81020ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 81020d0:	7dfb      	ldrb	r3, [r7, #23]
 81020d2:	2b00      	cmp	r3, #0
 81020d4:	d10a      	bne.n	81020ec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81020d6:	4b65      	ldr	r3, [pc, #404]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81020da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 81020de:	687b      	ldr	r3, [r7, #4]
 81020e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81020e4:	4961      	ldr	r1, [pc, #388]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81020e6:	4313      	orrs	r3, r2
 81020e8:	658b      	str	r3, [r1, #88]	; 0x58
 81020ea:	e001      	b.n	81020f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020ec:	7dfb      	ldrb	r3, [r7, #23]
 81020ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	681b      	ldr	r3, [r3, #0]
 81020f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81020f8:	2b00      	cmp	r3, #0
 81020fa:	d04b      	beq.n	8102194 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81020fc:	687b      	ldr	r3, [r7, #4]
 81020fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102102:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102106:	d02e      	beq.n	8102166 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8102108:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810210c:	d828      	bhi.n	8102160 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810210e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102112:	d02a      	beq.n	810216a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8102114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102118:	d822      	bhi.n	8102160 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810211a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810211e:	d026      	beq.n	810216e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8102120:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102124:	d81c      	bhi.n	8102160 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810212a:	d010      	beq.n	810214e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 810212c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102130:	d816      	bhi.n	8102160 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102132:	2b00      	cmp	r3, #0
 8102134:	d01d      	beq.n	8102172 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810213a:	d111      	bne.n	8102160 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	3304      	adds	r3, #4
 8102140:	2100      	movs	r1, #0
 8102142:	4618      	mov	r0, r3
 8102144:	f000 fc80 	bl	8102a48 <RCCEx_PLL2_Config>
 8102148:	4603      	mov	r3, r0
 810214a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810214c:	e012      	b.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	3324      	adds	r3, #36	; 0x24
 8102152:	2102      	movs	r1, #2
 8102154:	4618      	mov	r0, r3
 8102156:	f000 fd29 	bl	8102bac <RCCEx_PLL3_Config>
 810215a:	4603      	mov	r3, r0
 810215c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810215e:	e009      	b.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102160:	2301      	movs	r3, #1
 8102162:	75fb      	strb	r3, [r7, #23]
      break;
 8102164:	e006      	b.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102166:	bf00      	nop
 8102168:	e004      	b.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810216a:	bf00      	nop
 810216c:	e002      	b.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810216e:	bf00      	nop
 8102170:	e000      	b.n	8102174 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102174:	7dfb      	ldrb	r3, [r7, #23]
 8102176:	2b00      	cmp	r3, #0
 8102178:	d10a      	bne.n	8102190 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810217a:	4b3c      	ldr	r3, [pc, #240]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810217e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102188:	4938      	ldr	r1, [pc, #224]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810218a:	4313      	orrs	r3, r2
 810218c:	658b      	str	r3, [r1, #88]	; 0x58
 810218e:	e001      	b.n	8102194 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102190:	7dfb      	ldrb	r3, [r7, #23]
 8102192:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	681b      	ldr	r3, [r3, #0]
 8102198:	f003 0308 	and.w	r3, r3, #8
 810219c:	2b00      	cmp	r3, #0
 810219e:	d01a      	beq.n	81021d6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81021a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81021aa:	d10a      	bne.n	81021c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	3324      	adds	r3, #36	; 0x24
 81021b0:	2102      	movs	r1, #2
 81021b2:	4618      	mov	r0, r3
 81021b4:	f000 fcfa 	bl	8102bac <RCCEx_PLL3_Config>
 81021b8:	4603      	mov	r3, r0
 81021ba:	2b00      	cmp	r3, #0
 81021bc:	d001      	beq.n	81021c2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 81021be:	2301      	movs	r3, #1
 81021c0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81021c2:	4b2a      	ldr	r3, [pc, #168]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81021c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 81021ca:	687b      	ldr	r3, [r7, #4]
 81021cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81021d0:	4926      	ldr	r1, [pc, #152]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81021d2:	4313      	orrs	r3, r2
 81021d4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	681b      	ldr	r3, [r3, #0]
 81021da:	f003 0310 	and.w	r3, r3, #16
 81021de:	2b00      	cmp	r3, #0
 81021e0:	d01a      	beq.n	8102218 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81021e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81021ec:	d10a      	bne.n	8102204 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81021ee:	687b      	ldr	r3, [r7, #4]
 81021f0:	3324      	adds	r3, #36	; 0x24
 81021f2:	2102      	movs	r1, #2
 81021f4:	4618      	mov	r0, r3
 81021f6:	f000 fcd9 	bl	8102bac <RCCEx_PLL3_Config>
 81021fa:	4603      	mov	r3, r0
 81021fc:	2b00      	cmp	r3, #0
 81021fe:	d001      	beq.n	8102204 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8102200:	2301      	movs	r3, #1
 8102202:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102204:	4b19      	ldr	r3, [pc, #100]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810220c:	687b      	ldr	r3, [r7, #4]
 810220e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102212:	4916      	ldr	r1, [pc, #88]	; (810226c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102214:	4313      	orrs	r3, r2
 8102216:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102218:	687b      	ldr	r3, [r7, #4]
 810221a:	681b      	ldr	r3, [r3, #0]
 810221c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102220:	2b00      	cmp	r3, #0
 8102222:	d036      	beq.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102224:	687b      	ldr	r3, [r7, #4]
 8102226:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810222a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810222e:	d01f      	beq.n	8102270 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8102230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102234:	d817      	bhi.n	8102266 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8102236:	2b00      	cmp	r3, #0
 8102238:	d003      	beq.n	8102242 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810223a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810223e:	d009      	beq.n	8102254 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8102240:	e011      	b.n	8102266 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102242:	687b      	ldr	r3, [r7, #4]
 8102244:	3304      	adds	r3, #4
 8102246:	2100      	movs	r1, #0
 8102248:	4618      	mov	r0, r3
 810224a:	f000 fbfd 	bl	8102a48 <RCCEx_PLL2_Config>
 810224e:	4603      	mov	r3, r0
 8102250:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102252:	e00e      	b.n	8102272 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	3324      	adds	r3, #36	; 0x24
 8102258:	2102      	movs	r1, #2
 810225a:	4618      	mov	r0, r3
 810225c:	f000 fca6 	bl	8102bac <RCCEx_PLL3_Config>
 8102260:	4603      	mov	r3, r0
 8102262:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102264:	e005      	b.n	8102272 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102266:	2301      	movs	r3, #1
 8102268:	75fb      	strb	r3, [r7, #23]
      break;
 810226a:	e002      	b.n	8102272 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 810226c:	58024400 	.word	0x58024400
      break;
 8102270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102272:	7dfb      	ldrb	r3, [r7, #23]
 8102274:	2b00      	cmp	r3, #0
 8102276:	d10a      	bne.n	810228e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102278:	4b93      	ldr	r3, [pc, #588]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810227c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8102280:	687b      	ldr	r3, [r7, #4]
 8102282:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102286:	4990      	ldr	r1, [pc, #576]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102288:	4313      	orrs	r3, r2
 810228a:	658b      	str	r3, [r1, #88]	; 0x58
 810228c:	e001      	b.n	8102292 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810228e:	7dfb      	ldrb	r3, [r7, #23]
 8102290:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	681b      	ldr	r3, [r3, #0]
 8102296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810229a:	2b00      	cmp	r3, #0
 810229c:	d033      	beq.n	8102306 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810229e:	687b      	ldr	r3, [r7, #4]
 81022a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81022a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81022a8:	d01c      	beq.n	81022e4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 81022aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81022ae:	d816      	bhi.n	81022de <HAL_RCCEx_PeriphCLKConfig+0xc92>
 81022b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81022b4:	d003      	beq.n	81022be <HAL_RCCEx_PeriphCLKConfig+0xc72>
 81022b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81022ba:	d007      	beq.n	81022cc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 81022bc:	e00f      	b.n	81022de <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81022be:	4b82      	ldr	r3, [pc, #520]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81022c2:	4a81      	ldr	r2, [pc, #516]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 81022ca:	e00c      	b.n	81022e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	3324      	adds	r3, #36	; 0x24
 81022d0:	2101      	movs	r1, #1
 81022d2:	4618      	mov	r0, r3
 81022d4:	f000 fc6a 	bl	8102bac <RCCEx_PLL3_Config>
 81022d8:	4603      	mov	r3, r0
 81022da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 81022dc:	e003      	b.n	81022e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81022de:	2301      	movs	r3, #1
 81022e0:	75fb      	strb	r3, [r7, #23]
      break;
 81022e2:	e000      	b.n	81022e6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 81022e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81022e6:	7dfb      	ldrb	r3, [r7, #23]
 81022e8:	2b00      	cmp	r3, #0
 81022ea:	d10a      	bne.n	8102302 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81022ec:	4b76      	ldr	r3, [pc, #472]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81022fa:	4973      	ldr	r1, [pc, #460]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81022fc:	4313      	orrs	r3, r2
 81022fe:	654b      	str	r3, [r1, #84]	; 0x54
 8102300:	e001      	b.n	8102306 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102302:	7dfb      	ldrb	r3, [r7, #23]
 8102304:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	681b      	ldr	r3, [r3, #0]
 810230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810230e:	2b00      	cmp	r3, #0
 8102310:	d029      	beq.n	8102366 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102316:	2b00      	cmp	r3, #0
 8102318:	d003      	beq.n	8102322 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810231a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810231e:	d007      	beq.n	8102330 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8102320:	e00f      	b.n	8102342 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102322:	4b69      	ldr	r3, [pc, #420]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102326:	4a68      	ldr	r2, [pc, #416]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810232c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810232e:	e00b      	b.n	8102348 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	3304      	adds	r3, #4
 8102334:	2102      	movs	r1, #2
 8102336:	4618      	mov	r0, r3
 8102338:	f000 fb86 	bl	8102a48 <RCCEx_PLL2_Config>
 810233c:	4603      	mov	r3, r0
 810233e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102340:	e002      	b.n	8102348 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8102342:	2301      	movs	r3, #1
 8102344:	75fb      	strb	r3, [r7, #23]
      break;
 8102346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102348:	7dfb      	ldrb	r3, [r7, #23]
 810234a:	2b00      	cmp	r3, #0
 810234c:	d109      	bne.n	8102362 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810234e:	4b5e      	ldr	r3, [pc, #376]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102352:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102356:	687b      	ldr	r3, [r7, #4]
 8102358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810235a:	495b      	ldr	r1, [pc, #364]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810235c:	4313      	orrs	r3, r2
 810235e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102360:	e001      	b.n	8102366 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102362:	7dfb      	ldrb	r3, [r7, #23]
 8102364:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810236e:	2b00      	cmp	r3, #0
 8102370:	d00a      	beq.n	8102388 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	3324      	adds	r3, #36	; 0x24
 8102376:	2102      	movs	r1, #2
 8102378:	4618      	mov	r0, r3
 810237a:	f000 fc17 	bl	8102bac <RCCEx_PLL3_Config>
 810237e:	4603      	mov	r3, r0
 8102380:	2b00      	cmp	r3, #0
 8102382:	d001      	beq.n	8102388 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8102384:	2301      	movs	r3, #1
 8102386:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	681b      	ldr	r3, [r3, #0]
 810238c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102390:	2b00      	cmp	r3, #0
 8102392:	d030      	beq.n	81023f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810239c:	d017      	beq.n	81023ce <HAL_RCCEx_PeriphCLKConfig+0xd82>
 810239e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81023a2:	d811      	bhi.n	81023c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81023a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81023a8:	d013      	beq.n	81023d2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81023aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81023ae:	d80b      	bhi.n	81023c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81023b0:	2b00      	cmp	r3, #0
 81023b2:	d010      	beq.n	81023d6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81023b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81023b8:	d106      	bne.n	81023c8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023ba:	4b43      	ldr	r3, [pc, #268]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023be:	4a42      	ldr	r2, [pc, #264]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81023c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81023c6:	e007      	b.n	81023d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81023c8:	2301      	movs	r3, #1
 81023ca:	75fb      	strb	r3, [r7, #23]
      break;
 81023cc:	e004      	b.n	81023d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81023ce:	bf00      	nop
 81023d0:	e002      	b.n	81023d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81023d2:	bf00      	nop
 81023d4:	e000      	b.n	81023d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 81023d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81023d8:	7dfb      	ldrb	r3, [r7, #23]
 81023da:	2b00      	cmp	r3, #0
 81023dc:	d109      	bne.n	81023f2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81023de:	4b3a      	ldr	r3, [pc, #232]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81023e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81023ea:	4937      	ldr	r1, [pc, #220]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81023ec:	4313      	orrs	r3, r2
 81023ee:	654b      	str	r3, [r1, #84]	; 0x54
 81023f0:	e001      	b.n	81023f6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023f2:	7dfb      	ldrb	r3, [r7, #23]
 81023f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	681b      	ldr	r3, [r3, #0]
 81023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81023fe:	2b00      	cmp	r3, #0
 8102400:	d008      	beq.n	8102414 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102402:	4b31      	ldr	r3, [pc, #196]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102406:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810240e:	492e      	ldr	r1, [pc, #184]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102410:	4313      	orrs	r3, r2
 8102412:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102414:	687b      	ldr	r3, [r7, #4]
 8102416:	681b      	ldr	r3, [r3, #0]
 8102418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810241c:	2b00      	cmp	r3, #0
 810241e:	d009      	beq.n	8102434 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102420:	4b29      	ldr	r3, [pc, #164]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102422:	691b      	ldr	r3, [r3, #16]
 8102424:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810242e:	4926      	ldr	r1, [pc, #152]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102430:	4313      	orrs	r3, r2
 8102432:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810243c:	2b00      	cmp	r3, #0
 810243e:	d008      	beq.n	8102452 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102440:	4b21      	ldr	r3, [pc, #132]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102444:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810244c:	491e      	ldr	r1, [pc, #120]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810244e:	4313      	orrs	r3, r2
 8102450:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	681b      	ldr	r3, [r3, #0]
 8102456:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810245a:	2b00      	cmp	r3, #0
 810245c:	d00d      	beq.n	810247a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810245e:	4b1a      	ldr	r3, [pc, #104]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102460:	691b      	ldr	r3, [r3, #16]
 8102462:	4a19      	ldr	r2, [pc, #100]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102468:	6113      	str	r3, [r2, #16]
 810246a:	4b17      	ldr	r3, [pc, #92]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810246c:	691a      	ldr	r2, [r3, #16]
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102474:	4914      	ldr	r1, [pc, #80]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102476:	4313      	orrs	r3, r2
 8102478:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	681b      	ldr	r3, [r3, #0]
 810247e:	2b00      	cmp	r3, #0
 8102480:	da08      	bge.n	8102494 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102482:	4b11      	ldr	r3, [pc, #68]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102486:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810248e:	490e      	ldr	r1, [pc, #56]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102490:	4313      	orrs	r3, r2
 8102492:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	681b      	ldr	r3, [r3, #0]
 8102498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810249c:	2b00      	cmp	r3, #0
 810249e:	d009      	beq.n	81024b4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81024a0:	4b09      	ldr	r3, [pc, #36]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81024ae:	4906      	ldr	r1, [pc, #24]	; (81024c8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81024b0:	4313      	orrs	r3, r2
 81024b2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81024b4:	7dbb      	ldrb	r3, [r7, #22]
 81024b6:	2b00      	cmp	r3, #0
 81024b8:	d101      	bne.n	81024be <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 81024ba:	2300      	movs	r3, #0
 81024bc:	e000      	b.n	81024c0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 81024be:	2301      	movs	r3, #1
}
 81024c0:	4618      	mov	r0, r3
 81024c2:	3718      	adds	r7, #24
 81024c4:	46bd      	mov	sp, r7
 81024c6:	bd80      	pop	{r7, pc}
 81024c8:	58024400 	.word	0x58024400

081024cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81024cc:	b580      	push	{r7, lr}
 81024ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81024d0:	f7ff f85e 	bl	8101590 <HAL_RCC_GetHCLKFreq>
 81024d4:	4602      	mov	r2, r0
 81024d6:	4b06      	ldr	r3, [pc, #24]	; (81024f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81024d8:	6a1b      	ldr	r3, [r3, #32]
 81024da:	091b      	lsrs	r3, r3, #4
 81024dc:	f003 0307 	and.w	r3, r3, #7
 81024e0:	4904      	ldr	r1, [pc, #16]	; (81024f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81024e2:	5ccb      	ldrb	r3, [r1, r3]
 81024e4:	f003 031f 	and.w	r3, r3, #31
 81024e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81024ec:	4618      	mov	r0, r3
 81024ee:	bd80      	pop	{r7, pc}
 81024f0:	58024400 	.word	0x58024400
 81024f4:	08103f7c 	.word	0x08103f7c

081024f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81024f8:	b480      	push	{r7}
 81024fa:	b089      	sub	sp, #36	; 0x24
 81024fc:	af00      	add	r7, sp, #0
 81024fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102500:	4ba1      	ldr	r3, [pc, #644]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102504:	f003 0303 	and.w	r3, r3, #3
 8102508:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810250a:	4b9f      	ldr	r3, [pc, #636]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810250e:	0b1b      	lsrs	r3, r3, #12
 8102510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102514:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8102516:	4b9c      	ldr	r3, [pc, #624]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810251a:	091b      	lsrs	r3, r3, #4
 810251c:	f003 0301 	and.w	r3, r3, #1
 8102520:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8102522:	4b99      	ldr	r3, [pc, #612]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102526:	08db      	lsrs	r3, r3, #3
 8102528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810252c:	693a      	ldr	r2, [r7, #16]
 810252e:	fb02 f303 	mul.w	r3, r2, r3
 8102532:	ee07 3a90 	vmov	s15, r3
 8102536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810253a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810253e:	697b      	ldr	r3, [r7, #20]
 8102540:	2b00      	cmp	r3, #0
 8102542:	f000 8111 	beq.w	8102768 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102546:	69bb      	ldr	r3, [r7, #24]
 8102548:	2b02      	cmp	r3, #2
 810254a:	f000 8083 	beq.w	8102654 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810254e:	69bb      	ldr	r3, [r7, #24]
 8102550:	2b02      	cmp	r3, #2
 8102552:	f200 80a1 	bhi.w	8102698 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102556:	69bb      	ldr	r3, [r7, #24]
 8102558:	2b00      	cmp	r3, #0
 810255a:	d003      	beq.n	8102564 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810255c:	69bb      	ldr	r3, [r7, #24]
 810255e:	2b01      	cmp	r3, #1
 8102560:	d056      	beq.n	8102610 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102562:	e099      	b.n	8102698 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102564:	4b88      	ldr	r3, [pc, #544]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	f003 0320 	and.w	r3, r3, #32
 810256c:	2b00      	cmp	r3, #0
 810256e:	d02d      	beq.n	81025cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102570:	4b85      	ldr	r3, [pc, #532]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	08db      	lsrs	r3, r3, #3
 8102576:	f003 0303 	and.w	r3, r3, #3
 810257a:	4a84      	ldr	r2, [pc, #528]	; (810278c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810257c:	fa22 f303 	lsr.w	r3, r2, r3
 8102580:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102582:	68bb      	ldr	r3, [r7, #8]
 8102584:	ee07 3a90 	vmov	s15, r3
 8102588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810258c:	697b      	ldr	r3, [r7, #20]
 810258e:	ee07 3a90 	vmov	s15, r3
 8102592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810259a:	4b7b      	ldr	r3, [pc, #492]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810259e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81025a2:	ee07 3a90 	vmov	s15, r3
 81025a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81025aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81025ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81025b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81025b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81025ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81025be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81025c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81025c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81025ca:	e087      	b.n	81026dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81025cc:	697b      	ldr	r3, [r7, #20]
 81025ce:	ee07 3a90 	vmov	s15, r3
 81025d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81025d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102794 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81025da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81025de:	4b6a      	ldr	r3, [pc, #424]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81025e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81025e6:	ee07 3a90 	vmov	s15, r3
 81025ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81025ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81025f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81025f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81025fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81025fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102606:	ee67 7a27 	vmul.f32	s15, s14, s15
 810260a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810260e:	e065      	b.n	81026dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102610:	697b      	ldr	r3, [r7, #20]
 8102612:	ee07 3a90 	vmov	s15, r3
 8102616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810261a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810261e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102622:	4b59      	ldr	r3, [pc, #356]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810262a:	ee07 3a90 	vmov	s15, r3
 810262e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102632:	ed97 6a03 	vldr	s12, [r7, #12]
 8102636:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810263a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810263e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810264a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810264e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102652:	e043      	b.n	81026dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102654:	697b      	ldr	r3, [r7, #20]
 8102656:	ee07 3a90 	vmov	s15, r3
 810265a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810265e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810279c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8102662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102666:	4b48      	ldr	r3, [pc, #288]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810266a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810266e:	ee07 3a90 	vmov	s15, r3
 8102672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102676:	ed97 6a03 	vldr	s12, [r7, #12]
 810267a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810267e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810268a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810268e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102692:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102696:	e021      	b.n	81026dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102698:	697b      	ldr	r3, [r7, #20]
 810269a:	ee07 3a90 	vmov	s15, r3
 810269e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81026a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81026a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81026aa:	4b37      	ldr	r3, [pc, #220]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81026ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81026b2:	ee07 3a90 	vmov	s15, r3
 81026b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81026ba:	ed97 6a03 	vldr	s12, [r7, #12]
 81026be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81026c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81026c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81026ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81026ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81026d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81026d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81026da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81026dc:	4b2a      	ldr	r3, [pc, #168]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81026e0:	0a5b      	lsrs	r3, r3, #9
 81026e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81026e6:	ee07 3a90 	vmov	s15, r3
 81026ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81026ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81026f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81026f6:	edd7 6a07 	vldr	s13, [r7, #28]
 81026fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81026fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102702:	ee17 2a90 	vmov	r2, s15
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810270a:	4b1f      	ldr	r3, [pc, #124]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810270e:	0c1b      	lsrs	r3, r3, #16
 8102710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102714:	ee07 3a90 	vmov	s15, r3
 8102718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810271c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102720:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102724:	edd7 6a07 	vldr	s13, [r7, #28]
 8102728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810272c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102730:	ee17 2a90 	vmov	r2, s15
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8102738:	4b13      	ldr	r3, [pc, #76]	; (8102788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810273c:	0e1b      	lsrs	r3, r3, #24
 810273e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102742:	ee07 3a90 	vmov	s15, r3
 8102746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810274a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810274e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102752:	edd7 6a07 	vldr	s13, [r7, #28]
 8102756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810275a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810275e:	ee17 2a90 	vmov	r2, s15
 8102762:	687b      	ldr	r3, [r7, #4]
 8102764:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102766:	e008      	b.n	810277a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102768:	687b      	ldr	r3, [r7, #4]
 810276a:	2200      	movs	r2, #0
 810276c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	2200      	movs	r2, #0
 8102772:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8102774:	687b      	ldr	r3, [r7, #4]
 8102776:	2200      	movs	r2, #0
 8102778:	609a      	str	r2, [r3, #8]
}
 810277a:	bf00      	nop
 810277c:	3724      	adds	r7, #36	; 0x24
 810277e:	46bd      	mov	sp, r7
 8102780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102784:	4770      	bx	lr
 8102786:	bf00      	nop
 8102788:	58024400 	.word	0x58024400
 810278c:	03d09000 	.word	0x03d09000
 8102790:	46000000 	.word	0x46000000
 8102794:	4c742400 	.word	0x4c742400
 8102798:	4a742400 	.word	0x4a742400
 810279c:	4bbebc20 	.word	0x4bbebc20

081027a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81027a0:	b480      	push	{r7}
 81027a2:	b089      	sub	sp, #36	; 0x24
 81027a4:	af00      	add	r7, sp, #0
 81027a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81027a8:	4ba1      	ldr	r3, [pc, #644]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027ac:	f003 0303 	and.w	r3, r3, #3
 81027b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81027b2:	4b9f      	ldr	r3, [pc, #636]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027b6:	0d1b      	lsrs	r3, r3, #20
 81027b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81027bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81027be:	4b9c      	ldr	r3, [pc, #624]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027c2:	0a1b      	lsrs	r3, r3, #8
 81027c4:	f003 0301 	and.w	r3, r3, #1
 81027c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81027ca:	4b99      	ldr	r3, [pc, #612]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81027ce:	08db      	lsrs	r3, r3, #3
 81027d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81027d4:	693a      	ldr	r2, [r7, #16]
 81027d6:	fb02 f303 	mul.w	r3, r2, r3
 81027da:	ee07 3a90 	vmov	s15, r3
 81027de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81027e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81027e6:	697b      	ldr	r3, [r7, #20]
 81027e8:	2b00      	cmp	r3, #0
 81027ea:	f000 8111 	beq.w	8102a10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81027ee:	69bb      	ldr	r3, [r7, #24]
 81027f0:	2b02      	cmp	r3, #2
 81027f2:	f000 8083 	beq.w	81028fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81027f6:	69bb      	ldr	r3, [r7, #24]
 81027f8:	2b02      	cmp	r3, #2
 81027fa:	f200 80a1 	bhi.w	8102940 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81027fe:	69bb      	ldr	r3, [r7, #24]
 8102800:	2b00      	cmp	r3, #0
 8102802:	d003      	beq.n	810280c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8102804:	69bb      	ldr	r3, [r7, #24]
 8102806:	2b01      	cmp	r3, #1
 8102808:	d056      	beq.n	81028b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810280a:	e099      	b.n	8102940 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810280c:	4b88      	ldr	r3, [pc, #544]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	f003 0320 	and.w	r3, r3, #32
 8102814:	2b00      	cmp	r3, #0
 8102816:	d02d      	beq.n	8102874 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102818:	4b85      	ldr	r3, [pc, #532]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810281a:	681b      	ldr	r3, [r3, #0]
 810281c:	08db      	lsrs	r3, r3, #3
 810281e:	f003 0303 	and.w	r3, r3, #3
 8102822:	4a84      	ldr	r2, [pc, #528]	; (8102a34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8102824:	fa22 f303 	lsr.w	r3, r2, r3
 8102828:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810282a:	68bb      	ldr	r3, [r7, #8]
 810282c:	ee07 3a90 	vmov	s15, r3
 8102830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102834:	697b      	ldr	r3, [r7, #20]
 8102836:	ee07 3a90 	vmov	s15, r3
 810283a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810283e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102842:	4b7b      	ldr	r3, [pc, #492]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810284a:	ee07 3a90 	vmov	s15, r3
 810284e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102852:	ed97 6a03 	vldr	s12, [r7, #12]
 8102856:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810285a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810285e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810286e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8102872:	e087      	b.n	8102984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102874:	697b      	ldr	r3, [r7, #20]
 8102876:	ee07 3a90 	vmov	s15, r3
 810287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810287e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102a3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8102882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102886:	4b6a      	ldr	r3, [pc, #424]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810288a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810288e:	ee07 3a90 	vmov	s15, r3
 8102892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102896:	ed97 6a03 	vldr	s12, [r7, #12]
 810289a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810289e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81028b6:	e065      	b.n	8102984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81028b8:	697b      	ldr	r3, [r7, #20]
 81028ba:	ee07 3a90 	vmov	s15, r3
 81028be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81028c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028ca:	4b59      	ldr	r3, [pc, #356]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81028ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028d2:	ee07 3a90 	vmov	s15, r3
 81028d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028da:	ed97 6a03 	vldr	s12, [r7, #12]
 81028de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81028e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81028fa:	e043      	b.n	8102984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81028fc:	697b      	ldr	r3, [r7, #20]
 81028fe:	ee07 3a90 	vmov	s15, r3
 8102902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102906:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8102a44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810290a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810290e:	4b48      	ldr	r3, [pc, #288]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102916:	ee07 3a90 	vmov	s15, r3
 810291a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810291e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102922:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810292a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810292e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102936:	ee67 7a27 	vmul.f32	s15, s14, s15
 810293a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810293e:	e021      	b.n	8102984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102940:	697b      	ldr	r3, [r7, #20]
 8102942:	ee07 3a90 	vmov	s15, r3
 8102946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810294a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810294e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102952:	4b37      	ldr	r3, [pc, #220]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810295a:	ee07 3a90 	vmov	s15, r3
 810295e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102962:	ed97 6a03 	vldr	s12, [r7, #12]
 8102966:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810296a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810296e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810297a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810297e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102982:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8102984:	4b2a      	ldr	r3, [pc, #168]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102988:	0a5b      	lsrs	r3, r3, #9
 810298a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810298e:	ee07 3a90 	vmov	s15, r3
 8102992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810299a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810299e:	edd7 6a07 	vldr	s13, [r7, #28]
 81029a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81029aa:	ee17 2a90 	vmov	r2, s15
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81029b2:	4b1f      	ldr	r3, [pc, #124]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81029b6:	0c1b      	lsrs	r3, r3, #16
 81029b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81029bc:	ee07 3a90 	vmov	s15, r3
 81029c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81029c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81029cc:	edd7 6a07 	vldr	s13, [r7, #28]
 81029d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81029d8:	ee17 2a90 	vmov	r2, s15
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81029e0:	4b13      	ldr	r3, [pc, #76]	; (8102a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81029e4:	0e1b      	lsrs	r3, r3, #24
 81029e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81029ea:	ee07 3a90 	vmov	s15, r3
 81029ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81029f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81029fa:	edd7 6a07 	vldr	s13, [r7, #28]
 81029fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a06:	ee17 2a90 	vmov	r2, s15
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8102a0e:	e008      	b.n	8102a22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	2200      	movs	r2, #0
 8102a14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8102a16:	687b      	ldr	r3, [r7, #4]
 8102a18:	2200      	movs	r2, #0
 8102a1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	2200      	movs	r2, #0
 8102a20:	609a      	str	r2, [r3, #8]
}
 8102a22:	bf00      	nop
 8102a24:	3724      	adds	r7, #36	; 0x24
 8102a26:	46bd      	mov	sp, r7
 8102a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a2c:	4770      	bx	lr
 8102a2e:	bf00      	nop
 8102a30:	58024400 	.word	0x58024400
 8102a34:	03d09000 	.word	0x03d09000
 8102a38:	46000000 	.word	0x46000000
 8102a3c:	4c742400 	.word	0x4c742400
 8102a40:	4a742400 	.word	0x4a742400
 8102a44:	4bbebc20 	.word	0x4bbebc20

08102a48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102a48:	b580      	push	{r7, lr}
 8102a4a:	b084      	sub	sp, #16
 8102a4c:	af00      	add	r7, sp, #0
 8102a4e:	6078      	str	r0, [r7, #4]
 8102a50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102a52:	2300      	movs	r3, #0
 8102a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102a56:	4b54      	ldr	r3, [pc, #336]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102a5a:	f003 0303 	and.w	r3, r3, #3
 8102a5e:	2b03      	cmp	r3, #3
 8102a60:	d101      	bne.n	8102a66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102a62:	2301      	movs	r3, #1
 8102a64:	e09b      	b.n	8102b9e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102a66:	4b50      	ldr	r3, [pc, #320]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102a68:	681b      	ldr	r3, [r3, #0]
 8102a6a:	4a4f      	ldr	r2, [pc, #316]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102a6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8102a70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102a72:	f7fd ffff 	bl	8100a74 <HAL_GetTick>
 8102a76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102a78:	e008      	b.n	8102a8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102a7a:	f7fd fffb 	bl	8100a74 <HAL_GetTick>
 8102a7e:	4602      	mov	r2, r0
 8102a80:	68bb      	ldr	r3, [r7, #8]
 8102a82:	1ad3      	subs	r3, r2, r3
 8102a84:	2b02      	cmp	r3, #2
 8102a86:	d901      	bls.n	8102a8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102a88:	2303      	movs	r3, #3
 8102a8a:	e088      	b.n	8102b9e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102a8c:	4b46      	ldr	r3, [pc, #280]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102a8e:	681b      	ldr	r3, [r3, #0]
 8102a90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102a94:	2b00      	cmp	r3, #0
 8102a96:	d1f0      	bne.n	8102a7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102a98:	4b43      	ldr	r3, [pc, #268]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102a9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8102aa0:	687b      	ldr	r3, [r7, #4]
 8102aa2:	681b      	ldr	r3, [r3, #0]
 8102aa4:	031b      	lsls	r3, r3, #12
 8102aa6:	4940      	ldr	r1, [pc, #256]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102aa8:	4313      	orrs	r3, r2
 8102aaa:	628b      	str	r3, [r1, #40]	; 0x28
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	685b      	ldr	r3, [r3, #4]
 8102ab0:	3b01      	subs	r3, #1
 8102ab2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	689b      	ldr	r3, [r3, #8]
 8102aba:	3b01      	subs	r3, #1
 8102abc:	025b      	lsls	r3, r3, #9
 8102abe:	b29b      	uxth	r3, r3
 8102ac0:	431a      	orrs	r2, r3
 8102ac2:	687b      	ldr	r3, [r7, #4]
 8102ac4:	68db      	ldr	r3, [r3, #12]
 8102ac6:	3b01      	subs	r3, #1
 8102ac8:	041b      	lsls	r3, r3, #16
 8102aca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102ace:	431a      	orrs	r2, r3
 8102ad0:	687b      	ldr	r3, [r7, #4]
 8102ad2:	691b      	ldr	r3, [r3, #16]
 8102ad4:	3b01      	subs	r3, #1
 8102ad6:	061b      	lsls	r3, r3, #24
 8102ad8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102adc:	4932      	ldr	r1, [pc, #200]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102ade:	4313      	orrs	r3, r2
 8102ae0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102ae2:	4b31      	ldr	r3, [pc, #196]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ae6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8102aea:	687b      	ldr	r3, [r7, #4]
 8102aec:	695b      	ldr	r3, [r3, #20]
 8102aee:	492e      	ldr	r1, [pc, #184]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102af0:	4313      	orrs	r3, r2
 8102af2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102af4:	4b2c      	ldr	r3, [pc, #176]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102af8:	f023 0220 	bic.w	r2, r3, #32
 8102afc:	687b      	ldr	r3, [r7, #4]
 8102afe:	699b      	ldr	r3, [r3, #24]
 8102b00:	4929      	ldr	r1, [pc, #164]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b02:	4313      	orrs	r3, r2
 8102b04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102b06:	4b28      	ldr	r3, [pc, #160]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b0a:	4a27      	ldr	r2, [pc, #156]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b0c:	f023 0310 	bic.w	r3, r3, #16
 8102b10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102b12:	4b25      	ldr	r3, [pc, #148]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102b16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102b1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102b1e:	687a      	ldr	r2, [r7, #4]
 8102b20:	69d2      	ldr	r2, [r2, #28]
 8102b22:	00d2      	lsls	r2, r2, #3
 8102b24:	4920      	ldr	r1, [pc, #128]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b26:	4313      	orrs	r3, r2
 8102b28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102b2a:	4b1f      	ldr	r3, [pc, #124]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b2e:	4a1e      	ldr	r2, [pc, #120]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b30:	f043 0310 	orr.w	r3, r3, #16
 8102b34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102b36:	683b      	ldr	r3, [r7, #0]
 8102b38:	2b00      	cmp	r3, #0
 8102b3a:	d106      	bne.n	8102b4a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102b3c:	4b1a      	ldr	r3, [pc, #104]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b40:	4a19      	ldr	r2, [pc, #100]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8102b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102b48:	e00f      	b.n	8102b6a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102b4a:	683b      	ldr	r3, [r7, #0]
 8102b4c:	2b01      	cmp	r3, #1
 8102b4e:	d106      	bne.n	8102b5e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102b50:	4b15      	ldr	r3, [pc, #84]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b54:	4a14      	ldr	r2, [pc, #80]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102b5c:	e005      	b.n	8102b6a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8102b5e:	4b12      	ldr	r3, [pc, #72]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b62:	4a11      	ldr	r2, [pc, #68]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102b68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102b6a:	4b0f      	ldr	r3, [pc, #60]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b6c:	681b      	ldr	r3, [r3, #0]
 8102b6e:	4a0e      	ldr	r2, [pc, #56]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102b76:	f7fd ff7d 	bl	8100a74 <HAL_GetTick>
 8102b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102b7c:	e008      	b.n	8102b90 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8102b7e:	f7fd ff79 	bl	8100a74 <HAL_GetTick>
 8102b82:	4602      	mov	r2, r0
 8102b84:	68bb      	ldr	r3, [r7, #8]
 8102b86:	1ad3      	subs	r3, r2, r3
 8102b88:	2b02      	cmp	r3, #2
 8102b8a:	d901      	bls.n	8102b90 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102b8c:	2303      	movs	r3, #3
 8102b8e:	e006      	b.n	8102b9e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8102b90:	4b05      	ldr	r3, [pc, #20]	; (8102ba8 <RCCEx_PLL2_Config+0x160>)
 8102b92:	681b      	ldr	r3, [r3, #0]
 8102b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102b98:	2b00      	cmp	r3, #0
 8102b9a:	d0f0      	beq.n	8102b7e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8102b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8102b9e:	4618      	mov	r0, r3
 8102ba0:	3710      	adds	r7, #16
 8102ba2:	46bd      	mov	sp, r7
 8102ba4:	bd80      	pop	{r7, pc}
 8102ba6:	bf00      	nop
 8102ba8:	58024400 	.word	0x58024400

08102bac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8102bac:	b580      	push	{r7, lr}
 8102bae:	b084      	sub	sp, #16
 8102bb0:	af00      	add	r7, sp, #0
 8102bb2:	6078      	str	r0, [r7, #4]
 8102bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102bb6:	2300      	movs	r3, #0
 8102bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102bba:	4b54      	ldr	r3, [pc, #336]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102bbe:	f003 0303 	and.w	r3, r3, #3
 8102bc2:	2b03      	cmp	r3, #3
 8102bc4:	d101      	bne.n	8102bca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8102bc6:	2301      	movs	r3, #1
 8102bc8:	e09b      	b.n	8102d02 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8102bca:	4b50      	ldr	r3, [pc, #320]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	4a4f      	ldr	r2, [pc, #316]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8102bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102bd6:	f7fd ff4d 	bl	8100a74 <HAL_GetTick>
 8102bda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102bdc:	e008      	b.n	8102bf0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102bde:	f7fd ff49 	bl	8100a74 <HAL_GetTick>
 8102be2:	4602      	mov	r2, r0
 8102be4:	68bb      	ldr	r3, [r7, #8]
 8102be6:	1ad3      	subs	r3, r2, r3
 8102be8:	2b02      	cmp	r3, #2
 8102bea:	d901      	bls.n	8102bf0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102bec:	2303      	movs	r3, #3
 8102bee:	e088      	b.n	8102d02 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8102bf0:	4b46      	ldr	r3, [pc, #280]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102bf2:	681b      	ldr	r3, [r3, #0]
 8102bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102bf8:	2b00      	cmp	r3, #0
 8102bfa:	d1f0      	bne.n	8102bde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8102bfc:	4b43      	ldr	r3, [pc, #268]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102c00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8102c04:	687b      	ldr	r3, [r7, #4]
 8102c06:	681b      	ldr	r3, [r3, #0]
 8102c08:	051b      	lsls	r3, r3, #20
 8102c0a:	4940      	ldr	r1, [pc, #256]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c0c:	4313      	orrs	r3, r2
 8102c0e:	628b      	str	r3, [r1, #40]	; 0x28
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	685b      	ldr	r3, [r3, #4]
 8102c14:	3b01      	subs	r3, #1
 8102c16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102c1a:	687b      	ldr	r3, [r7, #4]
 8102c1c:	689b      	ldr	r3, [r3, #8]
 8102c1e:	3b01      	subs	r3, #1
 8102c20:	025b      	lsls	r3, r3, #9
 8102c22:	b29b      	uxth	r3, r3
 8102c24:	431a      	orrs	r2, r3
 8102c26:	687b      	ldr	r3, [r7, #4]
 8102c28:	68db      	ldr	r3, [r3, #12]
 8102c2a:	3b01      	subs	r3, #1
 8102c2c:	041b      	lsls	r3, r3, #16
 8102c2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8102c32:	431a      	orrs	r2, r3
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	691b      	ldr	r3, [r3, #16]
 8102c38:	3b01      	subs	r3, #1
 8102c3a:	061b      	lsls	r3, r3, #24
 8102c3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8102c40:	4932      	ldr	r1, [pc, #200]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c42:	4313      	orrs	r3, r2
 8102c44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8102c46:	4b31      	ldr	r3, [pc, #196]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	695b      	ldr	r3, [r3, #20]
 8102c52:	492e      	ldr	r1, [pc, #184]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c54:	4313      	orrs	r3, r2
 8102c56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8102c58:	4b2c      	ldr	r3, [pc, #176]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	699b      	ldr	r3, [r3, #24]
 8102c64:	4929      	ldr	r1, [pc, #164]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c66:	4313      	orrs	r3, r2
 8102c68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8102c6a:	4b28      	ldr	r3, [pc, #160]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c6e:	4a27      	ldr	r2, [pc, #156]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102c74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8102c76:	4b25      	ldr	r3, [pc, #148]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102c7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8102c82:	687a      	ldr	r2, [r7, #4]
 8102c84:	69d2      	ldr	r2, [r2, #28]
 8102c86:	00d2      	lsls	r2, r2, #3
 8102c88:	4920      	ldr	r1, [pc, #128]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c8a:	4313      	orrs	r3, r2
 8102c8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8102c8e:	4b1f      	ldr	r3, [pc, #124]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102c92:	4a1e      	ldr	r2, [pc, #120]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102c98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8102c9a:	683b      	ldr	r3, [r7, #0]
 8102c9c:	2b00      	cmp	r3, #0
 8102c9e:	d106      	bne.n	8102cae <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8102ca0:	4b1a      	ldr	r3, [pc, #104]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ca4:	4a19      	ldr	r2, [pc, #100]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102ca6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102caa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102cac:	e00f      	b.n	8102cce <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8102cae:	683b      	ldr	r3, [r7, #0]
 8102cb0:	2b01      	cmp	r3, #1
 8102cb2:	d106      	bne.n	8102cc2 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8102cb4:	4b15      	ldr	r3, [pc, #84]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cb8:	4a14      	ldr	r2, [pc, #80]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102cba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8102cc0:	e005      	b.n	8102cce <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8102cc2:	4b12      	ldr	r3, [pc, #72]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cc6:	4a11      	ldr	r2, [pc, #68]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102ccc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8102cce:	4b0f      	ldr	r3, [pc, #60]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	4a0e      	ldr	r2, [pc, #56]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102cda:	f7fd fecb 	bl	8100a74 <HAL_GetTick>
 8102cde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102ce0:	e008      	b.n	8102cf4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8102ce2:	f7fd fec7 	bl	8100a74 <HAL_GetTick>
 8102ce6:	4602      	mov	r2, r0
 8102ce8:	68bb      	ldr	r3, [r7, #8]
 8102cea:	1ad3      	subs	r3, r2, r3
 8102cec:	2b02      	cmp	r3, #2
 8102cee:	d901      	bls.n	8102cf4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8102cf0:	2303      	movs	r3, #3
 8102cf2:	e006      	b.n	8102d02 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8102cf4:	4b05      	ldr	r3, [pc, #20]	; (8102d0c <RCCEx_PLL3_Config+0x160>)
 8102cf6:	681b      	ldr	r3, [r3, #0]
 8102cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102cfc:	2b00      	cmp	r3, #0
 8102cfe:	d0f0      	beq.n	8102ce2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8102d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8102d02:	4618      	mov	r0, r3
 8102d04:	3710      	adds	r7, #16
 8102d06:	46bd      	mov	sp, r7
 8102d08:	bd80      	pop	{r7, pc}
 8102d0a:	bf00      	nop
 8102d0c:	58024400 	.word	0x58024400

08102d10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8102d10:	b580      	push	{r7, lr}
 8102d12:	b082      	sub	sp, #8
 8102d14:	af00      	add	r7, sp, #0
 8102d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	2b00      	cmp	r3, #0
 8102d1c:	d101      	bne.n	8102d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8102d1e:	2301      	movs	r3, #1
 8102d20:	e042      	b.n	8102da8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8102d22:	687b      	ldr	r3, [r7, #4]
 8102d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102d28:	2b00      	cmp	r3, #0
 8102d2a:	d106      	bne.n	8102d3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8102d2c:	687b      	ldr	r3, [r7, #4]
 8102d2e:	2200      	movs	r2, #0
 8102d30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8102d34:	6878      	ldr	r0, [r7, #4]
 8102d36:	f7fd fd65 	bl	8100804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	2224      	movs	r2, #36	; 0x24
 8102d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	681a      	ldr	r2, [r3, #0]
 8102d48:	687b      	ldr	r3, [r7, #4]
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	f022 0201 	bic.w	r2, r2, #1
 8102d50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8102d52:	6878      	ldr	r0, [r7, #4]
 8102d54:	f000 f8c2 	bl	8102edc <UART_SetConfig>
 8102d58:	4603      	mov	r3, r0
 8102d5a:	2b01      	cmp	r3, #1
 8102d5c:	d101      	bne.n	8102d62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8102d5e:	2301      	movs	r3, #1
 8102d60:	e022      	b.n	8102da8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8102d62:	687b      	ldr	r3, [r7, #4]
 8102d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102d66:	2b00      	cmp	r3, #0
 8102d68:	d002      	beq.n	8102d70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8102d6a:	6878      	ldr	r0, [r7, #4]
 8102d6c:	f000 fe16 	bl	810399c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8102d70:	687b      	ldr	r3, [r7, #4]
 8102d72:	681b      	ldr	r3, [r3, #0]
 8102d74:	685a      	ldr	r2, [r3, #4]
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	681b      	ldr	r3, [r3, #0]
 8102d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8102d7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8102d80:	687b      	ldr	r3, [r7, #4]
 8102d82:	681b      	ldr	r3, [r3, #0]
 8102d84:	689a      	ldr	r2, [r3, #8]
 8102d86:	687b      	ldr	r3, [r7, #4]
 8102d88:	681b      	ldr	r3, [r3, #0]
 8102d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8102d8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8102d90:	687b      	ldr	r3, [r7, #4]
 8102d92:	681b      	ldr	r3, [r3, #0]
 8102d94:	681a      	ldr	r2, [r3, #0]
 8102d96:	687b      	ldr	r3, [r7, #4]
 8102d98:	681b      	ldr	r3, [r3, #0]
 8102d9a:	f042 0201 	orr.w	r2, r2, #1
 8102d9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8102da0:	6878      	ldr	r0, [r7, #4]
 8102da2:	f000 fe9d 	bl	8103ae0 <UART_CheckIdleState>
 8102da6:	4603      	mov	r3, r0
}
 8102da8:	4618      	mov	r0, r3
 8102daa:	3708      	adds	r7, #8
 8102dac:	46bd      	mov	sp, r7
 8102dae:	bd80      	pop	{r7, pc}

08102db0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102db0:	b580      	push	{r7, lr}
 8102db2:	b08a      	sub	sp, #40	; 0x28
 8102db4:	af02      	add	r7, sp, #8
 8102db6:	60f8      	str	r0, [r7, #12]
 8102db8:	60b9      	str	r1, [r7, #8]
 8102dba:	603b      	str	r3, [r7, #0]
 8102dbc:	4613      	mov	r3, r2
 8102dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8102dc0:	68fb      	ldr	r3, [r7, #12]
 8102dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102dc6:	2b20      	cmp	r3, #32
 8102dc8:	f040 8083 	bne.w	8102ed2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8102dcc:	68bb      	ldr	r3, [r7, #8]
 8102dce:	2b00      	cmp	r3, #0
 8102dd0:	d002      	beq.n	8102dd8 <HAL_UART_Transmit+0x28>
 8102dd2:	88fb      	ldrh	r3, [r7, #6]
 8102dd4:	2b00      	cmp	r3, #0
 8102dd6:	d101      	bne.n	8102ddc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8102dd8:	2301      	movs	r3, #1
 8102dda:	e07b      	b.n	8102ed4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8102ddc:	68fb      	ldr	r3, [r7, #12]
 8102dde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8102de2:	2b01      	cmp	r3, #1
 8102de4:	d101      	bne.n	8102dea <HAL_UART_Transmit+0x3a>
 8102de6:	2302      	movs	r3, #2
 8102de8:	e074      	b.n	8102ed4 <HAL_UART_Transmit+0x124>
 8102dea:	68fb      	ldr	r3, [r7, #12]
 8102dec:	2201      	movs	r2, #1
 8102dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8102df2:	68fb      	ldr	r3, [r7, #12]
 8102df4:	2200      	movs	r2, #0
 8102df6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8102dfa:	68fb      	ldr	r3, [r7, #12]
 8102dfc:	2221      	movs	r2, #33	; 0x21
 8102dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8102e02:	f7fd fe37 	bl	8100a74 <HAL_GetTick>
 8102e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8102e08:	68fb      	ldr	r3, [r7, #12]
 8102e0a:	88fa      	ldrh	r2, [r7, #6]
 8102e0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8102e10:	68fb      	ldr	r3, [r7, #12]
 8102e12:	88fa      	ldrh	r2, [r7, #6]
 8102e14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8102e18:	68fb      	ldr	r3, [r7, #12]
 8102e1a:	689b      	ldr	r3, [r3, #8]
 8102e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102e20:	d108      	bne.n	8102e34 <HAL_UART_Transmit+0x84>
 8102e22:	68fb      	ldr	r3, [r7, #12]
 8102e24:	691b      	ldr	r3, [r3, #16]
 8102e26:	2b00      	cmp	r3, #0
 8102e28:	d104      	bne.n	8102e34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8102e2a:	2300      	movs	r3, #0
 8102e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8102e2e:	68bb      	ldr	r3, [r7, #8]
 8102e30:	61bb      	str	r3, [r7, #24]
 8102e32:	e003      	b.n	8102e3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8102e34:	68bb      	ldr	r3, [r7, #8]
 8102e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8102e38:	2300      	movs	r3, #0
 8102e3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8102e3c:	68fb      	ldr	r3, [r7, #12]
 8102e3e:	2200      	movs	r2, #0
 8102e40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8102e44:	e02c      	b.n	8102ea0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8102e46:	683b      	ldr	r3, [r7, #0]
 8102e48:	9300      	str	r3, [sp, #0]
 8102e4a:	697b      	ldr	r3, [r7, #20]
 8102e4c:	2200      	movs	r2, #0
 8102e4e:	2180      	movs	r1, #128	; 0x80
 8102e50:	68f8      	ldr	r0, [r7, #12]
 8102e52:	f000 fe90 	bl	8103b76 <UART_WaitOnFlagUntilTimeout>
 8102e56:	4603      	mov	r3, r0
 8102e58:	2b00      	cmp	r3, #0
 8102e5a:	d001      	beq.n	8102e60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8102e5c:	2303      	movs	r3, #3
 8102e5e:	e039      	b.n	8102ed4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8102e60:	69fb      	ldr	r3, [r7, #28]
 8102e62:	2b00      	cmp	r3, #0
 8102e64:	d10b      	bne.n	8102e7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8102e66:	69bb      	ldr	r3, [r7, #24]
 8102e68:	881b      	ldrh	r3, [r3, #0]
 8102e6a:	461a      	mov	r2, r3
 8102e6c:	68fb      	ldr	r3, [r7, #12]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8102e74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8102e76:	69bb      	ldr	r3, [r7, #24]
 8102e78:	3302      	adds	r3, #2
 8102e7a:	61bb      	str	r3, [r7, #24]
 8102e7c:	e007      	b.n	8102e8e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8102e7e:	69fb      	ldr	r3, [r7, #28]
 8102e80:	781a      	ldrb	r2, [r3, #0]
 8102e82:	68fb      	ldr	r3, [r7, #12]
 8102e84:	681b      	ldr	r3, [r3, #0]
 8102e86:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8102e88:	69fb      	ldr	r3, [r7, #28]
 8102e8a:	3301      	adds	r3, #1
 8102e8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8102e8e:	68fb      	ldr	r3, [r7, #12]
 8102e90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8102e94:	b29b      	uxth	r3, r3
 8102e96:	3b01      	subs	r3, #1
 8102e98:	b29a      	uxth	r2, r3
 8102e9a:	68fb      	ldr	r3, [r7, #12]
 8102e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8102ea0:	68fb      	ldr	r3, [r7, #12]
 8102ea2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8102ea6:	b29b      	uxth	r3, r3
 8102ea8:	2b00      	cmp	r3, #0
 8102eaa:	d1cc      	bne.n	8102e46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8102eac:	683b      	ldr	r3, [r7, #0]
 8102eae:	9300      	str	r3, [sp, #0]
 8102eb0:	697b      	ldr	r3, [r7, #20]
 8102eb2:	2200      	movs	r2, #0
 8102eb4:	2140      	movs	r1, #64	; 0x40
 8102eb6:	68f8      	ldr	r0, [r7, #12]
 8102eb8:	f000 fe5d 	bl	8103b76 <UART_WaitOnFlagUntilTimeout>
 8102ebc:	4603      	mov	r3, r0
 8102ebe:	2b00      	cmp	r3, #0
 8102ec0:	d001      	beq.n	8102ec6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8102ec2:	2303      	movs	r3, #3
 8102ec4:	e006      	b.n	8102ed4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8102ec6:	68fb      	ldr	r3, [r7, #12]
 8102ec8:	2220      	movs	r2, #32
 8102eca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8102ece:	2300      	movs	r3, #0
 8102ed0:	e000      	b.n	8102ed4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8102ed2:	2302      	movs	r3, #2
  }
}
 8102ed4:	4618      	mov	r0, r3
 8102ed6:	3720      	adds	r7, #32
 8102ed8:	46bd      	mov	sp, r7
 8102eda:	bd80      	pop	{r7, pc}

08102edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8102edc:	b5b0      	push	{r4, r5, r7, lr}
 8102ede:	b08e      	sub	sp, #56	; 0x38
 8102ee0:	af00      	add	r7, sp, #0
 8102ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8102ee4:	2300      	movs	r3, #0
 8102ee6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	689a      	ldr	r2, [r3, #8]
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	691b      	ldr	r3, [r3, #16]
 8102ef2:	431a      	orrs	r2, r3
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	695b      	ldr	r3, [r3, #20]
 8102ef8:	431a      	orrs	r2, r3
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	69db      	ldr	r3, [r3, #28]
 8102efe:	4313      	orrs	r3, r2
 8102f00:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	681b      	ldr	r3, [r3, #0]
 8102f06:	681a      	ldr	r2, [r3, #0]
 8102f08:	4bc0      	ldr	r3, [pc, #768]	; (810320c <UART_SetConfig+0x330>)
 8102f0a:	4013      	ands	r3, r2
 8102f0c:	687a      	ldr	r2, [r7, #4]
 8102f0e:	6812      	ldr	r2, [r2, #0]
 8102f10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8102f12:	430b      	orrs	r3, r1
 8102f14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8102f16:	687b      	ldr	r3, [r7, #4]
 8102f18:	681b      	ldr	r3, [r3, #0]
 8102f1a:	685b      	ldr	r3, [r3, #4]
 8102f1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	68da      	ldr	r2, [r3, #12]
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	681b      	ldr	r3, [r3, #0]
 8102f28:	430a      	orrs	r2, r1
 8102f2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	699b      	ldr	r3, [r3, #24]
 8102f30:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8102f32:	687b      	ldr	r3, [r7, #4]
 8102f34:	681b      	ldr	r3, [r3, #0]
 8102f36:	4ab6      	ldr	r2, [pc, #728]	; (8103210 <UART_SetConfig+0x334>)
 8102f38:	4293      	cmp	r3, r2
 8102f3a:	d004      	beq.n	8102f46 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	6a1b      	ldr	r3, [r3, #32]
 8102f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102f42:	4313      	orrs	r3, r2
 8102f44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	681b      	ldr	r3, [r3, #0]
 8102f4a:	689b      	ldr	r3, [r3, #8]
 8102f4c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8102f50:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8102f54:	687a      	ldr	r2, [r7, #4]
 8102f56:	6812      	ldr	r2, [r2, #0]
 8102f58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8102f5a:	430b      	orrs	r3, r1
 8102f5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	681b      	ldr	r3, [r3, #0]
 8102f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f64:	f023 010f 	bic.w	r1, r3, #15
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	430a      	orrs	r2, r1
 8102f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	4aa6      	ldr	r2, [pc, #664]	; (8103214 <UART_SetConfig+0x338>)
 8102f7a:	4293      	cmp	r3, r2
 8102f7c:	d176      	bne.n	810306c <UART_SetConfig+0x190>
 8102f7e:	4ba6      	ldr	r3, [pc, #664]	; (8103218 <UART_SetConfig+0x33c>)
 8102f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102f86:	2b28      	cmp	r3, #40	; 0x28
 8102f88:	d86c      	bhi.n	8103064 <UART_SetConfig+0x188>
 8102f8a:	a201      	add	r2, pc, #4	; (adr r2, 8102f90 <UART_SetConfig+0xb4>)
 8102f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102f90:	08103035 	.word	0x08103035
 8102f94:	08103065 	.word	0x08103065
 8102f98:	08103065 	.word	0x08103065
 8102f9c:	08103065 	.word	0x08103065
 8102fa0:	08103065 	.word	0x08103065
 8102fa4:	08103065 	.word	0x08103065
 8102fa8:	08103065 	.word	0x08103065
 8102fac:	08103065 	.word	0x08103065
 8102fb0:	0810303d 	.word	0x0810303d
 8102fb4:	08103065 	.word	0x08103065
 8102fb8:	08103065 	.word	0x08103065
 8102fbc:	08103065 	.word	0x08103065
 8102fc0:	08103065 	.word	0x08103065
 8102fc4:	08103065 	.word	0x08103065
 8102fc8:	08103065 	.word	0x08103065
 8102fcc:	08103065 	.word	0x08103065
 8102fd0:	08103045 	.word	0x08103045
 8102fd4:	08103065 	.word	0x08103065
 8102fd8:	08103065 	.word	0x08103065
 8102fdc:	08103065 	.word	0x08103065
 8102fe0:	08103065 	.word	0x08103065
 8102fe4:	08103065 	.word	0x08103065
 8102fe8:	08103065 	.word	0x08103065
 8102fec:	08103065 	.word	0x08103065
 8102ff0:	0810304d 	.word	0x0810304d
 8102ff4:	08103065 	.word	0x08103065
 8102ff8:	08103065 	.word	0x08103065
 8102ffc:	08103065 	.word	0x08103065
 8103000:	08103065 	.word	0x08103065
 8103004:	08103065 	.word	0x08103065
 8103008:	08103065 	.word	0x08103065
 810300c:	08103065 	.word	0x08103065
 8103010:	08103055 	.word	0x08103055
 8103014:	08103065 	.word	0x08103065
 8103018:	08103065 	.word	0x08103065
 810301c:	08103065 	.word	0x08103065
 8103020:	08103065 	.word	0x08103065
 8103024:	08103065 	.word	0x08103065
 8103028:	08103065 	.word	0x08103065
 810302c:	08103065 	.word	0x08103065
 8103030:	0810305d 	.word	0x0810305d
 8103034:	2301      	movs	r3, #1
 8103036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810303a:	e220      	b.n	810347e <UART_SetConfig+0x5a2>
 810303c:	2304      	movs	r3, #4
 810303e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103042:	e21c      	b.n	810347e <UART_SetConfig+0x5a2>
 8103044:	2308      	movs	r3, #8
 8103046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810304a:	e218      	b.n	810347e <UART_SetConfig+0x5a2>
 810304c:	2310      	movs	r3, #16
 810304e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103052:	e214      	b.n	810347e <UART_SetConfig+0x5a2>
 8103054:	2320      	movs	r3, #32
 8103056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810305a:	e210      	b.n	810347e <UART_SetConfig+0x5a2>
 810305c:	2340      	movs	r3, #64	; 0x40
 810305e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103062:	e20c      	b.n	810347e <UART_SetConfig+0x5a2>
 8103064:	2380      	movs	r3, #128	; 0x80
 8103066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810306a:	e208      	b.n	810347e <UART_SetConfig+0x5a2>
 810306c:	687b      	ldr	r3, [r7, #4]
 810306e:	681b      	ldr	r3, [r3, #0]
 8103070:	4a6a      	ldr	r2, [pc, #424]	; (810321c <UART_SetConfig+0x340>)
 8103072:	4293      	cmp	r3, r2
 8103074:	d130      	bne.n	81030d8 <UART_SetConfig+0x1fc>
 8103076:	4b68      	ldr	r3, [pc, #416]	; (8103218 <UART_SetConfig+0x33c>)
 8103078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810307a:	f003 0307 	and.w	r3, r3, #7
 810307e:	2b05      	cmp	r3, #5
 8103080:	d826      	bhi.n	81030d0 <UART_SetConfig+0x1f4>
 8103082:	a201      	add	r2, pc, #4	; (adr r2, 8103088 <UART_SetConfig+0x1ac>)
 8103084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103088:	081030a1 	.word	0x081030a1
 810308c:	081030a9 	.word	0x081030a9
 8103090:	081030b1 	.word	0x081030b1
 8103094:	081030b9 	.word	0x081030b9
 8103098:	081030c1 	.word	0x081030c1
 810309c:	081030c9 	.word	0x081030c9
 81030a0:	2300      	movs	r3, #0
 81030a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030a6:	e1ea      	b.n	810347e <UART_SetConfig+0x5a2>
 81030a8:	2304      	movs	r3, #4
 81030aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030ae:	e1e6      	b.n	810347e <UART_SetConfig+0x5a2>
 81030b0:	2308      	movs	r3, #8
 81030b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030b6:	e1e2      	b.n	810347e <UART_SetConfig+0x5a2>
 81030b8:	2310      	movs	r3, #16
 81030ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030be:	e1de      	b.n	810347e <UART_SetConfig+0x5a2>
 81030c0:	2320      	movs	r3, #32
 81030c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030c6:	e1da      	b.n	810347e <UART_SetConfig+0x5a2>
 81030c8:	2340      	movs	r3, #64	; 0x40
 81030ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030ce:	e1d6      	b.n	810347e <UART_SetConfig+0x5a2>
 81030d0:	2380      	movs	r3, #128	; 0x80
 81030d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81030d6:	e1d2      	b.n	810347e <UART_SetConfig+0x5a2>
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	681b      	ldr	r3, [r3, #0]
 81030dc:	4a50      	ldr	r2, [pc, #320]	; (8103220 <UART_SetConfig+0x344>)
 81030de:	4293      	cmp	r3, r2
 81030e0:	d130      	bne.n	8103144 <UART_SetConfig+0x268>
 81030e2:	4b4d      	ldr	r3, [pc, #308]	; (8103218 <UART_SetConfig+0x33c>)
 81030e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030e6:	f003 0307 	and.w	r3, r3, #7
 81030ea:	2b05      	cmp	r3, #5
 81030ec:	d826      	bhi.n	810313c <UART_SetConfig+0x260>
 81030ee:	a201      	add	r2, pc, #4	; (adr r2, 81030f4 <UART_SetConfig+0x218>)
 81030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81030f4:	0810310d 	.word	0x0810310d
 81030f8:	08103115 	.word	0x08103115
 81030fc:	0810311d 	.word	0x0810311d
 8103100:	08103125 	.word	0x08103125
 8103104:	0810312d 	.word	0x0810312d
 8103108:	08103135 	.word	0x08103135
 810310c:	2300      	movs	r3, #0
 810310e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103112:	e1b4      	b.n	810347e <UART_SetConfig+0x5a2>
 8103114:	2304      	movs	r3, #4
 8103116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810311a:	e1b0      	b.n	810347e <UART_SetConfig+0x5a2>
 810311c:	2308      	movs	r3, #8
 810311e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103122:	e1ac      	b.n	810347e <UART_SetConfig+0x5a2>
 8103124:	2310      	movs	r3, #16
 8103126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810312a:	e1a8      	b.n	810347e <UART_SetConfig+0x5a2>
 810312c:	2320      	movs	r3, #32
 810312e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103132:	e1a4      	b.n	810347e <UART_SetConfig+0x5a2>
 8103134:	2340      	movs	r3, #64	; 0x40
 8103136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810313a:	e1a0      	b.n	810347e <UART_SetConfig+0x5a2>
 810313c:	2380      	movs	r3, #128	; 0x80
 810313e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103142:	e19c      	b.n	810347e <UART_SetConfig+0x5a2>
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	4a36      	ldr	r2, [pc, #216]	; (8103224 <UART_SetConfig+0x348>)
 810314a:	4293      	cmp	r3, r2
 810314c:	d130      	bne.n	81031b0 <UART_SetConfig+0x2d4>
 810314e:	4b32      	ldr	r3, [pc, #200]	; (8103218 <UART_SetConfig+0x33c>)
 8103150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103152:	f003 0307 	and.w	r3, r3, #7
 8103156:	2b05      	cmp	r3, #5
 8103158:	d826      	bhi.n	81031a8 <UART_SetConfig+0x2cc>
 810315a:	a201      	add	r2, pc, #4	; (adr r2, 8103160 <UART_SetConfig+0x284>)
 810315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103160:	08103179 	.word	0x08103179
 8103164:	08103181 	.word	0x08103181
 8103168:	08103189 	.word	0x08103189
 810316c:	08103191 	.word	0x08103191
 8103170:	08103199 	.word	0x08103199
 8103174:	081031a1 	.word	0x081031a1
 8103178:	2300      	movs	r3, #0
 810317a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810317e:	e17e      	b.n	810347e <UART_SetConfig+0x5a2>
 8103180:	2304      	movs	r3, #4
 8103182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103186:	e17a      	b.n	810347e <UART_SetConfig+0x5a2>
 8103188:	2308      	movs	r3, #8
 810318a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810318e:	e176      	b.n	810347e <UART_SetConfig+0x5a2>
 8103190:	2310      	movs	r3, #16
 8103192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103196:	e172      	b.n	810347e <UART_SetConfig+0x5a2>
 8103198:	2320      	movs	r3, #32
 810319a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810319e:	e16e      	b.n	810347e <UART_SetConfig+0x5a2>
 81031a0:	2340      	movs	r3, #64	; 0x40
 81031a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031a6:	e16a      	b.n	810347e <UART_SetConfig+0x5a2>
 81031a8:	2380      	movs	r3, #128	; 0x80
 81031aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031ae:	e166      	b.n	810347e <UART_SetConfig+0x5a2>
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	4a1c      	ldr	r2, [pc, #112]	; (8103228 <UART_SetConfig+0x34c>)
 81031b6:	4293      	cmp	r3, r2
 81031b8:	d140      	bne.n	810323c <UART_SetConfig+0x360>
 81031ba:	4b17      	ldr	r3, [pc, #92]	; (8103218 <UART_SetConfig+0x33c>)
 81031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81031be:	f003 0307 	and.w	r3, r3, #7
 81031c2:	2b05      	cmp	r3, #5
 81031c4:	d836      	bhi.n	8103234 <UART_SetConfig+0x358>
 81031c6:	a201      	add	r2, pc, #4	; (adr r2, 81031cc <UART_SetConfig+0x2f0>)
 81031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031cc:	081031e5 	.word	0x081031e5
 81031d0:	081031ed 	.word	0x081031ed
 81031d4:	081031f5 	.word	0x081031f5
 81031d8:	081031fd 	.word	0x081031fd
 81031dc:	08103205 	.word	0x08103205
 81031e0:	0810322d 	.word	0x0810322d
 81031e4:	2300      	movs	r3, #0
 81031e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031ea:	e148      	b.n	810347e <UART_SetConfig+0x5a2>
 81031ec:	2304      	movs	r3, #4
 81031ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031f2:	e144      	b.n	810347e <UART_SetConfig+0x5a2>
 81031f4:	2308      	movs	r3, #8
 81031f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81031fa:	e140      	b.n	810347e <UART_SetConfig+0x5a2>
 81031fc:	2310      	movs	r3, #16
 81031fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103202:	e13c      	b.n	810347e <UART_SetConfig+0x5a2>
 8103204:	2320      	movs	r3, #32
 8103206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810320a:	e138      	b.n	810347e <UART_SetConfig+0x5a2>
 810320c:	cfff69f3 	.word	0xcfff69f3
 8103210:	58000c00 	.word	0x58000c00
 8103214:	40011000 	.word	0x40011000
 8103218:	58024400 	.word	0x58024400
 810321c:	40004400 	.word	0x40004400
 8103220:	40004800 	.word	0x40004800
 8103224:	40004c00 	.word	0x40004c00
 8103228:	40005000 	.word	0x40005000
 810322c:	2340      	movs	r3, #64	; 0x40
 810322e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103232:	e124      	b.n	810347e <UART_SetConfig+0x5a2>
 8103234:	2380      	movs	r3, #128	; 0x80
 8103236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810323a:	e120      	b.n	810347e <UART_SetConfig+0x5a2>
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	4acc      	ldr	r2, [pc, #816]	; (8103574 <UART_SetConfig+0x698>)
 8103242:	4293      	cmp	r3, r2
 8103244:	d176      	bne.n	8103334 <UART_SetConfig+0x458>
 8103246:	4bcc      	ldr	r3, [pc, #816]	; (8103578 <UART_SetConfig+0x69c>)
 8103248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810324a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810324e:	2b28      	cmp	r3, #40	; 0x28
 8103250:	d86c      	bhi.n	810332c <UART_SetConfig+0x450>
 8103252:	a201      	add	r2, pc, #4	; (adr r2, 8103258 <UART_SetConfig+0x37c>)
 8103254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103258:	081032fd 	.word	0x081032fd
 810325c:	0810332d 	.word	0x0810332d
 8103260:	0810332d 	.word	0x0810332d
 8103264:	0810332d 	.word	0x0810332d
 8103268:	0810332d 	.word	0x0810332d
 810326c:	0810332d 	.word	0x0810332d
 8103270:	0810332d 	.word	0x0810332d
 8103274:	0810332d 	.word	0x0810332d
 8103278:	08103305 	.word	0x08103305
 810327c:	0810332d 	.word	0x0810332d
 8103280:	0810332d 	.word	0x0810332d
 8103284:	0810332d 	.word	0x0810332d
 8103288:	0810332d 	.word	0x0810332d
 810328c:	0810332d 	.word	0x0810332d
 8103290:	0810332d 	.word	0x0810332d
 8103294:	0810332d 	.word	0x0810332d
 8103298:	0810330d 	.word	0x0810330d
 810329c:	0810332d 	.word	0x0810332d
 81032a0:	0810332d 	.word	0x0810332d
 81032a4:	0810332d 	.word	0x0810332d
 81032a8:	0810332d 	.word	0x0810332d
 81032ac:	0810332d 	.word	0x0810332d
 81032b0:	0810332d 	.word	0x0810332d
 81032b4:	0810332d 	.word	0x0810332d
 81032b8:	08103315 	.word	0x08103315
 81032bc:	0810332d 	.word	0x0810332d
 81032c0:	0810332d 	.word	0x0810332d
 81032c4:	0810332d 	.word	0x0810332d
 81032c8:	0810332d 	.word	0x0810332d
 81032cc:	0810332d 	.word	0x0810332d
 81032d0:	0810332d 	.word	0x0810332d
 81032d4:	0810332d 	.word	0x0810332d
 81032d8:	0810331d 	.word	0x0810331d
 81032dc:	0810332d 	.word	0x0810332d
 81032e0:	0810332d 	.word	0x0810332d
 81032e4:	0810332d 	.word	0x0810332d
 81032e8:	0810332d 	.word	0x0810332d
 81032ec:	0810332d 	.word	0x0810332d
 81032f0:	0810332d 	.word	0x0810332d
 81032f4:	0810332d 	.word	0x0810332d
 81032f8:	08103325 	.word	0x08103325
 81032fc:	2301      	movs	r3, #1
 81032fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103302:	e0bc      	b.n	810347e <UART_SetConfig+0x5a2>
 8103304:	2304      	movs	r3, #4
 8103306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810330a:	e0b8      	b.n	810347e <UART_SetConfig+0x5a2>
 810330c:	2308      	movs	r3, #8
 810330e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103312:	e0b4      	b.n	810347e <UART_SetConfig+0x5a2>
 8103314:	2310      	movs	r3, #16
 8103316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810331a:	e0b0      	b.n	810347e <UART_SetConfig+0x5a2>
 810331c:	2320      	movs	r3, #32
 810331e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103322:	e0ac      	b.n	810347e <UART_SetConfig+0x5a2>
 8103324:	2340      	movs	r3, #64	; 0x40
 8103326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810332a:	e0a8      	b.n	810347e <UART_SetConfig+0x5a2>
 810332c:	2380      	movs	r3, #128	; 0x80
 810332e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103332:	e0a4      	b.n	810347e <UART_SetConfig+0x5a2>
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	4a90      	ldr	r2, [pc, #576]	; (810357c <UART_SetConfig+0x6a0>)
 810333a:	4293      	cmp	r3, r2
 810333c:	d130      	bne.n	81033a0 <UART_SetConfig+0x4c4>
 810333e:	4b8e      	ldr	r3, [pc, #568]	; (8103578 <UART_SetConfig+0x69c>)
 8103340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103342:	f003 0307 	and.w	r3, r3, #7
 8103346:	2b05      	cmp	r3, #5
 8103348:	d826      	bhi.n	8103398 <UART_SetConfig+0x4bc>
 810334a:	a201      	add	r2, pc, #4	; (adr r2, 8103350 <UART_SetConfig+0x474>)
 810334c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103350:	08103369 	.word	0x08103369
 8103354:	08103371 	.word	0x08103371
 8103358:	08103379 	.word	0x08103379
 810335c:	08103381 	.word	0x08103381
 8103360:	08103389 	.word	0x08103389
 8103364:	08103391 	.word	0x08103391
 8103368:	2300      	movs	r3, #0
 810336a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810336e:	e086      	b.n	810347e <UART_SetConfig+0x5a2>
 8103370:	2304      	movs	r3, #4
 8103372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103376:	e082      	b.n	810347e <UART_SetConfig+0x5a2>
 8103378:	2308      	movs	r3, #8
 810337a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810337e:	e07e      	b.n	810347e <UART_SetConfig+0x5a2>
 8103380:	2310      	movs	r3, #16
 8103382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103386:	e07a      	b.n	810347e <UART_SetConfig+0x5a2>
 8103388:	2320      	movs	r3, #32
 810338a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810338e:	e076      	b.n	810347e <UART_SetConfig+0x5a2>
 8103390:	2340      	movs	r3, #64	; 0x40
 8103392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103396:	e072      	b.n	810347e <UART_SetConfig+0x5a2>
 8103398:	2380      	movs	r3, #128	; 0x80
 810339a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810339e:	e06e      	b.n	810347e <UART_SetConfig+0x5a2>
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	4a76      	ldr	r2, [pc, #472]	; (8103580 <UART_SetConfig+0x6a4>)
 81033a6:	4293      	cmp	r3, r2
 81033a8:	d130      	bne.n	810340c <UART_SetConfig+0x530>
 81033aa:	4b73      	ldr	r3, [pc, #460]	; (8103578 <UART_SetConfig+0x69c>)
 81033ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033ae:	f003 0307 	and.w	r3, r3, #7
 81033b2:	2b05      	cmp	r3, #5
 81033b4:	d826      	bhi.n	8103404 <UART_SetConfig+0x528>
 81033b6:	a201      	add	r2, pc, #4	; (adr r2, 81033bc <UART_SetConfig+0x4e0>)
 81033b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033bc:	081033d5 	.word	0x081033d5
 81033c0:	081033dd 	.word	0x081033dd
 81033c4:	081033e5 	.word	0x081033e5
 81033c8:	081033ed 	.word	0x081033ed
 81033cc:	081033f5 	.word	0x081033f5
 81033d0:	081033fd 	.word	0x081033fd
 81033d4:	2300      	movs	r3, #0
 81033d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033da:	e050      	b.n	810347e <UART_SetConfig+0x5a2>
 81033dc:	2304      	movs	r3, #4
 81033de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033e2:	e04c      	b.n	810347e <UART_SetConfig+0x5a2>
 81033e4:	2308      	movs	r3, #8
 81033e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033ea:	e048      	b.n	810347e <UART_SetConfig+0x5a2>
 81033ec:	2310      	movs	r3, #16
 81033ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033f2:	e044      	b.n	810347e <UART_SetConfig+0x5a2>
 81033f4:	2320      	movs	r3, #32
 81033f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81033fa:	e040      	b.n	810347e <UART_SetConfig+0x5a2>
 81033fc:	2340      	movs	r3, #64	; 0x40
 81033fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103402:	e03c      	b.n	810347e <UART_SetConfig+0x5a2>
 8103404:	2380      	movs	r3, #128	; 0x80
 8103406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810340a:	e038      	b.n	810347e <UART_SetConfig+0x5a2>
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	681b      	ldr	r3, [r3, #0]
 8103410:	4a5c      	ldr	r2, [pc, #368]	; (8103584 <UART_SetConfig+0x6a8>)
 8103412:	4293      	cmp	r3, r2
 8103414:	d130      	bne.n	8103478 <UART_SetConfig+0x59c>
 8103416:	4b58      	ldr	r3, [pc, #352]	; (8103578 <UART_SetConfig+0x69c>)
 8103418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810341a:	f003 0307 	and.w	r3, r3, #7
 810341e:	2b05      	cmp	r3, #5
 8103420:	d826      	bhi.n	8103470 <UART_SetConfig+0x594>
 8103422:	a201      	add	r2, pc, #4	; (adr r2, 8103428 <UART_SetConfig+0x54c>)
 8103424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103428:	08103441 	.word	0x08103441
 810342c:	08103449 	.word	0x08103449
 8103430:	08103451 	.word	0x08103451
 8103434:	08103459 	.word	0x08103459
 8103438:	08103461 	.word	0x08103461
 810343c:	08103469 	.word	0x08103469
 8103440:	2302      	movs	r3, #2
 8103442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103446:	e01a      	b.n	810347e <UART_SetConfig+0x5a2>
 8103448:	2304      	movs	r3, #4
 810344a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810344e:	e016      	b.n	810347e <UART_SetConfig+0x5a2>
 8103450:	2308      	movs	r3, #8
 8103452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103456:	e012      	b.n	810347e <UART_SetConfig+0x5a2>
 8103458:	2310      	movs	r3, #16
 810345a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810345e:	e00e      	b.n	810347e <UART_SetConfig+0x5a2>
 8103460:	2320      	movs	r3, #32
 8103462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103466:	e00a      	b.n	810347e <UART_SetConfig+0x5a2>
 8103468:	2340      	movs	r3, #64	; 0x40
 810346a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810346e:	e006      	b.n	810347e <UART_SetConfig+0x5a2>
 8103470:	2380      	movs	r3, #128	; 0x80
 8103472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103476:	e002      	b.n	810347e <UART_SetConfig+0x5a2>
 8103478:	2380      	movs	r3, #128	; 0x80
 810347a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810347e:	687b      	ldr	r3, [r7, #4]
 8103480:	681b      	ldr	r3, [r3, #0]
 8103482:	4a40      	ldr	r2, [pc, #256]	; (8103584 <UART_SetConfig+0x6a8>)
 8103484:	4293      	cmp	r3, r2
 8103486:	f040 80ef 	bne.w	8103668 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810348a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810348e:	2b20      	cmp	r3, #32
 8103490:	dc46      	bgt.n	8103520 <UART_SetConfig+0x644>
 8103492:	2b02      	cmp	r3, #2
 8103494:	f2c0 8081 	blt.w	810359a <UART_SetConfig+0x6be>
 8103498:	3b02      	subs	r3, #2
 810349a:	2b1e      	cmp	r3, #30
 810349c:	d87d      	bhi.n	810359a <UART_SetConfig+0x6be>
 810349e:	a201      	add	r2, pc, #4	; (adr r2, 81034a4 <UART_SetConfig+0x5c8>)
 81034a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81034a4:	08103527 	.word	0x08103527
 81034a8:	0810359b 	.word	0x0810359b
 81034ac:	0810352f 	.word	0x0810352f
 81034b0:	0810359b 	.word	0x0810359b
 81034b4:	0810359b 	.word	0x0810359b
 81034b8:	0810359b 	.word	0x0810359b
 81034bc:	0810353f 	.word	0x0810353f
 81034c0:	0810359b 	.word	0x0810359b
 81034c4:	0810359b 	.word	0x0810359b
 81034c8:	0810359b 	.word	0x0810359b
 81034cc:	0810359b 	.word	0x0810359b
 81034d0:	0810359b 	.word	0x0810359b
 81034d4:	0810359b 	.word	0x0810359b
 81034d8:	0810359b 	.word	0x0810359b
 81034dc:	0810354f 	.word	0x0810354f
 81034e0:	0810359b 	.word	0x0810359b
 81034e4:	0810359b 	.word	0x0810359b
 81034e8:	0810359b 	.word	0x0810359b
 81034ec:	0810359b 	.word	0x0810359b
 81034f0:	0810359b 	.word	0x0810359b
 81034f4:	0810359b 	.word	0x0810359b
 81034f8:	0810359b 	.word	0x0810359b
 81034fc:	0810359b 	.word	0x0810359b
 8103500:	0810359b 	.word	0x0810359b
 8103504:	0810359b 	.word	0x0810359b
 8103508:	0810359b 	.word	0x0810359b
 810350c:	0810359b 	.word	0x0810359b
 8103510:	0810359b 	.word	0x0810359b
 8103514:	0810359b 	.word	0x0810359b
 8103518:	0810359b 	.word	0x0810359b
 810351c:	0810358d 	.word	0x0810358d
 8103520:	2b40      	cmp	r3, #64	; 0x40
 8103522:	d036      	beq.n	8103592 <UART_SetConfig+0x6b6>
 8103524:	e039      	b.n	810359a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8103526:	f7fe ffd1 	bl	81024cc <HAL_RCCEx_GetD3PCLK1Freq>
 810352a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810352c:	e03b      	b.n	81035a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810352e:	f107 0314 	add.w	r3, r7, #20
 8103532:	4618      	mov	r0, r3
 8103534:	f7fe ffe0 	bl	81024f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103538:	69bb      	ldr	r3, [r7, #24]
 810353a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810353c:	e033      	b.n	81035a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810353e:	f107 0308 	add.w	r3, r7, #8
 8103542:	4618      	mov	r0, r3
 8103544:	f7ff f92c 	bl	81027a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103548:	68fb      	ldr	r3, [r7, #12]
 810354a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810354c:	e02b      	b.n	81035a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810354e:	4b0a      	ldr	r3, [pc, #40]	; (8103578 <UART_SetConfig+0x69c>)
 8103550:	681b      	ldr	r3, [r3, #0]
 8103552:	f003 0320 	and.w	r3, r3, #32
 8103556:	2b00      	cmp	r3, #0
 8103558:	d009      	beq.n	810356e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810355a:	4b07      	ldr	r3, [pc, #28]	; (8103578 <UART_SetConfig+0x69c>)
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	08db      	lsrs	r3, r3, #3
 8103560:	f003 0303 	and.w	r3, r3, #3
 8103564:	4a08      	ldr	r2, [pc, #32]	; (8103588 <UART_SetConfig+0x6ac>)
 8103566:	fa22 f303 	lsr.w	r3, r2, r3
 810356a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810356c:	e01b      	b.n	81035a6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 810356e:	4b06      	ldr	r3, [pc, #24]	; (8103588 <UART_SetConfig+0x6ac>)
 8103570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103572:	e018      	b.n	81035a6 <UART_SetConfig+0x6ca>
 8103574:	40011400 	.word	0x40011400
 8103578:	58024400 	.word	0x58024400
 810357c:	40007800 	.word	0x40007800
 8103580:	40007c00 	.word	0x40007c00
 8103584:	58000c00 	.word	0x58000c00
 8103588:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810358c:	4bc4      	ldr	r3, [pc, #784]	; (81038a0 <UART_SetConfig+0x9c4>)
 810358e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103590:	e009      	b.n	81035a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103598:	e005      	b.n	81035a6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810359a:	2300      	movs	r3, #0
 810359c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810359e:	2301      	movs	r3, #1
 81035a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81035a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81035a8:	2b00      	cmp	r3, #0
 81035aa:	f000 81da 	beq.w	8103962 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81035ae:	687b      	ldr	r3, [r7, #4]
 81035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81035b2:	4abc      	ldr	r2, [pc, #752]	; (81038a4 <UART_SetConfig+0x9c8>)
 81035b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81035b8:	461a      	mov	r2, r3
 81035ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81035bc:	fbb3 f3f2 	udiv	r3, r3, r2
 81035c0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	685a      	ldr	r2, [r3, #4]
 81035c6:	4613      	mov	r3, r2
 81035c8:	005b      	lsls	r3, r3, #1
 81035ca:	4413      	add	r3, r2
 81035cc:	6a3a      	ldr	r2, [r7, #32]
 81035ce:	429a      	cmp	r2, r3
 81035d0:	d305      	bcc.n	81035de <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81035d2:	687b      	ldr	r3, [r7, #4]
 81035d4:	685b      	ldr	r3, [r3, #4]
 81035d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81035d8:	6a3a      	ldr	r2, [r7, #32]
 81035da:	429a      	cmp	r2, r3
 81035dc:	d903      	bls.n	81035e6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 81035de:	2301      	movs	r3, #1
 81035e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81035e4:	e1bd      	b.n	8103962 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81035e8:	4618      	mov	r0, r3
 81035ea:	f04f 0100 	mov.w	r1, #0
 81035ee:	687b      	ldr	r3, [r7, #4]
 81035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81035f2:	4aac      	ldr	r2, [pc, #688]	; (81038a4 <UART_SetConfig+0x9c8>)
 81035f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81035f8:	b29a      	uxth	r2, r3
 81035fa:	f04f 0300 	mov.w	r3, #0
 81035fe:	f7fc fe6b 	bl	81002d8 <__aeabi_uldivmod>
 8103602:	4602      	mov	r2, r0
 8103604:	460b      	mov	r3, r1
 8103606:	4610      	mov	r0, r2
 8103608:	4619      	mov	r1, r3
 810360a:	f04f 0200 	mov.w	r2, #0
 810360e:	f04f 0300 	mov.w	r3, #0
 8103612:	020b      	lsls	r3, r1, #8
 8103614:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8103618:	0202      	lsls	r2, r0, #8
 810361a:	6879      	ldr	r1, [r7, #4]
 810361c:	6849      	ldr	r1, [r1, #4]
 810361e:	0849      	lsrs	r1, r1, #1
 8103620:	4608      	mov	r0, r1
 8103622:	f04f 0100 	mov.w	r1, #0
 8103626:	1814      	adds	r4, r2, r0
 8103628:	eb43 0501 	adc.w	r5, r3, r1
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	685b      	ldr	r3, [r3, #4]
 8103630:	461a      	mov	r2, r3
 8103632:	f04f 0300 	mov.w	r3, #0
 8103636:	4620      	mov	r0, r4
 8103638:	4629      	mov	r1, r5
 810363a:	f7fc fe4d 	bl	81002d8 <__aeabi_uldivmod>
 810363e:	4602      	mov	r2, r0
 8103640:	460b      	mov	r3, r1
 8103642:	4613      	mov	r3, r2
 8103644:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8103646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810364c:	d308      	bcc.n	8103660 <UART_SetConfig+0x784>
 810364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103654:	d204      	bcs.n	8103660 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	681b      	ldr	r3, [r3, #0]
 810365a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810365c:	60da      	str	r2, [r3, #12]
 810365e:	e180      	b.n	8103962 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8103660:	2301      	movs	r3, #1
 8103662:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8103666:	e17c      	b.n	8103962 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	69db      	ldr	r3, [r3, #28]
 810366c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103670:	f040 80be 	bne.w	81037f0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8103674:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8103678:	2b20      	cmp	r3, #32
 810367a:	dc49      	bgt.n	8103710 <UART_SetConfig+0x834>
 810367c:	2b00      	cmp	r3, #0
 810367e:	db7c      	blt.n	810377a <UART_SetConfig+0x89e>
 8103680:	2b20      	cmp	r3, #32
 8103682:	d87a      	bhi.n	810377a <UART_SetConfig+0x89e>
 8103684:	a201      	add	r2, pc, #4	; (adr r2, 810368c <UART_SetConfig+0x7b0>)
 8103686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810368a:	bf00      	nop
 810368c:	08103717 	.word	0x08103717
 8103690:	0810371f 	.word	0x0810371f
 8103694:	0810377b 	.word	0x0810377b
 8103698:	0810377b 	.word	0x0810377b
 810369c:	08103727 	.word	0x08103727
 81036a0:	0810377b 	.word	0x0810377b
 81036a4:	0810377b 	.word	0x0810377b
 81036a8:	0810377b 	.word	0x0810377b
 81036ac:	08103737 	.word	0x08103737
 81036b0:	0810377b 	.word	0x0810377b
 81036b4:	0810377b 	.word	0x0810377b
 81036b8:	0810377b 	.word	0x0810377b
 81036bc:	0810377b 	.word	0x0810377b
 81036c0:	0810377b 	.word	0x0810377b
 81036c4:	0810377b 	.word	0x0810377b
 81036c8:	0810377b 	.word	0x0810377b
 81036cc:	08103747 	.word	0x08103747
 81036d0:	0810377b 	.word	0x0810377b
 81036d4:	0810377b 	.word	0x0810377b
 81036d8:	0810377b 	.word	0x0810377b
 81036dc:	0810377b 	.word	0x0810377b
 81036e0:	0810377b 	.word	0x0810377b
 81036e4:	0810377b 	.word	0x0810377b
 81036e8:	0810377b 	.word	0x0810377b
 81036ec:	0810377b 	.word	0x0810377b
 81036f0:	0810377b 	.word	0x0810377b
 81036f4:	0810377b 	.word	0x0810377b
 81036f8:	0810377b 	.word	0x0810377b
 81036fc:	0810377b 	.word	0x0810377b
 8103700:	0810377b 	.word	0x0810377b
 8103704:	0810377b 	.word	0x0810377b
 8103708:	0810377b 	.word	0x0810377b
 810370c:	0810376d 	.word	0x0810376d
 8103710:	2b40      	cmp	r3, #64	; 0x40
 8103712:	d02e      	beq.n	8103772 <UART_SetConfig+0x896>
 8103714:	e031      	b.n	810377a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103716:	f7fd ff6d 	bl	81015f4 <HAL_RCC_GetPCLK1Freq>
 810371a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810371c:	e033      	b.n	8103786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810371e:	f7fd ff7f 	bl	8101620 <HAL_RCC_GetPCLK2Freq>
 8103722:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8103724:	e02f      	b.n	8103786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103726:	f107 0314 	add.w	r3, r7, #20
 810372a:	4618      	mov	r0, r3
 810372c:	f7fe fee4 	bl	81024f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103730:	69bb      	ldr	r3, [r7, #24]
 8103732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103734:	e027      	b.n	8103786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103736:	f107 0308 	add.w	r3, r7, #8
 810373a:	4618      	mov	r0, r3
 810373c:	f7ff f830 	bl	81027a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103740:	68fb      	ldr	r3, [r7, #12]
 8103742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103744:	e01f      	b.n	8103786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103746:	4b58      	ldr	r3, [pc, #352]	; (81038a8 <UART_SetConfig+0x9cc>)
 8103748:	681b      	ldr	r3, [r3, #0]
 810374a:	f003 0320 	and.w	r3, r3, #32
 810374e:	2b00      	cmp	r3, #0
 8103750:	d009      	beq.n	8103766 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103752:	4b55      	ldr	r3, [pc, #340]	; (81038a8 <UART_SetConfig+0x9cc>)
 8103754:	681b      	ldr	r3, [r3, #0]
 8103756:	08db      	lsrs	r3, r3, #3
 8103758:	f003 0303 	and.w	r3, r3, #3
 810375c:	4a53      	ldr	r2, [pc, #332]	; (81038ac <UART_SetConfig+0x9d0>)
 810375e:	fa22 f303 	lsr.w	r3, r2, r3
 8103762:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103764:	e00f      	b.n	8103786 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8103766:	4b51      	ldr	r3, [pc, #324]	; (81038ac <UART_SetConfig+0x9d0>)
 8103768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810376a:	e00c      	b.n	8103786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810376c:	4b4c      	ldr	r3, [pc, #304]	; (81038a0 <UART_SetConfig+0x9c4>)
 810376e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103770:	e009      	b.n	8103786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103776:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103778:	e005      	b.n	8103786 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810377a:	2300      	movs	r3, #0
 810377c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810377e:	2301      	movs	r3, #1
 8103780:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8103784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8103786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103788:	2b00      	cmp	r3, #0
 810378a:	f000 80ea 	beq.w	8103962 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810378e:	687b      	ldr	r3, [r7, #4]
 8103790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103792:	4a44      	ldr	r2, [pc, #272]	; (81038a4 <UART_SetConfig+0x9c8>)
 8103794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103798:	461a      	mov	r2, r3
 810379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810379c:	fbb3 f3f2 	udiv	r3, r3, r2
 81037a0:	005a      	lsls	r2, r3, #1
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	685b      	ldr	r3, [r3, #4]
 81037a6:	085b      	lsrs	r3, r3, #1
 81037a8:	441a      	add	r2, r3
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	685b      	ldr	r3, [r3, #4]
 81037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81037b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037b6:	2b0f      	cmp	r3, #15
 81037b8:	d916      	bls.n	81037e8 <UART_SetConfig+0x90c>
 81037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81037c0:	d212      	bcs.n	81037e8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037c4:	b29b      	uxth	r3, r3
 81037c6:	f023 030f 	bic.w	r3, r3, #15
 81037ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037ce:	085b      	lsrs	r3, r3, #1
 81037d0:	b29b      	uxth	r3, r3
 81037d2:	f003 0307 	and.w	r3, r3, #7
 81037d6:	b29a      	uxth	r2, r3
 81037d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81037da:	4313      	orrs	r3, r2
 81037dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	681b      	ldr	r3, [r3, #0]
 81037e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81037e4:	60da      	str	r2, [r3, #12]
 81037e6:	e0bc      	b.n	8103962 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81037e8:	2301      	movs	r3, #1
 81037ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81037ee:	e0b8      	b.n	8103962 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 81037f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81037f4:	2b20      	cmp	r3, #32
 81037f6:	dc4b      	bgt.n	8103890 <UART_SetConfig+0x9b4>
 81037f8:	2b00      	cmp	r3, #0
 81037fa:	f2c0 8087 	blt.w	810390c <UART_SetConfig+0xa30>
 81037fe:	2b20      	cmp	r3, #32
 8103800:	f200 8084 	bhi.w	810390c <UART_SetConfig+0xa30>
 8103804:	a201      	add	r2, pc, #4	; (adr r2, 810380c <UART_SetConfig+0x930>)
 8103806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810380a:	bf00      	nop
 810380c:	08103897 	.word	0x08103897
 8103810:	081038b1 	.word	0x081038b1
 8103814:	0810390d 	.word	0x0810390d
 8103818:	0810390d 	.word	0x0810390d
 810381c:	081038b9 	.word	0x081038b9
 8103820:	0810390d 	.word	0x0810390d
 8103824:	0810390d 	.word	0x0810390d
 8103828:	0810390d 	.word	0x0810390d
 810382c:	081038c9 	.word	0x081038c9
 8103830:	0810390d 	.word	0x0810390d
 8103834:	0810390d 	.word	0x0810390d
 8103838:	0810390d 	.word	0x0810390d
 810383c:	0810390d 	.word	0x0810390d
 8103840:	0810390d 	.word	0x0810390d
 8103844:	0810390d 	.word	0x0810390d
 8103848:	0810390d 	.word	0x0810390d
 810384c:	081038d9 	.word	0x081038d9
 8103850:	0810390d 	.word	0x0810390d
 8103854:	0810390d 	.word	0x0810390d
 8103858:	0810390d 	.word	0x0810390d
 810385c:	0810390d 	.word	0x0810390d
 8103860:	0810390d 	.word	0x0810390d
 8103864:	0810390d 	.word	0x0810390d
 8103868:	0810390d 	.word	0x0810390d
 810386c:	0810390d 	.word	0x0810390d
 8103870:	0810390d 	.word	0x0810390d
 8103874:	0810390d 	.word	0x0810390d
 8103878:	0810390d 	.word	0x0810390d
 810387c:	0810390d 	.word	0x0810390d
 8103880:	0810390d 	.word	0x0810390d
 8103884:	0810390d 	.word	0x0810390d
 8103888:	0810390d 	.word	0x0810390d
 810388c:	081038ff 	.word	0x081038ff
 8103890:	2b40      	cmp	r3, #64	; 0x40
 8103892:	d037      	beq.n	8103904 <UART_SetConfig+0xa28>
 8103894:	e03a      	b.n	810390c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103896:	f7fd fead 	bl	81015f4 <HAL_RCC_GetPCLK1Freq>
 810389a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810389c:	e03c      	b.n	8103918 <UART_SetConfig+0xa3c>
 810389e:	bf00      	nop
 81038a0:	003d0900 	.word	0x003d0900
 81038a4:	08103f8c 	.word	0x08103f8c
 81038a8:	58024400 	.word	0x58024400
 81038ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81038b0:	f7fd feb6 	bl	8101620 <HAL_RCC_GetPCLK2Freq>
 81038b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81038b6:	e02f      	b.n	8103918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81038b8:	f107 0314 	add.w	r3, r7, #20
 81038bc:	4618      	mov	r0, r3
 81038be:	f7fe fe1b 	bl	81024f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81038c2:	69bb      	ldr	r3, [r7, #24]
 81038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81038c6:	e027      	b.n	8103918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81038c8:	f107 0308 	add.w	r3, r7, #8
 81038cc:	4618      	mov	r0, r3
 81038ce:	f7fe ff67 	bl	81027a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81038d2:	68fb      	ldr	r3, [r7, #12]
 81038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81038d6:	e01f      	b.n	8103918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81038d8:	4b2c      	ldr	r3, [pc, #176]	; (810398c <UART_SetConfig+0xab0>)
 81038da:	681b      	ldr	r3, [r3, #0]
 81038dc:	f003 0320 	and.w	r3, r3, #32
 81038e0:	2b00      	cmp	r3, #0
 81038e2:	d009      	beq.n	81038f8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81038e4:	4b29      	ldr	r3, [pc, #164]	; (810398c <UART_SetConfig+0xab0>)
 81038e6:	681b      	ldr	r3, [r3, #0]
 81038e8:	08db      	lsrs	r3, r3, #3
 81038ea:	f003 0303 	and.w	r3, r3, #3
 81038ee:	4a28      	ldr	r2, [pc, #160]	; (8103990 <UART_SetConfig+0xab4>)
 81038f0:	fa22 f303 	lsr.w	r3, r2, r3
 81038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81038f6:	e00f      	b.n	8103918 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 81038f8:	4b25      	ldr	r3, [pc, #148]	; (8103990 <UART_SetConfig+0xab4>)
 81038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81038fc:	e00c      	b.n	8103918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81038fe:	4b25      	ldr	r3, [pc, #148]	; (8103994 <UART_SetConfig+0xab8>)
 8103900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103902:	e009      	b.n	8103918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103908:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810390a:	e005      	b.n	8103918 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810390c:	2300      	movs	r3, #0
 810390e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8103910:	2301      	movs	r3, #1
 8103912:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8103916:	bf00      	nop
    }

    if (pclk != 0U)
 8103918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810391a:	2b00      	cmp	r3, #0
 810391c:	d021      	beq.n	8103962 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103922:	4a1d      	ldr	r2, [pc, #116]	; (8103998 <UART_SetConfig+0xabc>)
 8103924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103928:	461a      	mov	r2, r3
 810392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810392c:	fbb3 f2f2 	udiv	r2, r3, r2
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	685b      	ldr	r3, [r3, #4]
 8103934:	085b      	lsrs	r3, r3, #1
 8103936:	441a      	add	r2, r3
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	685b      	ldr	r3, [r3, #4]
 810393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8103940:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103944:	2b0f      	cmp	r3, #15
 8103946:	d909      	bls.n	810395c <UART_SetConfig+0xa80>
 8103948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810394a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810394e:	d205      	bcs.n	810395c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8103950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103952:	b29a      	uxth	r2, r3
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	60da      	str	r2, [r3, #12]
 810395a:	e002      	b.n	8103962 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810395c:	2301      	movs	r3, #1
 810395e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	2201      	movs	r2, #1
 8103966:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	2201      	movs	r2, #1
 810396e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	2200      	movs	r2, #0
 8103976:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	2200      	movs	r2, #0
 810397c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810397e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8103982:	4618      	mov	r0, r3
 8103984:	3738      	adds	r7, #56	; 0x38
 8103986:	46bd      	mov	sp, r7
 8103988:	bdb0      	pop	{r4, r5, r7, pc}
 810398a:	bf00      	nop
 810398c:	58024400 	.word	0x58024400
 8103990:	03d09000 	.word	0x03d09000
 8103994:	003d0900 	.word	0x003d0900
 8103998:	08103f8c 	.word	0x08103f8c

0810399c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810399c:	b480      	push	{r7}
 810399e:	b083      	sub	sp, #12
 81039a0:	af00      	add	r7, sp, #0
 81039a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039a8:	f003 0301 	and.w	r3, r3, #1
 81039ac:	2b00      	cmp	r3, #0
 81039ae:	d00a      	beq.n	81039c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81039b0:	687b      	ldr	r3, [r7, #4]
 81039b2:	681b      	ldr	r3, [r3, #0]
 81039b4:	685b      	ldr	r3, [r3, #4]
 81039b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	430a      	orrs	r2, r1
 81039c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039ca:	f003 0302 	and.w	r3, r3, #2
 81039ce:	2b00      	cmp	r3, #0
 81039d0:	d00a      	beq.n	81039e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	681b      	ldr	r3, [r3, #0]
 81039d6:	685b      	ldr	r3, [r3, #4]
 81039d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	430a      	orrs	r2, r1
 81039e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039ec:	f003 0304 	and.w	r3, r3, #4
 81039f0:	2b00      	cmp	r3, #0
 81039f2:	d00a      	beq.n	8103a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	681b      	ldr	r3, [r3, #0]
 81039f8:	685b      	ldr	r3, [r3, #4]
 81039fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	681b      	ldr	r3, [r3, #0]
 8103a06:	430a      	orrs	r2, r1
 8103a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8103a0a:	687b      	ldr	r3, [r7, #4]
 8103a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a0e:	f003 0308 	and.w	r3, r3, #8
 8103a12:	2b00      	cmp	r3, #0
 8103a14:	d00a      	beq.n	8103a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	685b      	ldr	r3, [r3, #4]
 8103a1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	681b      	ldr	r3, [r3, #0]
 8103a28:	430a      	orrs	r2, r1
 8103a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a30:	f003 0310 	and.w	r3, r3, #16
 8103a34:	2b00      	cmp	r3, #0
 8103a36:	d00a      	beq.n	8103a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	681b      	ldr	r3, [r3, #0]
 8103a3c:	689b      	ldr	r3, [r3, #8]
 8103a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8103a46:	687b      	ldr	r3, [r7, #4]
 8103a48:	681b      	ldr	r3, [r3, #0]
 8103a4a:	430a      	orrs	r2, r1
 8103a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a52:	f003 0320 	and.w	r3, r3, #32
 8103a56:	2b00      	cmp	r3, #0
 8103a58:	d00a      	beq.n	8103a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	689b      	ldr	r3, [r3, #8]
 8103a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	430a      	orrs	r2, r1
 8103a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103a78:	2b00      	cmp	r3, #0
 8103a7a:	d01a      	beq.n	8103ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	685b      	ldr	r3, [r3, #4]
 8103a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103a8a:	687b      	ldr	r3, [r7, #4]
 8103a8c:	681b      	ldr	r3, [r3, #0]
 8103a8e:	430a      	orrs	r2, r1
 8103a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103a92:	687b      	ldr	r3, [r7, #4]
 8103a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103a9a:	d10a      	bne.n	8103ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	681b      	ldr	r3, [r3, #0]
 8103aa0:	685b      	ldr	r3, [r3, #4]
 8103aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	430a      	orrs	r2, r1
 8103ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103aba:	2b00      	cmp	r3, #0
 8103abc:	d00a      	beq.n	8103ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8103abe:	687b      	ldr	r3, [r7, #4]
 8103ac0:	681b      	ldr	r3, [r3, #0]
 8103ac2:	685b      	ldr	r3, [r3, #4]
 8103ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8103acc:	687b      	ldr	r3, [r7, #4]
 8103ace:	681b      	ldr	r3, [r3, #0]
 8103ad0:	430a      	orrs	r2, r1
 8103ad2:	605a      	str	r2, [r3, #4]
  }
}
 8103ad4:	bf00      	nop
 8103ad6:	370c      	adds	r7, #12
 8103ad8:	46bd      	mov	sp, r7
 8103ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ade:	4770      	bx	lr

08103ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8103ae0:	b580      	push	{r7, lr}
 8103ae2:	b086      	sub	sp, #24
 8103ae4:	af02      	add	r7, sp, #8
 8103ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	2200      	movs	r2, #0
 8103aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8103af0:	f7fc ffc0 	bl	8100a74 <HAL_GetTick>
 8103af4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8103af6:	687b      	ldr	r3, [r7, #4]
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	f003 0308 	and.w	r3, r3, #8
 8103b00:	2b08      	cmp	r3, #8
 8103b02:	d10e      	bne.n	8103b22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8103b08:	9300      	str	r3, [sp, #0]
 8103b0a:	68fb      	ldr	r3, [r7, #12]
 8103b0c:	2200      	movs	r2, #0
 8103b0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8103b12:	6878      	ldr	r0, [r7, #4]
 8103b14:	f000 f82f 	bl	8103b76 <UART_WaitOnFlagUntilTimeout>
 8103b18:	4603      	mov	r3, r0
 8103b1a:	2b00      	cmp	r3, #0
 8103b1c:	d001      	beq.n	8103b22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103b1e:	2303      	movs	r3, #3
 8103b20:	e025      	b.n	8103b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	681b      	ldr	r3, [r3, #0]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	f003 0304 	and.w	r3, r3, #4
 8103b2c:	2b04      	cmp	r3, #4
 8103b2e:	d10e      	bne.n	8103b4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8103b34:	9300      	str	r3, [sp, #0]
 8103b36:	68fb      	ldr	r3, [r7, #12]
 8103b38:	2200      	movs	r2, #0
 8103b3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8103b3e:	6878      	ldr	r0, [r7, #4]
 8103b40:	f000 f819 	bl	8103b76 <UART_WaitOnFlagUntilTimeout>
 8103b44:	4603      	mov	r3, r0
 8103b46:	2b00      	cmp	r3, #0
 8103b48:	d001      	beq.n	8103b4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103b4a:	2303      	movs	r3, #3
 8103b4c:	e00f      	b.n	8103b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	2220      	movs	r2, #32
 8103b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	2220      	movs	r2, #32
 8103b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	2200      	movs	r2, #0
 8103b62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	2200      	movs	r2, #0
 8103b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103b6c:	2300      	movs	r3, #0
}
 8103b6e:	4618      	mov	r0, r3
 8103b70:	3710      	adds	r7, #16
 8103b72:	46bd      	mov	sp, r7
 8103b74:	bd80      	pop	{r7, pc}

08103b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8103b76:	b580      	push	{r7, lr}
 8103b78:	b09c      	sub	sp, #112	; 0x70
 8103b7a:	af00      	add	r7, sp, #0
 8103b7c:	60f8      	str	r0, [r7, #12]
 8103b7e:	60b9      	str	r1, [r7, #8]
 8103b80:	603b      	str	r3, [r7, #0]
 8103b82:	4613      	mov	r3, r2
 8103b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103b86:	e0a9      	b.n	8103cdc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103b8e:	f000 80a5 	beq.w	8103cdc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103b92:	f7fc ff6f 	bl	8100a74 <HAL_GetTick>
 8103b96:	4602      	mov	r2, r0
 8103b98:	683b      	ldr	r3, [r7, #0]
 8103b9a:	1ad3      	subs	r3, r2, r3
 8103b9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8103b9e:	429a      	cmp	r2, r3
 8103ba0:	d302      	bcc.n	8103ba8 <UART_WaitOnFlagUntilTimeout+0x32>
 8103ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8103ba4:	2b00      	cmp	r3, #0
 8103ba6:	d140      	bne.n	8103c2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8103ba8:	68fb      	ldr	r3, [r7, #12]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103bb0:	e853 3f00 	ldrex	r3, [r3]
 8103bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8103bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103bb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8103bbe:	68fb      	ldr	r3, [r7, #12]
 8103bc0:	681b      	ldr	r3, [r3, #0]
 8103bc2:	461a      	mov	r2, r3
 8103bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8103bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8103bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8103bcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8103bce:	e841 2300 	strex	r3, r2, [r1]
 8103bd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8103bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103bd6:	2b00      	cmp	r3, #0
 8103bd8:	d1e6      	bne.n	8103ba8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103bda:	68fb      	ldr	r3, [r7, #12]
 8103bdc:	681b      	ldr	r3, [r3, #0]
 8103bde:	3308      	adds	r3, #8
 8103be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103be4:	e853 3f00 	ldrex	r3, [r3]
 8103be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8103bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103bec:	f023 0301 	bic.w	r3, r3, #1
 8103bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8103bf2:	68fb      	ldr	r3, [r7, #12]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	3308      	adds	r3, #8
 8103bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8103bfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8103bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8103c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8103c02:	e841 2300 	strex	r3, r2, [r1]
 8103c06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8103c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103c0a:	2b00      	cmp	r3, #0
 8103c0c:	d1e5      	bne.n	8103bda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8103c0e:	68fb      	ldr	r3, [r7, #12]
 8103c10:	2220      	movs	r2, #32
 8103c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8103c16:	68fb      	ldr	r3, [r7, #12]
 8103c18:	2220      	movs	r2, #32
 8103c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8103c1e:	68fb      	ldr	r3, [r7, #12]
 8103c20:	2200      	movs	r2, #0
 8103c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8103c26:	2303      	movs	r3, #3
 8103c28:	e069      	b.n	8103cfe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8103c2a:	68fb      	ldr	r3, [r7, #12]
 8103c2c:	681b      	ldr	r3, [r3, #0]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	f003 0304 	and.w	r3, r3, #4
 8103c34:	2b00      	cmp	r3, #0
 8103c36:	d051      	beq.n	8103cdc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8103c38:	68fb      	ldr	r3, [r7, #12]
 8103c3a:	681b      	ldr	r3, [r3, #0]
 8103c3c:	69db      	ldr	r3, [r3, #28]
 8103c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103c46:	d149      	bne.n	8103cdc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8103c48:	68fb      	ldr	r3, [r7, #12]
 8103c4a:	681b      	ldr	r3, [r3, #0]
 8103c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8103c50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8103c52:	68fb      	ldr	r3, [r7, #12]
 8103c54:	681b      	ldr	r3, [r3, #0]
 8103c56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103c5a:	e853 3f00 	ldrex	r3, [r3]
 8103c5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8103c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103c62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8103c66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8103c68:	68fb      	ldr	r3, [r7, #12]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	461a      	mov	r2, r3
 8103c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103c70:	637b      	str	r3, [r7, #52]	; 0x34
 8103c72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103c74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8103c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103c78:	e841 2300 	strex	r3, r2, [r1]
 8103c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8103c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103c80:	2b00      	cmp	r3, #0
 8103c82:	d1e6      	bne.n	8103c52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103c84:	68fb      	ldr	r3, [r7, #12]
 8103c86:	681b      	ldr	r3, [r3, #0]
 8103c88:	3308      	adds	r3, #8
 8103c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103c8c:	697b      	ldr	r3, [r7, #20]
 8103c8e:	e853 3f00 	ldrex	r3, [r3]
 8103c92:	613b      	str	r3, [r7, #16]
   return(result);
 8103c94:	693b      	ldr	r3, [r7, #16]
 8103c96:	f023 0301 	bic.w	r3, r3, #1
 8103c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8103c9c:	68fb      	ldr	r3, [r7, #12]
 8103c9e:	681b      	ldr	r3, [r3, #0]
 8103ca0:	3308      	adds	r3, #8
 8103ca2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8103ca4:	623a      	str	r2, [r7, #32]
 8103ca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103ca8:	69f9      	ldr	r1, [r7, #28]
 8103caa:	6a3a      	ldr	r2, [r7, #32]
 8103cac:	e841 2300 	strex	r3, r2, [r1]
 8103cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8103cb2:	69bb      	ldr	r3, [r7, #24]
 8103cb4:	2b00      	cmp	r3, #0
 8103cb6:	d1e5      	bne.n	8103c84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8103cb8:	68fb      	ldr	r3, [r7, #12]
 8103cba:	2220      	movs	r2, #32
 8103cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8103cc0:	68fb      	ldr	r3, [r7, #12]
 8103cc2:	2220      	movs	r2, #32
 8103cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8103cc8:	68fb      	ldr	r3, [r7, #12]
 8103cca:	2220      	movs	r2, #32
 8103ccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8103cd0:	68fb      	ldr	r3, [r7, #12]
 8103cd2:	2200      	movs	r2, #0
 8103cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8103cd8:	2303      	movs	r3, #3
 8103cda:	e010      	b.n	8103cfe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103cdc:	68fb      	ldr	r3, [r7, #12]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	69da      	ldr	r2, [r3, #28]
 8103ce2:	68bb      	ldr	r3, [r7, #8]
 8103ce4:	4013      	ands	r3, r2
 8103ce6:	68ba      	ldr	r2, [r7, #8]
 8103ce8:	429a      	cmp	r2, r3
 8103cea:	bf0c      	ite	eq
 8103cec:	2301      	moveq	r3, #1
 8103cee:	2300      	movne	r3, #0
 8103cf0:	b2db      	uxtb	r3, r3
 8103cf2:	461a      	mov	r2, r3
 8103cf4:	79fb      	ldrb	r3, [r7, #7]
 8103cf6:	429a      	cmp	r2, r3
 8103cf8:	f43f af46 	beq.w	8103b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8103cfc:	2300      	movs	r3, #0
}
 8103cfe:	4618      	mov	r0, r3
 8103d00:	3770      	adds	r7, #112	; 0x70
 8103d02:	46bd      	mov	sp, r7
 8103d04:	bd80      	pop	{r7, pc}

08103d06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8103d06:	b480      	push	{r7}
 8103d08:	b085      	sub	sp, #20
 8103d0a:	af00      	add	r7, sp, #0
 8103d0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103d14:	2b01      	cmp	r3, #1
 8103d16:	d101      	bne.n	8103d1c <HAL_UARTEx_DisableFifoMode+0x16>
 8103d18:	2302      	movs	r3, #2
 8103d1a:	e027      	b.n	8103d6c <HAL_UARTEx_DisableFifoMode+0x66>
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	2201      	movs	r2, #1
 8103d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103d24:	687b      	ldr	r3, [r7, #4]
 8103d26:	2224      	movs	r2, #36	; 0x24
 8103d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	681a      	ldr	r2, [r3, #0]
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	681b      	ldr	r3, [r3, #0]
 8103d3e:	f022 0201 	bic.w	r2, r2, #1
 8103d42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8103d44:	68fb      	ldr	r3, [r7, #12]
 8103d46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8103d4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8103d4c:	687b      	ldr	r3, [r7, #4]
 8103d4e:	2200      	movs	r2, #0
 8103d50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103d52:	687b      	ldr	r3, [r7, #4]
 8103d54:	681b      	ldr	r3, [r3, #0]
 8103d56:	68fa      	ldr	r2, [r7, #12]
 8103d58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	2220      	movs	r2, #32
 8103d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	2200      	movs	r2, #0
 8103d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103d6a:	2300      	movs	r3, #0
}
 8103d6c:	4618      	mov	r0, r3
 8103d6e:	3714      	adds	r7, #20
 8103d70:	46bd      	mov	sp, r7
 8103d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d76:	4770      	bx	lr

08103d78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8103d78:	b580      	push	{r7, lr}
 8103d7a:	b084      	sub	sp, #16
 8103d7c:	af00      	add	r7, sp, #0
 8103d7e:	6078      	str	r0, [r7, #4]
 8103d80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103d88:	2b01      	cmp	r3, #1
 8103d8a:	d101      	bne.n	8103d90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8103d8c:	2302      	movs	r3, #2
 8103d8e:	e02d      	b.n	8103dec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	2201      	movs	r2, #1
 8103d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	2224      	movs	r2, #36	; 0x24
 8103d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	681b      	ldr	r3, [r3, #0]
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103da8:	687b      	ldr	r3, [r7, #4]
 8103daa:	681b      	ldr	r3, [r3, #0]
 8103dac:	681a      	ldr	r2, [r3, #0]
 8103dae:	687b      	ldr	r3, [r7, #4]
 8103db0:	681b      	ldr	r3, [r3, #0]
 8103db2:	f022 0201 	bic.w	r2, r2, #1
 8103db6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	681b      	ldr	r3, [r3, #0]
 8103dbc:	689b      	ldr	r3, [r3, #8]
 8103dbe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	683a      	ldr	r2, [r7, #0]
 8103dc8:	430a      	orrs	r2, r1
 8103dca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8103dcc:	6878      	ldr	r0, [r7, #4]
 8103dce:	f000 f84f 	bl	8103e70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	68fa      	ldr	r2, [r7, #12]
 8103dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103dda:	687b      	ldr	r3, [r7, #4]
 8103ddc:	2220      	movs	r2, #32
 8103dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103de2:	687b      	ldr	r3, [r7, #4]
 8103de4:	2200      	movs	r2, #0
 8103de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103dea:	2300      	movs	r3, #0
}
 8103dec:	4618      	mov	r0, r3
 8103dee:	3710      	adds	r7, #16
 8103df0:	46bd      	mov	sp, r7
 8103df2:	bd80      	pop	{r7, pc}

08103df4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8103df4:	b580      	push	{r7, lr}
 8103df6:	b084      	sub	sp, #16
 8103df8:	af00      	add	r7, sp, #0
 8103dfa:	6078      	str	r0, [r7, #4]
 8103dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103e04:	2b01      	cmp	r3, #1
 8103e06:	d101      	bne.n	8103e0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8103e08:	2302      	movs	r3, #2
 8103e0a:	e02d      	b.n	8103e68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	2201      	movs	r2, #1
 8103e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	2224      	movs	r2, #36	; 0x24
 8103e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	681b      	ldr	r3, [r3, #0]
 8103e22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	681a      	ldr	r2, [r3, #0]
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	681b      	ldr	r3, [r3, #0]
 8103e2e:	f022 0201 	bic.w	r2, r2, #1
 8103e32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	681b      	ldr	r3, [r3, #0]
 8103e38:	689b      	ldr	r3, [r3, #8]
 8103e3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8103e3e:	687b      	ldr	r3, [r7, #4]
 8103e40:	681b      	ldr	r3, [r3, #0]
 8103e42:	683a      	ldr	r2, [r7, #0]
 8103e44:	430a      	orrs	r2, r1
 8103e46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8103e48:	6878      	ldr	r0, [r7, #4]
 8103e4a:	f000 f811 	bl	8103e70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	681b      	ldr	r3, [r3, #0]
 8103e52:	68fa      	ldr	r2, [r7, #12]
 8103e54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	2220      	movs	r2, #32
 8103e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8103e5e:	687b      	ldr	r3, [r7, #4]
 8103e60:	2200      	movs	r2, #0
 8103e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8103e66:	2300      	movs	r3, #0
}
 8103e68:	4618      	mov	r0, r3
 8103e6a:	3710      	adds	r7, #16
 8103e6c:	46bd      	mov	sp, r7
 8103e6e:	bd80      	pop	{r7, pc}

08103e70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8103e70:	b480      	push	{r7}
 8103e72:	b085      	sub	sp, #20
 8103e74:	af00      	add	r7, sp, #0
 8103e76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8103e78:	687b      	ldr	r3, [r7, #4]
 8103e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103e7c:	2b00      	cmp	r3, #0
 8103e7e:	d108      	bne.n	8103e92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	2201      	movs	r2, #1
 8103e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	2201      	movs	r2, #1
 8103e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8103e90:	e031      	b.n	8103ef6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8103e92:	2310      	movs	r3, #16
 8103e94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8103e96:	2310      	movs	r3, #16
 8103e98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	689b      	ldr	r3, [r3, #8]
 8103ea0:	0e5b      	lsrs	r3, r3, #25
 8103ea2:	b2db      	uxtb	r3, r3
 8103ea4:	f003 0307 	and.w	r3, r3, #7
 8103ea8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8103eaa:	687b      	ldr	r3, [r7, #4]
 8103eac:	681b      	ldr	r3, [r3, #0]
 8103eae:	689b      	ldr	r3, [r3, #8]
 8103eb0:	0f5b      	lsrs	r3, r3, #29
 8103eb2:	b2db      	uxtb	r3, r3
 8103eb4:	f003 0307 	and.w	r3, r3, #7
 8103eb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8103eba:	7bbb      	ldrb	r3, [r7, #14]
 8103ebc:	7b3a      	ldrb	r2, [r7, #12]
 8103ebe:	4911      	ldr	r1, [pc, #68]	; (8103f04 <UARTEx_SetNbDataToProcess+0x94>)
 8103ec0:	5c8a      	ldrb	r2, [r1, r2]
 8103ec2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8103ec6:	7b3a      	ldrb	r2, [r7, #12]
 8103ec8:	490f      	ldr	r1, [pc, #60]	; (8103f08 <UARTEx_SetNbDataToProcess+0x98>)
 8103eca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8103ecc:	fb93 f3f2 	sdiv	r3, r3, r2
 8103ed0:	b29a      	uxth	r2, r3
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8103ed8:	7bfb      	ldrb	r3, [r7, #15]
 8103eda:	7b7a      	ldrb	r2, [r7, #13]
 8103edc:	4909      	ldr	r1, [pc, #36]	; (8103f04 <UARTEx_SetNbDataToProcess+0x94>)
 8103ede:	5c8a      	ldrb	r2, [r1, r2]
 8103ee0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8103ee4:	7b7a      	ldrb	r2, [r7, #13]
 8103ee6:	4908      	ldr	r1, [pc, #32]	; (8103f08 <UARTEx_SetNbDataToProcess+0x98>)
 8103ee8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8103eea:	fb93 f3f2 	sdiv	r3, r3, r2
 8103eee:	b29a      	uxth	r2, r3
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8103ef6:	bf00      	nop
 8103ef8:	3714      	adds	r7, #20
 8103efa:	46bd      	mov	sp, r7
 8103efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f00:	4770      	bx	lr
 8103f02:	bf00      	nop
 8103f04:	08103fa4 	.word	0x08103fa4
 8103f08:	08103fac 	.word	0x08103fac

08103f0c <__libc_init_array>:
 8103f0c:	b570      	push	{r4, r5, r6, lr}
 8103f0e:	4d0d      	ldr	r5, [pc, #52]	; (8103f44 <__libc_init_array+0x38>)
 8103f10:	4c0d      	ldr	r4, [pc, #52]	; (8103f48 <__libc_init_array+0x3c>)
 8103f12:	1b64      	subs	r4, r4, r5
 8103f14:	10a4      	asrs	r4, r4, #2
 8103f16:	2600      	movs	r6, #0
 8103f18:	42a6      	cmp	r6, r4
 8103f1a:	d109      	bne.n	8103f30 <__libc_init_array+0x24>
 8103f1c:	4d0b      	ldr	r5, [pc, #44]	; (8103f4c <__libc_init_array+0x40>)
 8103f1e:	4c0c      	ldr	r4, [pc, #48]	; (8103f50 <__libc_init_array+0x44>)
 8103f20:	f000 f820 	bl	8103f64 <_init>
 8103f24:	1b64      	subs	r4, r4, r5
 8103f26:	10a4      	asrs	r4, r4, #2
 8103f28:	2600      	movs	r6, #0
 8103f2a:	42a6      	cmp	r6, r4
 8103f2c:	d105      	bne.n	8103f3a <__libc_init_array+0x2e>
 8103f2e:	bd70      	pop	{r4, r5, r6, pc}
 8103f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8103f34:	4798      	blx	r3
 8103f36:	3601      	adds	r6, #1
 8103f38:	e7ee      	b.n	8103f18 <__libc_init_array+0xc>
 8103f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8103f3e:	4798      	blx	r3
 8103f40:	3601      	adds	r6, #1
 8103f42:	e7f2      	b.n	8103f2a <__libc_init_array+0x1e>
 8103f44:	08103fbc 	.word	0x08103fbc
 8103f48:	08103fbc 	.word	0x08103fbc
 8103f4c:	08103fbc 	.word	0x08103fbc
 8103f50:	08103fc0 	.word	0x08103fc0

08103f54 <memset>:
 8103f54:	4402      	add	r2, r0
 8103f56:	4603      	mov	r3, r0
 8103f58:	4293      	cmp	r3, r2
 8103f5a:	d100      	bne.n	8103f5e <memset+0xa>
 8103f5c:	4770      	bx	lr
 8103f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8103f62:	e7f9      	b.n	8103f58 <memset+0x4>

08103f64 <_init>:
 8103f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103f66:	bf00      	nop
 8103f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103f6a:	bc08      	pop	{r3}
 8103f6c:	469e      	mov	lr, r3
 8103f6e:	4770      	bx	lr

08103f70 <_fini>:
 8103f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103f72:	bf00      	nop
 8103f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103f76:	bc08      	pop	{r3}
 8103f78:	469e      	mov	lr, r3
 8103f7a:	4770      	bx	lr
