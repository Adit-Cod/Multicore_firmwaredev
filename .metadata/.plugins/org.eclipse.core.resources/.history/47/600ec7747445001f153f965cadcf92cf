
4_HSEMCoreDev_PeripheralManagement_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d7c  08004d7c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d84  08004d84  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d84  08004d84  00014d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  08004d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  24000018  08004da4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c8  08004da4  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001891e  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fe  00000000  00000000  00038964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0003b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  0003bb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038c36  00000000  00000000  0003c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e769  00000000  00000000  000751d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00179f63  00000000  00000000  0008393f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001fd8a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c80  00000000  00000000  001fd8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000018 	.word	0x24000018
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004d2c 	.word	0x08004d2c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400001c 	.word	0x2400001c
 80002d4:	08004d2c 	.word	0x08004d2c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000710:	bf00      	nop
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <main+0xb8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d004      	beq.n	8000728 <main+0x24>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	1e5a      	subs	r2, r3, #1
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	dcf4      	bgt.n	8000712 <main+0xe>
  if ( timeout < 0 )
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	da01      	bge.n	8000732 <main+0x2e>
  {
  Error_Handler();
 800072e:	f000 f969 	bl	8000a04 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fa4d 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f847 	bl	80007c8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <main+0xb8>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <main+0xb8>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <main+0xb8>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fdf7 	bl	800134c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fe0d 	bl	8001380 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <main+0xb8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x80>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6a>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8a>
{
Error_Handler();
 800078a:	f000 f93b 	bl	8000a04 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f8e5 	bl	800095c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f897 	bl	80008c4 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_HSEM_Take(HSEM_ID_1,0);
 8000796:	2100      	movs	r1, #0
 8000798:	2001      	movs	r0, #1
 800079a:	f000 fdb5 	bl	8001308 <HAL_HSEM_Take>
		//HAL_GPIO_TogglePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin);
		HAL_UART_Transmit(&huart3,(uint8_t*)temp_buff,10,100);
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	220a      	movs	r2, #10
 80007a2:	4907      	ldr	r1, [pc, #28]	; (80007c0 <main+0xbc>)
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <main+0xc0>)
 80007a6:	f003 f9e7 	bl	8003b78 <HAL_UART_Transmit>
		HAL_Delay(500);
 80007aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ae:	f000 faa1 	bl	8000cf4 <HAL_Delay>
		/* Release The Hardware Semaphore */
		HAL_HSEM_Release(HSEM_ID_1,0);
 80007b2:	2100      	movs	r1, #0
 80007b4:	2001      	movs	r0, #1
 80007b6:	f000 fde3 	bl	8001380 <HAL_HSEM_Release>
		HAL_HSEM_Take(HSEM_ID_1,0);
 80007ba:	e7ec      	b.n	8000796 <main+0x92>
 80007bc:	58024400 	.word	0x58024400
 80007c0:	24000008 	.word	0x24000008
 80007c4:	24000034 	.word	0x24000034

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b09c      	sub	sp, #112	; 0x70
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	224c      	movs	r2, #76	; 0x4c
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 faa0 	bl	8004d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2220      	movs	r2, #32
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fa9a 	bl	8004d1c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007e8:	2004      	movs	r0, #4
 80007ea:	f000 fe01 	bl	80013f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <SystemClock_Config+0xf4>)
 80007f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f6:	4a31      	ldr	r2, [pc, #196]	; (80008bc <SystemClock_Config+0xf4>)
 80007f8:	f023 0301 	bic.w	r3, r3, #1
 80007fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007fe:	4b2f      	ldr	r3, [pc, #188]	; (80008bc <SystemClock_Config+0xf4>)
 8000800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	4b2d      	ldr	r3, [pc, #180]	; (80008c0 <SystemClock_Config+0xf8>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000810:	4a2b      	ldr	r2, [pc, #172]	; (80008c0 <SystemClock_Config+0xf8>)
 8000812:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b29      	ldr	r3, [pc, #164]	; (80008c0 <SystemClock_Config+0xf8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000824:	bf00      	nop
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <SystemClock_Config+0xf8>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800082e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000832:	d1f8      	bne.n	8000826 <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000838:	2301      	movs	r3, #1
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 800084c:	2309      	movs	r3, #9
 800084e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000850:	2302      	movs	r3, #2
 8000852:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800085c:	230c      	movs	r3, #12
 800085e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000860:	2302      	movs	r3, #2
 8000862:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000864:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000868:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fe18 	bl	80014a4 <HAL_RCC_OscConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800087a:	f000 f8c3 	bl	8000a04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800087e:	233f      	movs	r3, #63	; 0x3f
 8000880:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	2303      	movs	r3, #3
 8000884:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2101      	movs	r1, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fa2a 	bl	8001cfc <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80008ae:	f000 f8a9 	bl	8000a04 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3770      	adds	r7, #112	; 0x70
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	58000400 	.word	0x58000400
 80008c0:	58024800 	.word	0x58024800

080008c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008ca:	4a23      	ldr	r2, [pc, #140]	; (8000958 <MX_USART3_UART_Init+0x94>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b1c      	ldr	r3, [pc, #112]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USART3_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090c:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_USART3_UART_Init+0x90>)
 800090e:	f003 f8e3 	bl	8003ad8 <HAL_UART_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 f874 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	480d      	ldr	r0, [pc, #52]	; (8000954 <MX_USART3_UART_Init+0x90>)
 8000920:	f004 f90e 	bl	8004b40 <HAL_UARTEx_SetTxFifoThreshold>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800092a:	f000 f86b 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092e:	2100      	movs	r1, #0
 8000930:	4808      	ldr	r0, [pc, #32]	; (8000954 <MX_USART3_UART_Init+0x90>)
 8000932:	f004 f943 	bl	8004bbc <HAL_UARTEx_SetRxFifoThreshold>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800093c:	f000 f862 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_USART3_UART_Init+0x90>)
 8000942:	f004 f8c4 	bl	8004ace <HAL_UARTEx_DisableFifoMode>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800094c:	f000 f85a 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	24000034 	.word	0x24000034
 8000958:	40004800 	.word	0x40004800

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <MX_GPIO_Init+0xa0>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	4a20      	ldr	r2, [pc, #128]	; (80009fc <MX_GPIO_Init+0xa0>)
 800097a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_GPIO_Init+0xa0>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_GPIO_Init+0xa0>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	4a19      	ldr	r2, [pc, #100]	; (80009fc <MX_GPIO_Init+0xa0>)
 8000998:	f043 0308 	orr.w	r3, r3, #8
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_GPIO_Init+0xa0>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_GPIO_Init+0xa0>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a11      	ldr	r2, [pc, #68]	; (80009fc <MX_GPIO_Init+0xa0>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_GPIO_Init+0xa0>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2102      	movs	r1, #2
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <MX_GPIO_Init+0xa4>)
 80009d2:	f000 fc7f 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Yellow_LED_Pin */
  GPIO_InitStruct.Pin = Yellow_LED_Pin;
 80009d6:	2302      	movs	r3, #2
 80009d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Yellow_LED_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_GPIO_Init+0xa4>)
 80009ee:	f000 fac1 	bl	8000f74 <HAL_GPIO_Init>

}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	58024400 	.word	0x58024400
 8000a00:	58021000 	.word	0x58021000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_MspInit+0x3c>)
 8000a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <HAL_MspInit+0x3c>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_MspInit+0x3c>)
 8000a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	207d      	movs	r0, #125	; 0x7d
 8000a3a:	f000 fa66 	bl	8000f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000a3e:	207d      	movs	r0, #125	; 0x7d
 8000a40:	f000 fa7d 	bl	8000f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a44:	bf00      	nop
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	58024400 	.word	0x58024400

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0b8      	sub	sp, #224	; 0xe0
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	22bc      	movs	r2, #188	; 0xbc
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f004 f953 	bl	8004d1c <memset>
  if(huart->Instance==USART3)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a25      	ldr	r2, [pc, #148]	; (8000b10 <HAL_UART_MspInit+0xc0>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d142      	bne.n	8000b06 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a80:	2302      	movs	r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 fcc0 	bl	8002414 <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a9a:	f7ff ffb3 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <HAL_UART_MspInit+0xc4>)
 8000aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <HAL_UART_MspInit+0xc4>)
 8000aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aaa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000aae:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_UART_MspInit+0xc4>)
 8000ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_UART_MspInit+0xc4>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_UART_MspInit+0xc4>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_UART_MspInit+0xc4>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad2:	f003 0308 	and.w	r3, r3, #8
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ada:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ade:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000af4:	2307      	movs	r3, #7
 8000af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000afe:	4619      	mov	r1, r3
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <HAL_UART_MspInit+0xc8>)
 8000b02:	f000 fa37 	bl	8000f74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	37e0      	adds	r7, #224	; 0xe0
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40004800 	.word	0x40004800
 8000b14:	58024400 	.word	0x58024400
 8000b18:	58020c00 	.word	0x58020c00

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f8a4 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000b74:	f000 fc18 	bl	80013a8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b80:	f7ff fd26 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b86:	490d      	ldr	r1, [pc, #52]	; (8000bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b9c:	4c0a      	ldr	r4, [pc, #40]	; (8000bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f004 f893 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fda9 	bl	8000704 <main>
  bx  lr
 8000bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bbc:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8000bc0:	08004d8c 	.word	0x08004d8c
  ldr r2, =_sbss
 8000bc4:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8000bc8:	240000c8 	.word	0x240000c8

08000bcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC3_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd6:	2003      	movs	r0, #3
 8000bd8:	f000 f98c 	bl	8000ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bdc:	f001 fa44 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8000be0:	4602      	mov	r2, r0
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_Init+0x68>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	0a1b      	lsrs	r3, r3, #8
 8000be8:	f003 030f 	and.w	r3, r3, #15
 8000bec:	4913      	ldr	r1, [pc, #76]	; (8000c3c <HAL_Init+0x6c>)
 8000bee:	5ccb      	ldrb	r3, [r1, r3]
 8000bf0:	f003 031f 	and.w	r3, r3, #31
 8000bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_Init+0x68>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_Init+0x6c>)
 8000c04:	5cd3      	ldrb	r3, [r2, r3]
 8000c06:	f003 031f 	and.w	r3, r3, #31
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c10:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <HAL_Init+0x70>)
 8000c12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c14:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <HAL_Init+0x74>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f000 f814 	bl	8000c48 <HAL_InitTick>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e002      	b.n	8000c30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2a:	f7ff fef1 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	08004d44 	.word	0x08004d44
 8000c40:	24000004 	.word	0x24000004
 8000c44:	24000000 	.word	0x24000000

08000c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c50:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_InitTick+0x60>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d101      	bne.n	8000c5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e021      	b.n	8000ca0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_InitTick+0x64>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_InitTick+0x60>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f971 	bl	8000f5a <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 f93b 	bl	8000f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_InitTick+0x68>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	24000014 	.word	0x24000014
 8000cac:	24000000 	.word	0x24000000
 8000cb0:	24000010 	.word	0x24000010

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	24000014 	.word	0x24000014
 8000cd8:	240000c4 	.word	0x240000c4

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	240000c4 	.word	0x240000c4

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffde 	bl	8000cdc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	24000014 	.word	0x24000014

08000d3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d40:	4b03      	ldr	r3, [pc, #12]	; (8000d50 <HAL_GetREVID+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	0c1b      	lsrs	r3, r3, #16
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	5c001000 	.word	0x5c001000

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <__NVIC_SetPriorityGrouping+0x40>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x40>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	05fa0000 	.word	0x05fa0000

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	; (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	; (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec0:	d301      	bcc.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00f      	b.n	8000ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <SysTick_Config+0x40>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	210f      	movs	r1, #15
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f7ff ff8e 	bl	8000df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <SysTick_Config+0x40>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <SysTick_Config+0x40>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010

08000ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ff29 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
 8000f16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff40 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff90 	bl	8000e48 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5f 	bl	8000df4 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff33 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa4 	bl	8000eb0 <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f82:	4b89      	ldr	r3, [pc, #548]	; (80011a8 <HAL_GPIO_Init+0x234>)
 8000f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f86:	e194      	b.n	80012b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8186 	beq.w	80012ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d005      	beq.n	8000fb8 <HAL_GPIO_Init+0x44>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b03      	cmp	r3, #3
 8001024:	d017      	beq.n	8001056 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d123      	bne.n	80010aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	69b9      	ldr	r1, [r7, #24]
 80010a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0203 	and.w	r2, r3, #3
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80e0 	beq.w	80012ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_GPIO_Init+0x238>)
 80010ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <HAL_GPIO_Init+0x238>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010fc:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_GPIO_Init+0x238>)
 80010fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800110a:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <HAL_GPIO_Init+0x23c>)
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <HAL_GPIO_Init+0x240>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d052      	beq.n	80011dc <HAL_GPIO_Init+0x268>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <HAL_GPIO_Init+0x244>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d031      	beq.n	80011a2 <HAL_GPIO_Init+0x22e>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1e      	ldr	r2, [pc, #120]	; (80011bc <HAL_GPIO_Init+0x248>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d02b      	beq.n	800119e <HAL_GPIO_Init+0x22a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <HAL_GPIO_Init+0x24c>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d025      	beq.n	800119a <HAL_GPIO_Init+0x226>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <HAL_GPIO_Init+0x250>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01f      	beq.n	8001196 <HAL_GPIO_Init+0x222>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <HAL_GPIO_Init+0x254>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x21e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <HAL_GPIO_Init+0x258>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x21a>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_GPIO_Init+0x25c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x216>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x260>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x212>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a17      	ldr	r2, [pc, #92]	; (80011d8 <HAL_GPIO_Init+0x264>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x20e>
 800117e:	2309      	movs	r3, #9
 8001180:	e02d      	b.n	80011de <HAL_GPIO_Init+0x26a>
 8001182:	230a      	movs	r3, #10
 8001184:	e02b      	b.n	80011de <HAL_GPIO_Init+0x26a>
 8001186:	2308      	movs	r3, #8
 8001188:	e029      	b.n	80011de <HAL_GPIO_Init+0x26a>
 800118a:	2307      	movs	r3, #7
 800118c:	e027      	b.n	80011de <HAL_GPIO_Init+0x26a>
 800118e:	2306      	movs	r3, #6
 8001190:	e025      	b.n	80011de <HAL_GPIO_Init+0x26a>
 8001192:	2305      	movs	r3, #5
 8001194:	e023      	b.n	80011de <HAL_GPIO_Init+0x26a>
 8001196:	2304      	movs	r3, #4
 8001198:	e021      	b.n	80011de <HAL_GPIO_Init+0x26a>
 800119a:	2303      	movs	r3, #3
 800119c:	e01f      	b.n	80011de <HAL_GPIO_Init+0x26a>
 800119e:	2302      	movs	r3, #2
 80011a0:	e01d      	b.n	80011de <HAL_GPIO_Init+0x26a>
 80011a2:	2301      	movs	r3, #1
 80011a4:	e01b      	b.n	80011de <HAL_GPIO_Init+0x26a>
 80011a6:	bf00      	nop
 80011a8:	58000080 	.word	0x58000080
 80011ac:	58024400 	.word	0x58024400
 80011b0:	58000400 	.word	0x58000400
 80011b4:	58020000 	.word	0x58020000
 80011b8:	58020400 	.word	0x58020400
 80011bc:	58020800 	.word	0x58020800
 80011c0:	58020c00 	.word	0x58020c00
 80011c4:	58021000 	.word	0x58021000
 80011c8:	58021400 	.word	0x58021400
 80011cc:	58021800 	.word	0x58021800
 80011d0:	58021c00 	.word	0x58021c00
 80011d4:	58022000 	.word	0x58022000
 80011d8:	58022400 	.word	0x58022400
 80011dc:	2300      	movs	r3, #0
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	f002 0203 	and.w	r2, r2, #3
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	4093      	lsls	r3, r2
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ee:	4938      	ldr	r1, [pc, #224]	; (80012d0 <HAL_GPIO_Init+0x35c>)
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	089b      	lsrs	r3, r3, #2
 80011f4:	3302      	adds	r3, #2
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800122a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	3301      	adds	r3, #1
 80012b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f47f ae63 	bne.w	8000f88 <HAL_GPIO_Init+0x14>
  }
}
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
 80012c6:	3724      	adds	r7, #36	; 0x24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	58000400 	.word	0x58000400

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80012f0:	e003      	b.n	80012fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	041a      	lsls	r2, r3, #16
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	619a      	str	r2, [r3, #24]
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
  }
#else
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 8001312:	490c      	ldr	r1, [pc, #48]	; (8001344 <HAL_HSEM_Take+0x3c>)
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_HSEM_Take+0x40>)
 8001318:	4313      	orrs	r3, r2
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8001320:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_HSEM_Take+0x3c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001328:	6839      	ldr	r1, [r7, #0]
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <HAL_HSEM_Take+0x40>)
 800132c:	430b      	orrs	r3, r1
 800132e:	429a      	cmp	r2, r3
 8001330:	d101      	bne.n	8001336 <HAL_HSEM_Take+0x2e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_HSEM_Take+0x30>
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	58026400 	.word	0x58026400
 8001348:	80000300 	.word	0x80000300

0800134c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001354:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_HSEM_FastTake+0x2c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3320      	adds	r3, #32
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_HSEM_FastTake+0x30>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d101      	bne.n	8001368 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	e000      	b.n	800136a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	58026400 	.word	0x58026400
 800137c:	80000300 	.word	0x80000300

08001380 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800138a:	4906      	ldr	r1, [pc, #24]	; (80013a4 <HAL_HSEM_Release+0x24>)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	58026400 	.word	0x58026400

080013a8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_HSEM_IRQHandler+0x30>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_HSEM_IRQHandler+0x30>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	4906      	ldr	r1, [pc, #24]	; (80013d8 <HAL_HSEM_IRQHandler+0x30>)
 80013be:	4013      	ands	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <HAL_HSEM_IRQHandler+0x30>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f807 	bl	80013dc <HAL_HSEM_FreeCallback>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	58026500 	.word	0x58026500

080013dc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	2b06      	cmp	r3, #6
 8001402:	d00a      	beq.n	800141a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001404:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	d001      	beq.n	8001416 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e040      	b.n	8001498 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e03e      	b.n	8001498 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001422:	491f      	ldr	r1, [pc, #124]	; (80014a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4313      	orrs	r3, r2
 8001428:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800142a:	f7ff fc57 	bl	8000cdc <HAL_GetTick>
 800142e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001430:	e009      	b.n	8001446 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001432:	f7ff fc53 	bl	8000cdc <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001440:	d901      	bls.n	8001446 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e028      	b.n	8001498 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001446:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800144e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001452:	d1ee      	bne.n	8001432 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b1e      	cmp	r3, #30
 8001458:	d008      	beq.n	800146c <HAL_PWREx_ConfigSupply+0x7c>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b2e      	cmp	r3, #46	; 0x2e
 800145e:	d005      	beq.n	800146c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b1d      	cmp	r3, #29
 8001464:	d002      	beq.n	800146c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b2d      	cmp	r3, #45	; 0x2d
 800146a:	d114      	bne.n	8001496 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800146c:	f7ff fc36 	bl	8000cdc <HAL_GetTick>
 8001470:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001472:	e009      	b.n	8001488 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001474:	f7ff fc32 	bl	8000cdc <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001482:	d901      	bls.n	8001488 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e007      	b.n	8001498 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001494:	d1ee      	bne.n	8001474 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	58024800 	.word	0x58024800

080014a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	; 0x30
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d102      	bne.n	80014b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f000 bc1c 	b.w	8001cf0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8087 	beq.w	80015d4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c6:	4b9e      	ldr	r3, [pc, #632]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014d0:	4b9b      	ldr	r3, [pc, #620]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d8:	2b10      	cmp	r3, #16
 80014da:	d007      	beq.n	80014ec <HAL_RCC_OscConfig+0x48>
 80014dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014de:	2b18      	cmp	r3, #24
 80014e0:	d110      	bne.n	8001504 <HAL_RCC_OscConfig+0x60>
 80014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d10b      	bne.n	8001504 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	4b94      	ldr	r3, [pc, #592]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d06c      	beq.n	80015d2 <HAL_RCC_OscConfig+0x12e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d168      	bne.n	80015d2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e3f5      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d106      	bne.n	800151c <HAL_RCC_OscConfig+0x78>
 800150e:	4b8c      	ldr	r3, [pc, #560]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a8b      	ldr	r2, [pc, #556]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e02e      	b.n	800157a <HAL_RCC_OscConfig+0xd6>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <HAL_RCC_OscConfig+0x9a>
 8001524:	4b86      	ldr	r3, [pc, #536]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a85      	ldr	r2, [pc, #532]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b83      	ldr	r3, [pc, #524]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a82      	ldr	r2, [pc, #520]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e01d      	b.n	800157a <HAL_RCC_OscConfig+0xd6>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0xbe>
 8001548:	4b7d      	ldr	r3, [pc, #500]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a7c      	ldr	r2, [pc, #496]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800154e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a79      	ldr	r2, [pc, #484]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800155a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e00b      	b.n	800157a <HAL_RCC_OscConfig+0xd6>
 8001562:	4b77      	ldr	r3, [pc, #476]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a76      	ldr	r2, [pc, #472]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b74      	ldr	r3, [pc, #464]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a73      	ldr	r2, [pc, #460]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001578:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d013      	beq.n	80015aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001582:	f7ff fbab 	bl	8000cdc <HAL_GetTick>
 8001586:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158a:	f7ff fba7 	bl	8000cdc <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b64      	cmp	r3, #100	; 0x64
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e3a9      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800159c:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0f0      	beq.n	800158a <HAL_RCC_OscConfig+0xe6>
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fb97 	bl	8000cdc <HAL_GetTick>
 80015ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b2:	f7ff fb93 	bl	8000cdc <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e395      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015c4:	4b5e      	ldr	r3, [pc, #376]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x10e>
 80015d0:	e000      	b.n	80015d4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80ca 	beq.w	8001776 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e2:	4b57      	ldr	r3, [pc, #348]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015ec:	4b54      	ldr	r3, [pc, #336]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015f2:	6a3b      	ldr	r3, [r7, #32]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d007      	beq.n	8001608 <HAL_RCC_OscConfig+0x164>
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	2b18      	cmp	r3, #24
 80015fc:	d156      	bne.n	80016ac <HAL_RCC_OscConfig+0x208>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0303 	and.w	r3, r3, #3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d151      	bne.n	80016ac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001608:	4b4d      	ldr	r3, [pc, #308]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x17c>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e367      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 0219 	bic.w	r2, r3, #25
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4944      	ldr	r1, [pc, #272]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001632:	f7ff fb53 	bl	8000cdc <HAL_GetTick>
 8001636:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fb4f 	bl	8000cdc <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e351      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800164c:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	f7ff fb70 	bl	8000d3c <HAL_GetREVID>
 800165c:	4603      	mov	r3, r0
 800165e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001662:	4293      	cmp	r3, r2
 8001664:	d817      	bhi.n	8001696 <HAL_RCC_OscConfig+0x1f2>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b40      	cmp	r3, #64	; 0x40
 800166c:	d108      	bne.n	8001680 <HAL_RCC_OscConfig+0x1dc>
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001676:	4a32      	ldr	r2, [pc, #200]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800167e:	e07a      	b.n	8001776 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	031b      	lsls	r3, r3, #12
 800168e:	492c      	ldr	r1, [pc, #176]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001694:	e06f      	b.n	8001776 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	061b      	lsls	r3, r3, #24
 80016a4:	4926      	ldr	r1, [pc, #152]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016aa:	e064      	b.n	8001776 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d047      	beq.n	8001744 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 0219 	bic.w	r2, r3, #25
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	491f      	ldr	r1, [pc, #124]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb09 	bl	8000cdc <HAL_GetTick>
 80016ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fb05 	bl	8000cdc <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e307      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ec:	f7ff fb26 	bl	8000d3c <HAL_GetREVID>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d817      	bhi.n	800172a <HAL_RCC_OscConfig+0x286>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b40      	cmp	r3, #64	; 0x40
 8001700:	d108      	bne.n	8001714 <HAL_RCC_OscConfig+0x270>
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800170a:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	6053      	str	r3, [r2, #4]
 8001712:	e030      	b.n	8001776 <HAL_RCC_OscConfig+0x2d2>
 8001714:	4b0a      	ldr	r3, [pc, #40]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	031b      	lsls	r3, r3, #12
 8001722:	4907      	ldr	r1, [pc, #28]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
 8001728:	e025      	b.n	8001776 <HAL_RCC_OscConfig+0x2d2>
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	061b      	lsls	r3, r3, #24
 8001738:	4901      	ldr	r1, [pc, #4]	; (8001740 <HAL_RCC_OscConfig+0x29c>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
 800173e:	e01a      	b.n	8001776 <HAL_RCC_OscConfig+0x2d2>
 8001740:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001744:	4b9e      	ldr	r3, [pc, #632]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a9d      	ldr	r2, [pc, #628]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fac4 	bl	8000cdc <HAL_GetTick>
 8001754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fac0 	bl	8000cdc <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e2c2      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800176a:	4b95      	ldr	r3, [pc, #596]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0310 	and.w	r3, r3, #16
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80a9 	beq.w	80018d6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001784:	4b8e      	ldr	r3, [pc, #568]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800178c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800178e:	4b8c      	ldr	r3, [pc, #560]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b08      	cmp	r3, #8
 8001798:	d007      	beq.n	80017aa <HAL_RCC_OscConfig+0x306>
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b18      	cmp	r3, #24
 800179e:	d13a      	bne.n	8001816 <HAL_RCC_OscConfig+0x372>
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d135      	bne.n	8001816 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017aa:	4b85      	ldr	r3, [pc, #532]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x31e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	2b80      	cmp	r3, #128	; 0x80
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e296      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017c2:	f7ff fabb 	bl	8000d3c <HAL_GetREVID>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d817      	bhi.n	8001800 <HAL_RCC_OscConfig+0x35c>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	d108      	bne.n	80017ea <HAL_RCC_OscConfig+0x346>
 80017d8:	4b79      	ldr	r3, [pc, #484]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80017e0:	4a77      	ldr	r2, [pc, #476]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 80017e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017e6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017e8:	e075      	b.n	80018d6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017ea:	4b75      	ldr	r3, [pc, #468]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	069b      	lsls	r3, r3, #26
 80017f8:	4971      	ldr	r1, [pc, #452]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017fe:	e06a      	b.n	80018d6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001800:	4b6f      	ldr	r3, [pc, #444]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	496c      	ldr	r1, [pc, #432]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001810:	4313      	orrs	r3, r2
 8001812:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001814:	e05f      	b.n	80018d6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d042      	beq.n	80018a4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800181e:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a67      	ldr	r2, [pc, #412]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182a:	f7ff fa57 	bl	8000cdc <HAL_GetTick>
 800182e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001832:	f7ff fa53 	bl	8000cdc <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e255      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001844:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001850:	f7ff fa74 	bl	8000d3c <HAL_GetREVID>
 8001854:	4603      	mov	r3, r0
 8001856:	f241 0203 	movw	r2, #4099	; 0x1003
 800185a:	4293      	cmp	r3, r2
 800185c:	d817      	bhi.n	800188e <HAL_RCC_OscConfig+0x3ea>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	2b20      	cmp	r3, #32
 8001864:	d108      	bne.n	8001878 <HAL_RCC_OscConfig+0x3d4>
 8001866:	4b56      	ldr	r3, [pc, #344]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800186e:	4a54      	ldr	r2, [pc, #336]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001870:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001874:	6053      	str	r3, [r2, #4]
 8001876:	e02e      	b.n	80018d6 <HAL_RCC_OscConfig+0x432>
 8001878:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	069b      	lsls	r3, r3, #26
 8001886:	494e      	ldr	r1, [pc, #312]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001888:	4313      	orrs	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
 800188c:	e023      	b.n	80018d6 <HAL_RCC_OscConfig+0x432>
 800188e:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	061b      	lsls	r3, r3, #24
 800189c:	4948      	ldr	r1, [pc, #288]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	60cb      	str	r3, [r1, #12]
 80018a2:	e018      	b.n	80018d6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018a4:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 80018aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fa14 	bl	8000cdc <HAL_GetTick>
 80018b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018b8:	f7ff fa10 	bl	8000cdc <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e212      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d036      	beq.n	8001950 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d019      	beq.n	800191e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 80018ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ee:	4a34      	ldr	r2, [pc, #208]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff f9f1 	bl	8000cdc <HAL_GetTick>
 80018fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fe:	f7ff f9ed 	bl	8000cdc <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e1ef      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001910:	4b2b      	ldr	r3, [pc, #172]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x45a>
 800191c:	e018      	b.n	8001950 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191e:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001922:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192a:	f7ff f9d7 	bl	8000cdc <HAL_GetTick>
 800192e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001932:	f7ff f9d3 	bl	8000cdc <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e1d5      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0320 	and.w	r3, r3, #32
 8001958:	2b00      	cmp	r3, #0
 800195a:	d039      	beq.n	80019d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d019      	beq.n	8001998 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 800196a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800196e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001970:	f7ff f9b4 	bl	8000cdc <HAL_GetTick>
 8001974:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001978:	f7ff f9b0 	bl	8000cdc <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1b2      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x4d4>
 8001996:	e01b      	b.n	80019d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_RCC_OscConfig+0x51c>)
 800199e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019a4:	f7ff f99a 	bl	8000cdc <HAL_GetTick>
 80019a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80019ac:	f7ff f996 	bl	8000cdc <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d904      	bls.n	80019c4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e198      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
 80019be:	bf00      	nop
 80019c0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019c4:	4ba3      	ldr	r3, [pc, #652]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1ed      	bne.n	80019ac <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 8081 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019de:	4b9e      	ldr	r3, [pc, #632]	; (8001c58 <HAL_RCC_OscConfig+0x7b4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a9d      	ldr	r2, [pc, #628]	; (8001c58 <HAL_RCC_OscConfig+0x7b4>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019ea:	f7ff f977 	bl	8000cdc <HAL_GetTick>
 80019ee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019f2:	f7ff f973 	bl	8000cdc <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b64      	cmp	r3, #100	; 0x64
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e175      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a04:	4b94      	ldr	r3, [pc, #592]	; (8001c58 <HAL_RCC_OscConfig+0x7b4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x582>
 8001a18:	4b8e      	ldr	r3, [pc, #568]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1c:	4a8d      	ldr	r2, [pc, #564]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	; 0x70
 8001a24:	e02d      	b.n	8001a82 <HAL_RCC_OscConfig+0x5de>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x5a4>
 8001a2e:	4b89      	ldr	r3, [pc, #548]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a32:	4a88      	ldr	r2, [pc, #544]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3a:	4b86      	ldr	r3, [pc, #536]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a85      	ldr	r2, [pc, #532]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	e01c      	b.n	8001a82 <HAL_RCC_OscConfig+0x5de>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d10c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5c6>
 8001a50:	4b80      	ldr	r3, [pc, #512]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a7f      	ldr	r2, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b7d      	ldr	r3, [pc, #500]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a7c      	ldr	r2, [pc, #496]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0x5de>
 8001a6a:	4b7a      	ldr	r3, [pc, #488]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	4a79      	ldr	r2, [pc, #484]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70
 8001a76:	4b77      	ldr	r3, [pc, #476]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7a:	4a76      	ldr	r2, [pc, #472]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d015      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff f927 	bl	8000cdc <HAL_GetTick>
 8001a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff f923 	bl	8000cdc <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e123      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ee      	beq.n	8001a92 <HAL_RCC_OscConfig+0x5ee>
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab6:	f7ff f911 	bl	8000cdc <HAL_GetTick>
 8001aba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff f90d 	bl	8000cdc <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e10d      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ad4:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ee      	bne.n	8001abe <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f000 8102 	beq.w	8001cee <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001aea:	4b5a      	ldr	r3, [pc, #360]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001af2:	2b18      	cmp	r3, #24
 8001af4:	f000 80bd 	beq.w	8001c72 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	f040 8095 	bne.w	8001c2c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b02:	4b54      	ldr	r3, [pc, #336]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a53      	ldr	r2, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001b08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff f8e5 	bl	8000cdc <HAL_GetTick>
 8001b12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff f8e1 	bl	8000cdc <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e0e3      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b28:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b34:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <HAL_RCC_OscConfig+0x7b8>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	430a      	orrs	r2, r1
 8001b48:	4942      	ldr	r1, [pc, #264]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	628b      	str	r3, [r1, #40]	; 0x28
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	3b01      	subs	r3, #1
 8001b54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b70:	431a      	orrs	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	3b01      	subs	r3, #1
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b7e:	4935      	ldr	r1, [pc, #212]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	4a32      	ldr	r2, [pc, #200]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b94:	4b32      	ldr	r3, [pc, #200]	; (8001c60 <HAL_RCC_OscConfig+0x7bc>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b9c:	00d2      	lsls	r2, r2, #3
 8001b9e:	492d      	ldr	r1, [pc, #180]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	f023 020c 	bic.w	r2, r3, #12
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4928      	ldr	r1, [pc, #160]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bb6:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	f023 0202 	bic.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	4924      	ldr	r1, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f86a 	bl	8000cdc <HAL_GetTick>
 8001c08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff f866 	bl	8000cdc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e068      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x768>
 8001c2a:	e060      	b.n	8001cee <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_RCC_OscConfig+0x7b0>)
 8001c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f850 	bl	8000cdc <HAL_GetTick>
 8001c3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c3e:	e011      	b.n	8001c64 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f84c 	bl	8000cdc <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d90a      	bls.n	8001c64 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e04e      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
 8001c52:	bf00      	nop
 8001c54:	58024400 	.word	0x58024400
 8001c58:	58024800 	.word	0x58024800
 8001c5c:	fffffc0c 	.word	0xfffffc0c
 8001c60:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c64:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <HAL_RCC_OscConfig+0x854>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e7      	bne.n	8001c40 <HAL_RCC_OscConfig+0x79c>
 8001c70:	e03d      	b.n	8001cee <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c72:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <HAL_RCC_OscConfig+0x854>)
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <HAL_RCC_OscConfig+0x854>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d031      	beq.n	8001cea <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d12a      	bne.n	8001cea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d122      	bne.n	8001cea <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d11a      	bne.n	8001cea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	0a5b      	lsrs	r3, r3, #9
 8001cb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d111      	bne.n	8001cea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	0c1b      	lsrs	r3, r3, #16
 8001cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d108      	bne.n	8001cea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	0e1b      	lsrs	r3, r3, #24
 8001cdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3730      	adds	r7, #48	; 0x30
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	58024400 	.word	0x58024400

08001cfc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e19c      	b.n	800204a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b8a      	ldr	r3, [pc, #552]	; (8001f3c <HAL_RCC_ClockConfig+0x240>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d910      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b87      	ldr	r3, [pc, #540]	; (8001f3c <HAL_RCC_ClockConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 020f 	bic.w	r2, r3, #15
 8001d26:	4985      	ldr	r1, [pc, #532]	; (8001f3c <HAL_RCC_ClockConfig+0x240>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b83      	ldr	r3, [pc, #524]	; (8001f3c <HAL_RCC_ClockConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e184      	b.n	800204a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d010      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	4b7b      	ldr	r3, [pc, #492]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d908      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d5c:	4b78      	ldr	r3, [pc, #480]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	4975      	ldr	r1, [pc, #468]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d010      	beq.n	8001d9c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695a      	ldr	r2, [r3, #20]
 8001d7e:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d908      	bls.n	8001d9c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	496a      	ldr	r1, [pc, #424]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d010      	beq.n	8001dca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699a      	ldr	r2, [r3, #24]
 8001dac:	4b64      	ldr	r3, [pc, #400]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d908      	bls.n	8001dca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001db8:	4b61      	ldr	r3, [pc, #388]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	495e      	ldr	r1, [pc, #376]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d010      	beq.n	8001df8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69da      	ldr	r2, [r3, #28]
 8001dda:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d908      	bls.n	8001df8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001de6:	4b56      	ldr	r3, [pc, #344]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4953      	ldr	r1, [pc, #332]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d010      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d908      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b4a      	ldr	r3, [pc, #296]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f023 020f 	bic.w	r2, r3, #15
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	4947      	ldr	r1, [pc, #284]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d055      	beq.n	8001ede <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e32:	4b43      	ldr	r3, [pc, #268]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4940      	ldr	r1, [pc, #256]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e4c:	4b3c      	ldr	r3, [pc, #240]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d121      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0f6      	b.n	800204a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d115      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0ea      	b.n	800204a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d107      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e7c:	4b30      	ldr	r3, [pc, #192]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0de      	b.n	800204a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0d6      	b.n	800204a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e9c:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	f023 0207 	bic.w	r2, r3, #7
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4925      	ldr	r1, [pc, #148]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7fe ff15 	bl	8000cdc <HAL_GetTick>
 8001eb2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb6:	f7fe ff11 	bl	8000cdc <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0be      	b.n	800204a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ecc:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d1eb      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d010      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d208      	bcs.n	8001f0c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f023 020f 	bic.w	r2, r3, #15
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	490e      	ldr	r1, [pc, #56]	; (8001f40 <HAL_RCC_ClockConfig+0x244>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_ClockConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d214      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 020f 	bic.w	r2, r3, #15
 8001f22:	4906      	ldr	r1, [pc, #24]	; (8001f3c <HAL_RCC_ClockConfig+0x240>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_RCC_ClockConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e086      	b.n	800204a <HAL_RCC_ClockConfig+0x34e>
 8001f3c:	52002000 	.word	0x52002000
 8001f40:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	4b3f      	ldr	r3, [pc, #252]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d208      	bcs.n	8001f72 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f60:	4b3c      	ldr	r3, [pc, #240]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	4939      	ldr	r1, [pc, #228]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d010      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d208      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f8e:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	492e      	ldr	r1, [pc, #184]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d010      	beq.n	8001fce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d208      	bcs.n	8001fce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4922      	ldr	r1, [pc, #136]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d208      	bcs.n	8001ffc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4917      	ldr	r1, [pc, #92]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ffc:	f000 f834 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	4912      	ldr	r1, [pc, #72]	; (8002058 <HAL_RCC_ClockConfig+0x35c>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
 8002018:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_RCC_ClockConfig+0x358>)
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	4a0d      	ldr	r2, [pc, #52]	; (8002058 <HAL_RCC_ClockConfig+0x35c>)
 8002024:	5cd3      	ldrb	r3, [r2, r3]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	4a0a      	ldr	r2, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x360>)
 8002032:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x364>)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x368>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fe02 	bl	8000c48 <HAL_InitTick>
 8002044:	4603      	mov	r3, r0
 8002046:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002048:	7bfb      	ldrb	r3, [r7, #15]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	58024400 	.word	0x58024400
 8002058:	08004d44 	.word	0x08004d44
 800205c:	24000004 	.word	0x24000004
 8002060:	24000000 	.word	0x24000000
 8002064:	24000010 	.word	0x24000010

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800206e:	4bb3      	ldr	r3, [pc, #716]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002076:	2b18      	cmp	r3, #24
 8002078:	f200 8155 	bhi.w	8002326 <HAL_RCC_GetSysClockFreq+0x2be>
 800207c:	a201      	add	r2, pc, #4	; (adr r2, 8002084 <HAL_RCC_GetSysClockFreq+0x1c>)
 800207e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002082:	bf00      	nop
 8002084:	080020e9 	.word	0x080020e9
 8002088:	08002327 	.word	0x08002327
 800208c:	08002327 	.word	0x08002327
 8002090:	08002327 	.word	0x08002327
 8002094:	08002327 	.word	0x08002327
 8002098:	08002327 	.word	0x08002327
 800209c:	08002327 	.word	0x08002327
 80020a0:	08002327 	.word	0x08002327
 80020a4:	0800210f 	.word	0x0800210f
 80020a8:	08002327 	.word	0x08002327
 80020ac:	08002327 	.word	0x08002327
 80020b0:	08002327 	.word	0x08002327
 80020b4:	08002327 	.word	0x08002327
 80020b8:	08002327 	.word	0x08002327
 80020bc:	08002327 	.word	0x08002327
 80020c0:	08002327 	.word	0x08002327
 80020c4:	08002115 	.word	0x08002115
 80020c8:	08002327 	.word	0x08002327
 80020cc:	08002327 	.word	0x08002327
 80020d0:	08002327 	.word	0x08002327
 80020d4:	08002327 	.word	0x08002327
 80020d8:	08002327 	.word	0x08002327
 80020dc:	08002327 	.word	0x08002327
 80020e0:	08002327 	.word	0x08002327
 80020e4:	0800211b 	.word	0x0800211b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020e8:	4b94      	ldr	r3, [pc, #592]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80020f4:	4b91      	ldr	r3, [pc, #580]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	08db      	lsrs	r3, r3, #3
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	4a90      	ldr	r2, [pc, #576]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002106:	e111      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002108:	4b8d      	ldr	r3, [pc, #564]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800210a:	61bb      	str	r3, [r7, #24]
    break;
 800210c:	e10e      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800210e:	4b8d      	ldr	r3, [pc, #564]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002110:	61bb      	str	r3, [r7, #24]
    break;
 8002112:	e10b      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002114:	4b8c      	ldr	r3, [pc, #560]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002116:	61bb      	str	r3, [r7, #24]
    break;
 8002118:	e108      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002124:	4b85      	ldr	r3, [pc, #532]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800212e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002130:	4b82      	ldr	r3, [pc, #520]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800213a:	4b80      	ldr	r3, [pc, #512]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213e:	08db      	lsrs	r3, r3, #3
 8002140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002152:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80e1 	beq.w	8002320 <HAL_RCC_GetSysClockFreq+0x2b8>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b02      	cmp	r3, #2
 8002162:	f000 8083 	beq.w	800226c <HAL_RCC_GetSysClockFreq+0x204>
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b02      	cmp	r3, #2
 800216a:	f200 80a1 	bhi.w	80022b0 <HAL_RCC_GetSysClockFreq+0x248>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x114>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d056      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x1c0>
 800217a:	e099      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d02d      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002188:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	08db      	lsrs	r3, r3, #3
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	4a6b      	ldr	r2, [pc, #428]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	ee07 3a90 	vmov	s15, r3
 80021a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b2:	4b62      	ldr	r3, [pc, #392]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800234c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80021e2:	e087      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002350 <HAL_RCC_GetSysClockFreq+0x2e8>
 80021f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002206:	ed97 6a02 	vldr	s12, [r7, #8]
 800220a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800234c <HAL_RCC_GetSysClockFreq+0x2e4>
 800220e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800221a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002226:	e065      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002354 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223a:	4b40      	ldr	r3, [pc, #256]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224a:	ed97 6a02 	vldr	s12, [r7, #8]
 800224e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800234c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800225a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800225e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800226a:	e043      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002276:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002358 <HAL_RCC_GetSysClockFreq+0x2f0>
 800227a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800228e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002292:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800234c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800229a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800229e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022ae:	e021      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002354 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800234c <HAL_RCC_GetSysClockFreq+0x2e4>
 80022da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022f2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	0a5b      	lsrs	r3, r3, #9
 80022fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022fe:	3301      	adds	r3, #1
 8002300:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800230c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002318:	ee17 3a90 	vmov	r3, s15
 800231c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800231e:	e005      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    break;
 8002324:	e002      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002328:	61bb      	str	r3, [r7, #24]
    break;
 800232a:	bf00      	nop
  }

  return sysclockfreq;
 800232c:	69bb      	ldr	r3, [r7, #24]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	58024400 	.word	0x58024400
 8002340:	03d09000 	.word	0x03d09000
 8002344:	003d0900 	.word	0x003d0900
 8002348:	017d7840 	.word	0x017d7840
 800234c:	46000000 	.word	0x46000000
 8002350:	4c742400 	.word	0x4c742400
 8002354:	4a742400 	.word	0x4a742400
 8002358:	4bbebc20 	.word	0x4bbebc20

0800235c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002362:	f7ff fe81 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002366:	4602      	mov	r2, r0
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_RCC_GetHCLKFreq+0x50>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	490f      	ldr	r1, [pc, #60]	; (80023b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_RCC_GetHCLKFreq+0x50>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002398:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	58024400 	.word	0x58024400
 80023b0:	08004d44 	.word	0x08004d44
 80023b4:	24000004 	.word	0x24000004
 80023b8:	24000000 	.word	0x24000000

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80023c0:	f7ff ffcc 	bl	800235c <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4904      	ldr	r1, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	58024400 	.word	0x58024400
 80023e4:	08004d44 	.word	0x08004d44

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80023ec:	f7ff ffb6 	bl	800235c <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4904      	ldr	r1, [pc, #16]	; (8002410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	58024400 	.word	0x58024400
 8002410:	08004d44 	.word	0x08004d44

08002414 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800241c:	2300      	movs	r3, #0
 800241e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002420:	2300      	movs	r3, #0
 8002422:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d03f      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002434:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002438:	d02a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800243a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800243e:	d824      	bhi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002444:	d018      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800244a:	d81e      	bhi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002454:	d007      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002456:	e018      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002458:	4bab      	ldr	r3, [pc, #684]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	4aaa      	ldr	r2, [pc, #680]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800245e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002462:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002464:	e015      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3304      	adds	r3, #4
 800246a:	2102      	movs	r1, #2
 800246c:	4618      	mov	r0, r3
 800246e:	f001 f9cf 	bl	8003810 <RCCEx_PLL2_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002476:	e00c      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3324      	adds	r3, #36	; 0x24
 800247c:	2102      	movs	r1, #2
 800247e:	4618      	mov	r0, r3
 8002480:	f001 fa78 	bl	8003974 <RCCEx_PLL3_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002488:	e003      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
      break;
 800248e:	e000      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002492:	7dfb      	ldrb	r3, [r7, #23]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d109      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002498:	4b9b      	ldr	r3, [pc, #620]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800249a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800249c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a4:	4998      	ldr	r1, [pc, #608]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	650b      	str	r3, [r1, #80]	; 0x50
 80024aa:	e001      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d03d      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d826      	bhi.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024c4:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80024c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ca:	bf00      	nop
 80024cc:	080024e1 	.word	0x080024e1
 80024d0:	080024ef 	.word	0x080024ef
 80024d4:	08002501 	.word	0x08002501
 80024d8:	08002519 	.word	0x08002519
 80024dc:	08002519 	.word	0x08002519
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024e0:	4b89      	ldr	r3, [pc, #548]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	4a88      	ldr	r2, [pc, #544]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80024e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024ec:	e015      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f001 f98b 	bl	8003810 <RCCEx_PLL2_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024fe:	e00c      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3324      	adds	r3, #36	; 0x24
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f001 fa34 	bl	8003974 <RCCEx_PLL3_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002510:	e003      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	75fb      	strb	r3, [r7, #23]
      break;
 8002516:	e000      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800251a:	7dfb      	ldrb	r3, [r7, #23]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002520:	4b79      	ldr	r3, [pc, #484]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002524:	f023 0207 	bic.w	r2, r3, #7
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	4976      	ldr	r1, [pc, #472]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	650b      	str	r3, [r1, #80]	; 0x50
 8002532:	e001      	b.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002534:	7dfb      	ldrb	r3, [r7, #23]
 8002536:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002540:	2b00      	cmp	r3, #0
 8002542:	d042      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800254c:	d02b      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800254e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002552:	d825      	bhi.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002554:	2bc0      	cmp	r3, #192	; 0xc0
 8002556:	d028      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002558:	2bc0      	cmp	r3, #192	; 0xc0
 800255a:	d821      	bhi.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800255c:	2b80      	cmp	r3, #128	; 0x80
 800255e:	d016      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d81d      	bhi.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d007      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800256c:	e018      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800256e:	4b66      	ldr	r3, [pc, #408]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	4a65      	ldr	r2, [pc, #404]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002578:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800257a:	e017      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f001 f944 	bl	8003810 <RCCEx_PLL2_Config>
 8002588:	4603      	mov	r3, r0
 800258a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800258c:	e00e      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3324      	adds	r3, #36	; 0x24
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f001 f9ed 	bl	8003974 <RCCEx_PLL3_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800259e:	e005      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	75fb      	strb	r3, [r7, #23]
      break;
 80025a4:	e002      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80025a6:	bf00      	nop
 80025a8:	e000      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80025aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80025b2:	4b55      	ldr	r3, [pc, #340]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	4952      	ldr	r1, [pc, #328]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	650b      	str	r3, [r1, #80]	; 0x50
 80025c4:	e001      	b.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c6:	7dfb      	ldrb	r3, [r7, #23]
 80025c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d049      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025e0:	d030      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80025e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025e6:	d82a      	bhi.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025ec:	d02c      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80025ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025f2:	d824      	bhi.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f8:	d018      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80025fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025fe:	d81e      	bhi.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002608:	d007      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800260a:	e018      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800260c:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	4a3d      	ldr	r2, [pc, #244]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002616:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002618:	e017      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f001 f8f5 	bl	8003810 <RCCEx_PLL2_Config>
 8002626:	4603      	mov	r3, r0
 8002628:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800262a:	e00e      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3324      	adds	r3, #36	; 0x24
 8002630:	2100      	movs	r1, #0
 8002632:	4618      	mov	r0, r3
 8002634:	f001 f99e 	bl	8003974 <RCCEx_PLL3_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800263c:	e005      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	75fb      	strb	r3, [r7, #23]
      break;
 8002642:	e002      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002644:	bf00      	nop
 8002646:	e000      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800265e:	492a      	ldr	r1, [pc, #168]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002660:	4313      	orrs	r3, r2
 8002662:	658b      	str	r3, [r1, #88]	; 0x58
 8002664:	e001      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002672:	2b00      	cmp	r3, #0
 8002674:	d04c      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800267c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002680:	d030      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002682:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002686:	d82a      	bhi.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002688:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800268c:	d02c      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800268e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002692:	d824      	bhi.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002694:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002698:	d018      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800269a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800269e:	d81e      	bhi.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a8:	d007      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80026aa:	e018      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ac:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	4a15      	ldr	r2, [pc, #84]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026b8:	e017      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3304      	adds	r3, #4
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 f8a5 	bl	8003810 <RCCEx_PLL2_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80026ca:	e00e      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3324      	adds	r3, #36	; 0x24
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 f94e 	bl	8003974 <RCCEx_PLL3_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026dc:	e005      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
      break;
 80026e2:	e002      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80026e4:	bf00      	nop
 80026e6:	e000      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80026e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80026fe:	4902      	ldr	r1, [pc, #8]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	658b      	str	r3, [r1, #88]	; 0x58
 8002704:	e004      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002706:	bf00      	nop
 8002708:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d032      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002720:	2b30      	cmp	r3, #48	; 0x30
 8002722:	d01c      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002724:	2b30      	cmp	r3, #48	; 0x30
 8002726:	d817      	bhi.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002728:	2b20      	cmp	r3, #32
 800272a:	d00c      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800272c:	2b20      	cmp	r3, #32
 800272e:	d813      	bhi.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d016      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002734:	2b10      	cmp	r3, #16
 8002736:	d10f      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002738:	4baf      	ldr	r3, [pc, #700]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	4aae      	ldr	r2, [pc, #696]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800273e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002742:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002744:	e00e      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2102      	movs	r1, #2
 800274c:	4618      	mov	r0, r3
 800274e:	f001 f85f 	bl	8003810 <RCCEx_PLL2_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002756:	e005      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	75fb      	strb	r3, [r7, #23]
      break;
 800275c:	e002      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800276a:	4ba3      	ldr	r3, [pc, #652]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002776:	49a0      	ldr	r1, [pc, #640]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002778:	4313      	orrs	r3, r2
 800277a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800277c:	e001      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277e:	7dfb      	ldrb	r3, [r7, #23]
 8002780:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d047      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002796:	d030      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800279c:	d82a      	bhi.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800279e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027a2:	d02c      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80027a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80027a8:	d824      	bhi.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80027aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ae:	d018      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80027b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b4:	d81e      	bhi.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80027ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027be:	d007      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80027c0:	e018      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c2:	4b8d      	ldr	r3, [pc, #564]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	4a8c      	ldr	r2, [pc, #560]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027ce:	e017      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f001 f81a 	bl	8003810 <RCCEx_PLL2_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027e0:	e00e      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3324      	adds	r3, #36	; 0x24
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f001 f8c3 	bl	8003974 <RCCEx_PLL3_Config>
 80027ee:	4603      	mov	r3, r0
 80027f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027f2:	e005      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	75fb      	strb	r3, [r7, #23]
      break;
 80027f8:	e002      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80027fa:	bf00      	nop
 80027fc:	e000      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80027fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002806:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800280a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002812:	4979      	ldr	r1, [pc, #484]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002814:	4313      	orrs	r3, r2
 8002816:	650b      	str	r3, [r1, #80]	; 0x50
 8002818:	e001      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d049      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800282e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002832:	d02e      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002838:	d828      	bhi.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800283a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800283e:	d02a      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002840:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002844:	d822      	bhi.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002846:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800284a:	d026      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800284c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002850:	d81c      	bhi.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002856:	d010      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800285c:	d816      	bhi.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01d      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002866:	d111      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3304      	adds	r3, #4
 800286c:	2101      	movs	r1, #1
 800286e:	4618      	mov	r0, r3
 8002870:	f000 ffce 	bl	8003810 <RCCEx_PLL2_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002878:	e012      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3324      	adds	r3, #36	; 0x24
 800287e:	2101      	movs	r1, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f001 f877 	bl	8003974 <RCCEx_PLL3_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800288a:	e009      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	75fb      	strb	r3, [r7, #23]
      break;
 8002890:	e006      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002892:	bf00      	nop
 8002894:	e004      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002896:	bf00      	nop
 8002898:	e002      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800289a:	bf00      	nop
 800289c:	e000      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800289e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028a6:	4b54      	ldr	r3, [pc, #336]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80028a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028aa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b2:	4951      	ldr	r1, [pc, #324]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	650b      	str	r3, [r1, #80]	; 0x50
 80028b8:	e001      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d04b      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80028d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028d4:	d02e      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80028d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028da:	d828      	bhi.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e0:	d02a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e6:	d822      	bhi.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028ec:	d026      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80028ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028f2:	d81c      	bhi.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028f8:	d010      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x508>
 80028fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028fe:	d816      	bhi.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01d      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002908:	d111      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f000 ff7d 	bl	8003810 <RCCEx_PLL2_Config>
 8002916:	4603      	mov	r3, r0
 8002918:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800291a:	e012      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3324      	adds	r3, #36	; 0x24
 8002920:	2101      	movs	r1, #1
 8002922:	4618      	mov	r0, r3
 8002924:	f001 f826 	bl	8003974 <RCCEx_PLL3_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800292c:	e009      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	75fb      	strb	r3, [r7, #23]
      break;
 8002932:	e006      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002934:	bf00      	nop
 8002936:	e004      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002938:	bf00      	nop
 800293a:	e002      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800293c:	bf00      	nop
 800293e:	e000      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002942:	7dfb      	ldrb	r3, [r7, #23]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002956:	4928      	ldr	r1, [pc, #160]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	658b      	str	r3, [r1, #88]	; 0x58
 800295c:	e001      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d02f      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002976:	d00e      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8002978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800297c:	d814      	bhi.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d015      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002982:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002986:	d10f      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	4a1a      	ldr	r2, [pc, #104]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800298e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002992:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002994:	e00c      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3304      	adds	r3, #4
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f000 ff37 	bl	8003810 <RCCEx_PLL2_Config>
 80029a2:	4603      	mov	r3, r0
 80029a4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80029a6:	e003      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	75fb      	strb	r3, [r7, #23]
      break;
 80029ac:	e000      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80029ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80029b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c2:	490d      	ldr	r1, [pc, #52]	; (80029f8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	650b      	str	r3, [r1, #80]	; 0x50
 80029c8:	e001      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d033      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d81c      	bhi.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	08002a23 	.word	0x08002a23
 80029ec:	080029fd 	.word	0x080029fd
 80029f0:	08002a0b 	.word	0x08002a0b
 80029f4:	08002a23 	.word	0x08002a23
 80029f8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029fc:	4bb8      	ldr	r3, [pc, #736]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	4ab7      	ldr	r2, [pc, #732]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a08:	e00c      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2102      	movs	r1, #2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fefd 	bl	8003810 <RCCEx_PLL2_Config>
 8002a16:	4603      	mov	r3, r0
 8002a18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a1a:	e003      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a20:	e000      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a2a:	4bad      	ldr	r3, [pc, #692]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	f023 0203 	bic.w	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	49aa      	ldr	r1, [pc, #680]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a3c:	e001      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8086 	beq.w	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a50:	4ba4      	ldr	r3, [pc, #656]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4aa3      	ldr	r2, [pc, #652]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe f93e 	bl	8000cdc <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a62:	e009      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a64:	f7fe f93a 	bl	8000cdc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	; 0x64
 8002a70:	d902      	bls.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	75fb      	strb	r3, [r7, #23]
        break;
 8002a76:	e005      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a78:	4b9a      	ldr	r3, [pc, #616]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ef      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d166      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a8a:	4b95      	ldr	r3, [pc, #596]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002a8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a94:	4053      	eors	r3, r2
 8002a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d013      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a9e:	4b90      	ldr	r3, [pc, #576]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aa8:	4b8d      	ldr	r3, [pc, #564]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	4a8c      	ldr	r2, [pc, #560]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab4:	4b8a      	ldr	r3, [pc, #552]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a89      	ldr	r2, [pc, #548]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ac0:	4a87      	ldr	r2, [pc, #540]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad0:	d115      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7fe f903 	bl	8000cdc <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7fe f8ff 	bl	8000cdc <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d902      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	75fb      	strb	r3, [r7, #23]
            break;
 8002af0:	e005      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af2:	4b7b      	ldr	r3, [pc, #492]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ed      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002afe:	7dfb      	ldrb	r3, [r7, #23]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d126      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b12:	d10d      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002b14:	4b72      	ldr	r3, [pc, #456]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b22:	0919      	lsrs	r1, r3, #4
 8002b24:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8002b26:	400b      	ands	r3, r1
 8002b28:	496d      	ldr	r1, [pc, #436]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	610b      	str	r3, [r1, #16]
 8002b2e:	e005      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002b30:	4b6b      	ldr	r3, [pc, #428]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	4a6a      	ldr	r2, [pc, #424]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b3a:	6113      	str	r3, [r2, #16]
 8002b3c:	4b68      	ldr	r3, [pc, #416]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4a:	4965      	ldr	r1, [pc, #404]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	670b      	str	r3, [r1, #112]	; 0x70
 8002b50:	e004      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	75bb      	strb	r3, [r7, #22]
 8002b56:	e001      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d07e      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6c:	2b28      	cmp	r3, #40	; 0x28
 8002b6e:	d867      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002b70:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b76:	bf00      	nop
 8002b78:	08002c47 	.word	0x08002c47
 8002b7c:	08002c41 	.word	0x08002c41
 8002b80:	08002c41 	.word	0x08002c41
 8002b84:	08002c41 	.word	0x08002c41
 8002b88:	08002c41 	.word	0x08002c41
 8002b8c:	08002c41 	.word	0x08002c41
 8002b90:	08002c41 	.word	0x08002c41
 8002b94:	08002c41 	.word	0x08002c41
 8002b98:	08002c1d 	.word	0x08002c1d
 8002b9c:	08002c41 	.word	0x08002c41
 8002ba0:	08002c41 	.word	0x08002c41
 8002ba4:	08002c41 	.word	0x08002c41
 8002ba8:	08002c41 	.word	0x08002c41
 8002bac:	08002c41 	.word	0x08002c41
 8002bb0:	08002c41 	.word	0x08002c41
 8002bb4:	08002c41 	.word	0x08002c41
 8002bb8:	08002c2f 	.word	0x08002c2f
 8002bbc:	08002c41 	.word	0x08002c41
 8002bc0:	08002c41 	.word	0x08002c41
 8002bc4:	08002c41 	.word	0x08002c41
 8002bc8:	08002c41 	.word	0x08002c41
 8002bcc:	08002c41 	.word	0x08002c41
 8002bd0:	08002c41 	.word	0x08002c41
 8002bd4:	08002c41 	.word	0x08002c41
 8002bd8:	08002c47 	.word	0x08002c47
 8002bdc:	08002c41 	.word	0x08002c41
 8002be0:	08002c41 	.word	0x08002c41
 8002be4:	08002c41 	.word	0x08002c41
 8002be8:	08002c41 	.word	0x08002c41
 8002bec:	08002c41 	.word	0x08002c41
 8002bf0:	08002c41 	.word	0x08002c41
 8002bf4:	08002c41 	.word	0x08002c41
 8002bf8:	08002c47 	.word	0x08002c47
 8002bfc:	08002c41 	.word	0x08002c41
 8002c00:	08002c41 	.word	0x08002c41
 8002c04:	08002c41 	.word	0x08002c41
 8002c08:	08002c41 	.word	0x08002c41
 8002c0c:	08002c41 	.word	0x08002c41
 8002c10:	08002c41 	.word	0x08002c41
 8002c14:	08002c41 	.word	0x08002c41
 8002c18:	08002c47 	.word	0x08002c47
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fdf4 	bl	8003810 <RCCEx_PLL2_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c2c:	e00c      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3324      	adds	r3, #36	; 0x24
 8002c32:	2101      	movs	r1, #1
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fe9d 	bl	8003974 <RCCEx_PLL3_Config>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c3e:	e003      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	75fb      	strb	r3, [r7, #23]
      break;
 8002c44:	e000      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8002c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c4e:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c5a:	4921      	ldr	r1, [pc, #132]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	654b      	str	r3, [r1, #84]	; 0x54
 8002c60:	e001      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d03e      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d820      	bhi.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8002c7a:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8002c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c80:	08002cc3 	.word	0x08002cc3
 8002c84:	08002c99 	.word	0x08002c99
 8002c88:	08002cab 	.word	0x08002cab
 8002c8c:	08002cc3 	.word	0x08002cc3
 8002c90:	08002cc3 	.word	0x08002cc3
 8002c94:	08002cc3 	.word	0x08002cc3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fdb6 	bl	8003810 <RCCEx_PLL2_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ca8:	e00c      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3324      	adds	r3, #36	; 0x24
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fe5f 	bl	8003974 <RCCEx_PLL3_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002cba:	e003      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8002cc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d110      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cce:	f023 0207 	bic.w	r2, r3, #7
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd6:	4902      	ldr	r1, [pc, #8]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	654b      	str	r3, [r1, #84]	; 0x54
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8002cde:	bf00      	nop
 8002ce0:	58024400 	.word	0x58024400
 8002ce4:	58024800 	.word	0x58024800
 8002ce8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cec:	7dfb      	ldrb	r3, [r7, #23]
 8002cee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d039      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d820      	bhi.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8002d06:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d4f 	.word	0x08002d4f
 8002d10:	08002d25 	.word	0x08002d25
 8002d14:	08002d37 	.word	0x08002d37
 8002d18:	08002d4f 	.word	0x08002d4f
 8002d1c:	08002d4f 	.word	0x08002d4f
 8002d20:	08002d4f 	.word	0x08002d4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3304      	adds	r3, #4
 8002d28:	2101      	movs	r1, #1
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fd70 	bl	8003810 <RCCEx_PLL2_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d34:	e00c      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3324      	adds	r3, #36	; 0x24
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fe19 	bl	8003974 <RCCEx_PLL3_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d46:	e003      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d4c:	e000      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8002d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10a      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d56:	4bb7      	ldr	r3, [pc, #732]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5a:	f023 0207 	bic.w	r2, r3, #7
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	49b3      	ldr	r1, [pc, #716]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	658b      	str	r3, [r1, #88]	; 0x58
 8002d6a:	e001      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d04b      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d86:	d02e      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8002d88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d8c:	d828      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d92:	d02a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d822      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002d9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d9e:	d026      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002da0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002da4:	d81c      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002daa:	d010      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8002dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db0:	d816      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d01d      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002db6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dba:	d111      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fd24 	bl	8003810 <RCCEx_PLL2_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002dcc:	e012      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3324      	adds	r3, #36	; 0x24
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fdcd 	bl	8003974 <RCCEx_PLL3_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002dde:	e009      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	75fb      	strb	r3, [r7, #23]
      break;
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002de6:	bf00      	nop
 8002de8:	e004      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002dea:	bf00      	nop
 8002dec:	e002      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8002df2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002df4:	7dfb      	ldrb	r3, [r7, #23]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dfa:	4b8e      	ldr	r3, [pc, #568]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e08:	498a      	ldr	r1, [pc, #552]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	654b      	str	r3, [r1, #84]	; 0x54
 8002e0e:	e001      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d04b      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e26:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e2a:	d02e      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8002e2c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e30:	d828      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e36:	d02a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3c:	d822      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e42:	d026      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002e44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e48:	d81c      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e4e:	d010      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8002e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e54:	d816      	bhi.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01d      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5e:	d111      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fcd2 	bl	8003810 <RCCEx_PLL2_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e70:	e012      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3324      	adds	r3, #36	; 0x24
 8002e76:	2102      	movs	r1, #2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fd7b 	bl	8003974 <RCCEx_PLL3_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e82:	e009      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
      break;
 8002e88:	e006      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002e8a:	bf00      	nop
 8002e8c:	e004      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002e8e:	bf00      	nop
 8002e90:	e002      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8002e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e98:	7dfb      	ldrb	r3, [r7, #23]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10a      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e9e:	4b65      	ldr	r3, [pc, #404]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eac:	4961      	ldr	r1, [pc, #388]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	658b      	str	r3, [r1, #88]	; 0x58
 8002eb2:	e001      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d04b      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ece:	d02e      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8002ed0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ed4:	d828      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eda:	d02a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8002edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee0:	d822      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002ee2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ee6:	d026      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002ee8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002eec:	d81c      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8002ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef8:	d816      	bhi.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01d      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f02:	d111      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fc80 	bl	8003810 <RCCEx_PLL2_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f14:	e012      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3324      	adds	r3, #36	; 0x24
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fd29 	bl	8003974 <RCCEx_PLL3_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f26:	e009      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f2c:	e006      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e004      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f32:	bf00      	nop
 8002f34:	e002      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f36:	bf00      	nop
 8002f38:	e000      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8002f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f42:	4b3c      	ldr	r3, [pc, #240]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f50:	4938      	ldr	r1, [pc, #224]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	658b      	str	r3, [r1, #88]	; 0x58
 8002f56:	e001      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d10a      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3324      	adds	r3, #36	; 0x24
 8002f78:	2102      	movs	r1, #2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fcfa 	bl	8003974 <RCCEx_PLL3_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f8a:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f98:	4926      	ldr	r1, [pc, #152]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb4:	d10a      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	3324      	adds	r3, #36	; 0x24
 8002fba:	2102      	movs	r1, #2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fcd9 	bl	8003974 <RCCEx_PLL3_Config>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fcc:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fda:	4916      	ldr	r1, [pc, #88]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d036      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff6:	d01f      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ffc:	d817      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003006:	d009      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003008:	e011      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3304      	adds	r3, #4
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fbfd 	bl	8003810 <RCCEx_PLL2_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800301a:	e00e      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3324      	adds	r3, #36	; 0x24
 8003020:	2102      	movs	r1, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fca6 	bl	8003974 <RCCEx_PLL3_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800302c:	e005      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
      break;
 8003032:	e002      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003034:	58024400 	.word	0x58024400
      break;
 8003038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10a      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003040:	4b93      	ldr	r3, [pc, #588]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800304e:	4990      	ldr	r1, [pc, #576]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003050:	4313      	orrs	r3, r2
 8003052:	658b      	str	r3, [r1, #88]	; 0x58
 8003054:	e001      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003056:	7dfb      	ldrb	r3, [r7, #23]
 8003058:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d033      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800306c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003070:	d01c      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003072:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003076:	d816      	bhi.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800307c:	d003      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800307e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003082:	d007      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003084:	e00f      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003086:	4b82      	ldr	r3, [pc, #520]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	4a81      	ldr	r2, [pc, #516]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800308c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003090:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003092:	e00c      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3324      	adds	r3, #36	; 0x24
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fc6a 	bl	8003974 <RCCEx_PLL3_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
      break;
 80030aa:	e000      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80030ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10a      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b4:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c2:	4973      	ldr	r1, [pc, #460]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	654b      	str	r3, [r1, #84]	; 0x54
 80030c8:	e001      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d029      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e6:	d007      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80030e8:	e00f      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ea:	4b69      	ldr	r3, [pc, #420]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	4a68      	ldr	r2, [pc, #416]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80030f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030f6:	e00b      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	2102      	movs	r1, #2
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fb86 	bl	8003810 <RCCEx_PLL2_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003108:	e002      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	75fb      	strb	r3, [r7, #23]
      break;
 800310e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003116:	4b5e      	ldr	r3, [pc, #376]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003122:	495b      	ldr	r1, [pc, #364]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003124:	4313      	orrs	r3, r2
 8003126:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003128:	e001      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312a:	7dfb      	ldrb	r3, [r7, #23]
 800312c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3324      	adds	r3, #36	; 0x24
 800313e:	2102      	movs	r1, #2
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fc17 	bl	8003974 <RCCEx_PLL3_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d030      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003164:	d017      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800316a:	d811      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800316c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003170:	d013      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003176:	d80b      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800317c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003180:	d106      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003182:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003186:	4a42      	ldr	r2, [pc, #264]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800318e:	e007      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
      break;
 8003194:	e004      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003196:	bf00      	nop
 8003198:	e002      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800319e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031a6:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b2:	4937      	ldr	r1, [pc, #220]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	654b      	str	r3, [r1, #84]	; 0x54
 80031b8:	e001      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031ca:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	492e      	ldr	r1, [pc, #184]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80031e8:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031f6:	4926      	ldr	r1, [pc, #152]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003208:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800320a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003214:	491e      	ldr	r1, [pc, #120]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	4a19      	ldr	r2, [pc, #100]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800322c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003230:	6113      	str	r3, [r2, #16]
 8003232:	4b17      	ldr	r3, [pc, #92]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800323c:	4914      	ldr	r1, [pc, #80]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da08      	bge.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003256:	490e      	ldr	r1, [pc, #56]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003258:	4313      	orrs	r3, r2
 800325a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003268:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003276:	4906      	ldr	r1, [pc, #24]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003278:	4313      	orrs	r3, r2
 800327a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800327c:	7dbb      	ldrb	r3, [r7, #22]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	58024400 	.word	0x58024400

08003294 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003298:	f7ff f860 	bl	800235c <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	091b      	lsrs	r3, r3, #4
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4904      	ldr	r1, [pc, #16]	; (80032bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	58024400 	.word	0x58024400
 80032bc:	08004d44 	.word	0x08004d44

080032c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	; 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032c8:	4ba1      	ldr	r3, [pc, #644]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80032d2:	4b9f      	ldr	r3, [pc, #636]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	0b1b      	lsrs	r3, r3, #12
 80032d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80032de:	4b9c      	ldr	r3, [pc, #624]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80032ea:	4b99      	ldr	r3, [pc, #612]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	08db      	lsrs	r3, r3, #3
 80032f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	fb02 f303 	mul.w	r3, r2, r3
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8111 	beq.w	8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b02      	cmp	r3, #2
 8003312:	f000 8083 	beq.w	800341c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b02      	cmp	r3, #2
 800331a:	f200 80a1 	bhi.w	8003460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d056      	beq.n	80033d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800332a:	e099      	b.n	8003460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800332c:	4b88      	ldr	r3, [pc, #544]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b00      	cmp	r3, #0
 8003336:	d02d      	beq.n	8003394 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003338:	4b85      	ldr	r3, [pc, #532]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	08db      	lsrs	r3, r3, #3
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	4a84      	ldr	r2, [pc, #528]	; (8003554 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	ee07 3a90 	vmov	s15, r3
 8003350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003362:	4b7b      	ldr	r3, [pc, #492]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003372:	ed97 6a03 	vldr	s12, [r7, #12]
 8003376:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003392:	e087      	b.n	80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800355c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80033a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a6:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80033ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033d6:	e065      	b.n	80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80033e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ea:	4b59      	ldr	r3, [pc, #356]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80033fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800340a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800341a:	e043      	b.n	80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003426:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800342a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342e:	4b48      	ldr	r3, [pc, #288]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003442:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800345e:	e021      	b.n	80034a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800346e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003472:	4b37      	ldr	r3, [pc, #220]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003482:	ed97 6a03 	vldr	s12, [r7, #12]
 8003486:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800348a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80034a4:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	0a5b      	lsrs	r3, r3, #9
 80034aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ae:	ee07 3a90 	vmov	s15, r3
 80034b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034be:	edd7 6a07 	vldr	s13, [r7, #28]
 80034c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ca:	ee17 2a90 	vmov	r2, s15
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80034d2:	4b1f      	ldr	r3, [pc, #124]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034dc:	ee07 3a90 	vmov	s15, r3
 80034e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80034f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034f8:	ee17 2a90 	vmov	r2, s15
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	0e1b      	lsrs	r3, r3, #24
 8003506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800351a:	edd7 6a07 	vldr	s13, [r7, #28]
 800351e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003526:	ee17 2a90 	vmov	r2, s15
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800352e:	e008      	b.n	8003542 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
}
 8003542:	bf00      	nop
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	58024400 	.word	0x58024400
 8003554:	03d09000 	.word	0x03d09000
 8003558:	46000000 	.word	0x46000000
 800355c:	4c742400 	.word	0x4c742400
 8003560:	4a742400 	.word	0x4a742400
 8003564:	4bbebc20 	.word	0x4bbebc20

08003568 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003570:	4ba1      	ldr	r3, [pc, #644]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800357a:	4b9f      	ldr	r3, [pc, #636]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	0d1b      	lsrs	r3, r3, #20
 8003580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003584:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003586:	4b9c      	ldr	r3, [pc, #624]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003592:	4b99      	ldr	r3, [pc, #612]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	08db      	lsrs	r3, r3, #3
 8003598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8111 	beq.w	80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	f000 8083 	beq.w	80036c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	f200 80a1 	bhi.w	8003708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d056      	beq.n	8003680 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80035d2:	e099      	b.n	8003708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d4:	4b88      	ldr	r3, [pc, #544]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d02d      	beq.n	800363c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035e0:	4b85      	ldr	r3, [pc, #532]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	4a84      	ldr	r2, [pc, #528]	; (80037fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
 80035f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800360a:	4b7b      	ldr	r3, [pc, #492]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361a:	ed97 6a03 	vldr	s12, [r7, #12]
 800361e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800362a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800362e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003636:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800363a:	e087      	b.n	800374c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	ee07 3a90 	vmov	s15, r3
 8003642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003646:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003804 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800364a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800364e:	4b6a      	ldr	r3, [pc, #424]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003662:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800366a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800366e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800367e:	e065      	b.n	800374c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	ee07 3a90 	vmov	s15, r3
 8003686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800368a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800368e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003692:	4b59      	ldr	r3, [pc, #356]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80036a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036c2:	e043      	b.n	800374c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800380c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80036d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036d6:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80036ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003702:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003706:	e021      	b.n	800374c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	ee07 3a90 	vmov	s15, r3
 800370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003712:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371a:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372a:	ed97 6a03 	vldr	s12, [r7, #12]
 800372e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800373e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003746:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800374a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800374c:	4b2a      	ldr	r3, [pc, #168]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	0a5b      	lsrs	r3, r3, #9
 8003752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003766:	edd7 6a07 	vldr	s13, [r7, #28]
 800376a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003772:	ee17 2a90 	vmov	r2, s15
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800377a:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	0c1b      	lsrs	r3, r3, #16
 8003780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003784:	ee07 3a90 	vmov	s15, r3
 8003788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003794:	edd7 6a07 	vldr	s13, [r7, #28]
 8003798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800379c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a0:	ee17 2a90 	vmov	r2, s15
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	0e1b      	lsrs	r3, r3, #24
 80037ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80037c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ce:	ee17 2a90 	vmov	r2, s15
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80037d6:	e008      	b.n	80037ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
}
 80037ea:	bf00      	nop
 80037ec:	3724      	adds	r7, #36	; 0x24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	58024400 	.word	0x58024400
 80037fc:	03d09000 	.word	0x03d09000
 8003800:	46000000 	.word	0x46000000
 8003804:	4c742400 	.word	0x4c742400
 8003808:	4a742400 	.word	0x4a742400
 800380c:	4bbebc20 	.word	0x4bbebc20

08003810 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800381e:	4b53      	ldr	r3, [pc, #332]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b03      	cmp	r3, #3
 8003828:	d101      	bne.n	800382e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e099      	b.n	8003962 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800382e:	4b4f      	ldr	r3, [pc, #316]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a4e      	ldr	r2, [pc, #312]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003834:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383a:	f7fd fa4f 	bl	8000cdc <HAL_GetTick>
 800383e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003840:	e008      	b.n	8003854 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003842:	f7fd fa4b 	bl	8000cdc <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e086      	b.n	8003962 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003854:	4b45      	ldr	r3, [pc, #276]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003860:	4b42      	ldr	r3, [pc, #264]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	031b      	lsls	r3, r3, #12
 800386e:	493f      	ldr	r1, [pc, #252]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003870:	4313      	orrs	r3, r2
 8003872:	628b      	str	r3, [r1, #40]	; 0x28
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	3b01      	subs	r3, #1
 800387a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	3b01      	subs	r3, #1
 8003884:	025b      	lsls	r3, r3, #9
 8003886:	b29b      	uxth	r3, r3
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	3b01      	subs	r3, #1
 8003890:	041b      	lsls	r3, r3, #16
 8003892:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	3b01      	subs	r3, #1
 800389e:	061b      	lsls	r3, r3, #24
 80038a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80038a4:	4931      	ldr	r1, [pc, #196]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80038aa:	4b30      	ldr	r3, [pc, #192]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	492d      	ldr	r1, [pc, #180]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80038bc:	4b2b      	ldr	r3, [pc, #172]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	f023 0220 	bic.w	r2, r3, #32
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	4928      	ldr	r1, [pc, #160]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80038ce:	4b27      	ldr	r3, [pc, #156]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	4a26      	ldr	r2, [pc, #152]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038d4:	f023 0310 	bic.w	r3, r3, #16
 80038d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80038da:	4b24      	ldr	r3, [pc, #144]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <RCCEx_PLL2_Config+0x160>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	69d2      	ldr	r2, [r2, #28]
 80038e6:	00d2      	lsls	r2, r2, #3
 80038e8:	4920      	ldr	r1, [pc, #128]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80038ee:	4b1f      	ldr	r3, [pc, #124]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	4a1e      	ldr	r2, [pc, #120]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 80038f4:	f043 0310 	orr.w	r3, r3, #16
 80038f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d106      	bne.n	800390e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	4a19      	ldr	r2, [pc, #100]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800390a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800390c:	e00f      	b.n	800392e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d106      	bne.n	8003922 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003914:	4b15      	ldr	r3, [pc, #84]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 800391a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800391e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003920:	e005      	b.n	800392e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003922:	4b12      	ldr	r3, [pc, #72]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	4a11      	ldr	r2, [pc, #68]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800392c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800392e:	4b0f      	ldr	r3, [pc, #60]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a0e      	ldr	r2, [pc, #56]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003934:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800393a:	f7fd f9cf 	bl	8000cdc <HAL_GetTick>
 800393e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003940:	e008      	b.n	8003954 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003942:	f7fd f9cb 	bl	8000cdc <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e006      	b.n	8003962 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <RCCEx_PLL2_Config+0x15c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	58024400 	.word	0x58024400
 8003970:	ffff0007 	.word	0xffff0007

08003974 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003982:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b03      	cmp	r3, #3
 800398c:	d101      	bne.n	8003992 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e099      	b.n	8003ac6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003992:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a4e      	ldr	r2, [pc, #312]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800399e:	f7fd f99d 	bl	8000cdc <HAL_GetTick>
 80039a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80039a4:	e008      	b.n	80039b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80039a6:	f7fd f999 	bl	8000cdc <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e086      	b.n	8003ac6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80039b8:	4b45      	ldr	r3, [pc, #276]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80039c4:	4b42      	ldr	r3, [pc, #264]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	051b      	lsls	r3, r3, #20
 80039d2:	493f      	ldr	r1, [pc, #252]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	628b      	str	r3, [r1, #40]	; 0x28
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	3b01      	subs	r3, #1
 80039de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	025b      	lsls	r3, r3, #9
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	061b      	lsls	r3, r3, #24
 8003a04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a08:	4931      	ldr	r1, [pc, #196]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003a0e:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	492d      	ldr	r1, [pc, #180]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003a20:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4928      	ldr	r1, [pc, #160]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003a32:	4b27      	ldr	r3, [pc, #156]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	4a26      	ldr	r2, [pc, #152]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003a3e:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a42:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <RCCEx_PLL3_Config+0x160>)
 8003a44:	4013      	ands	r3, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	69d2      	ldr	r2, [r2, #28]
 8003a4a:	00d2      	lsls	r2, r2, #3
 8003a4c:	4920      	ldr	r1, [pc, #128]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003a52:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	4a19      	ldr	r2, [pc, #100]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a70:	e00f      	b.n	8003a92 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d106      	bne.n	8003a86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a84:	e005      	b.n	8003a92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003a92:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a0e      	ldr	r2, [pc, #56]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a9e:	f7fd f91d 	bl	8000cdc <HAL_GetTick>
 8003aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003aa4:	e008      	b.n	8003ab8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003aa6:	f7fd f919 	bl	8000cdc <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e006      	b.n	8003ac6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <RCCEx_PLL3_Config+0x15c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	ffff0007 	.word	0xffff0007

08003ad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e042      	b.n	8003b70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7fc ffa7 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2224      	movs	r2, #36	; 0x24
 8003b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f8c2 	bl	8003ca4 <UART_SetConfig>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e022      	b.n	8003b70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fe16 	bl	8004764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fe9d 	bl	80048a8 <UART_CheckIdleState>
 8003b6e:	4603      	mov	r3, r0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	4613      	mov	r3, r2
 8003b86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	f040 8083 	bne.w	8003c9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_UART_Transmit+0x28>
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e07b      	b.n	8003c9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_UART_Transmit+0x3a>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e074      	b.n	8003c9c <HAL_UART_Transmit+0x124>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2221      	movs	r2, #33	; 0x21
 8003bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bca:	f7fd f887 	bl	8000cdc <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	88fa      	ldrh	r2, [r7, #6]
 8003bdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be8:	d108      	bne.n	8003bfc <HAL_UART_Transmit+0x84>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	61bb      	str	r3, [r7, #24]
 8003bfa:	e003      	b.n	8003c04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003c0c:	e02c      	b.n	8003c68 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2180      	movs	r1, #128	; 0x80
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fe90 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e039      	b.n	8003c9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10b      	bne.n	8003c46 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	3302      	adds	r3, #2
 8003c42:	61bb      	str	r3, [r7, #24]
 8003c44:	e007      	b.n	8003c56 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3301      	adds	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1cc      	bne.n	8003c0e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2140      	movs	r1, #64	; 0x40
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 fe5d 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e006      	b.n	8003c9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e000      	b.n	8003c9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ca4:	b5b0      	push	{r4, r5, r7, lr}
 8003ca6:	b08e      	sub	sp, #56	; 0x38
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4bbf      	ldr	r3, [pc, #764]	; (8003fd0 <UART_SetConfig+0x32c>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4ab5      	ldr	r2, [pc, #724]	; (8003fd4 <UART_SetConfig+0x330>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d004      	beq.n	8003d0e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	4bb0      	ldr	r3, [pc, #704]	; (8003fd8 <UART_SetConfig+0x334>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	f023 010f 	bic.w	r1, r3, #15
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4aa7      	ldr	r2, [pc, #668]	; (8003fdc <UART_SetConfig+0x338>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d176      	bne.n	8003e30 <UART_SetConfig+0x18c>
 8003d42:	4ba7      	ldr	r3, [pc, #668]	; (8003fe0 <UART_SetConfig+0x33c>)
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d4a:	2b28      	cmp	r3, #40	; 0x28
 8003d4c:	d86c      	bhi.n	8003e28 <UART_SetConfig+0x184>
 8003d4e:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <UART_SetConfig+0xb0>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003df9 	.word	0x08003df9
 8003d58:	08003e29 	.word	0x08003e29
 8003d5c:	08003e29 	.word	0x08003e29
 8003d60:	08003e29 	.word	0x08003e29
 8003d64:	08003e29 	.word	0x08003e29
 8003d68:	08003e29 	.word	0x08003e29
 8003d6c:	08003e29 	.word	0x08003e29
 8003d70:	08003e29 	.word	0x08003e29
 8003d74:	08003e01 	.word	0x08003e01
 8003d78:	08003e29 	.word	0x08003e29
 8003d7c:	08003e29 	.word	0x08003e29
 8003d80:	08003e29 	.word	0x08003e29
 8003d84:	08003e29 	.word	0x08003e29
 8003d88:	08003e29 	.word	0x08003e29
 8003d8c:	08003e29 	.word	0x08003e29
 8003d90:	08003e29 	.word	0x08003e29
 8003d94:	08003e09 	.word	0x08003e09
 8003d98:	08003e29 	.word	0x08003e29
 8003d9c:	08003e29 	.word	0x08003e29
 8003da0:	08003e29 	.word	0x08003e29
 8003da4:	08003e29 	.word	0x08003e29
 8003da8:	08003e29 	.word	0x08003e29
 8003dac:	08003e29 	.word	0x08003e29
 8003db0:	08003e29 	.word	0x08003e29
 8003db4:	08003e11 	.word	0x08003e11
 8003db8:	08003e29 	.word	0x08003e29
 8003dbc:	08003e29 	.word	0x08003e29
 8003dc0:	08003e29 	.word	0x08003e29
 8003dc4:	08003e29 	.word	0x08003e29
 8003dc8:	08003e29 	.word	0x08003e29
 8003dcc:	08003e29 	.word	0x08003e29
 8003dd0:	08003e29 	.word	0x08003e29
 8003dd4:	08003e19 	.word	0x08003e19
 8003dd8:	08003e29 	.word	0x08003e29
 8003ddc:	08003e29 	.word	0x08003e29
 8003de0:	08003e29 	.word	0x08003e29
 8003de4:	08003e29 	.word	0x08003e29
 8003de8:	08003e29 	.word	0x08003e29
 8003dec:	08003e29 	.word	0x08003e29
 8003df0:	08003e29 	.word	0x08003e29
 8003df4:	08003e21 	.word	0x08003e21
 8003df8:	2301      	movs	r3, #1
 8003dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dfe:	e222      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e06:	e21e      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e0e:	e21a      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e16:	e216      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e18:	2320      	movs	r3, #32
 8003e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e1e:	e212      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e20:	2340      	movs	r3, #64	; 0x40
 8003e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e26:	e20e      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e2e:	e20a      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a6b      	ldr	r2, [pc, #428]	; (8003fe4 <UART_SetConfig+0x340>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d130      	bne.n	8003e9c <UART_SetConfig+0x1f8>
 8003e3a:	4b69      	ldr	r3, [pc, #420]	; (8003fe0 <UART_SetConfig+0x33c>)
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	2b05      	cmp	r3, #5
 8003e44:	d826      	bhi.n	8003e94 <UART_SetConfig+0x1f0>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x1a8>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003e65 	.word	0x08003e65
 8003e50:	08003e6d 	.word	0x08003e6d
 8003e54:	08003e75 	.word	0x08003e75
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e85 	.word	0x08003e85
 8003e60:	08003e8d 	.word	0x08003e8d
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e6a:	e1ec      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e72:	e1e8      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e74:	2308      	movs	r3, #8
 8003e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e7a:	e1e4      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e82:	e1e0      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e84:	2320      	movs	r3, #32
 8003e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e8a:	e1dc      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e8c:	2340      	movs	r3, #64	; 0x40
 8003e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e92:	e1d8      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e9a:	e1d4      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a51      	ldr	r2, [pc, #324]	; (8003fe8 <UART_SetConfig+0x344>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d130      	bne.n	8003f08 <UART_SetConfig+0x264>
 8003ea6:	4b4e      	ldr	r3, [pc, #312]	; (8003fe0 <UART_SetConfig+0x33c>)
 8003ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	d826      	bhi.n	8003f00 <UART_SetConfig+0x25c>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <UART_SetConfig+0x214>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ed1 	.word	0x08003ed1
 8003ebc:	08003ed9 	.word	0x08003ed9
 8003ec0:	08003ee1 	.word	0x08003ee1
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003ef1 	.word	0x08003ef1
 8003ecc:	08003ef9 	.word	0x08003ef9
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ed6:	e1b6      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ede:	e1b2      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ee6:	e1ae      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eee:	e1aa      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ef6:	e1a6      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003ef8:	2340      	movs	r3, #64	; 0x40
 8003efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003efe:	e1a2      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003f00:	2380      	movs	r3, #128	; 0x80
 8003f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f06:	e19e      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a37      	ldr	r2, [pc, #220]	; (8003fec <UART_SetConfig+0x348>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d130      	bne.n	8003f74 <UART_SetConfig+0x2d0>
 8003f12:	4b33      	ldr	r3, [pc, #204]	; (8003fe0 <UART_SetConfig+0x33c>)
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	2b05      	cmp	r3, #5
 8003f1c:	d826      	bhi.n	8003f6c <UART_SetConfig+0x2c8>
 8003f1e:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <UART_SetConfig+0x280>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f3d 	.word	0x08003f3d
 8003f28:	08003f45 	.word	0x08003f45
 8003f2c:	08003f4d 	.word	0x08003f4d
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f42:	e180      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003f44:	2304      	movs	r3, #4
 8003f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f4a:	e17c      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003f4c:	2308      	movs	r3, #8
 8003f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f52:	e178      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003f54:	2310      	movs	r3, #16
 8003f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f5a:	e174      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003f5c:	2320      	movs	r3, #32
 8003f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f62:	e170      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003f64:	2340      	movs	r3, #64	; 0x40
 8003f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f6a:	e16c      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003f6c:	2380      	movs	r3, #128	; 0x80
 8003f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f72:	e168      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1d      	ldr	r2, [pc, #116]	; (8003ff0 <UART_SetConfig+0x34c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d142      	bne.n	8004004 <UART_SetConfig+0x360>
 8003f7e:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <UART_SetConfig+0x33c>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d838      	bhi.n	8003ffc <UART_SetConfig+0x358>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0x2ec>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fa9 	.word	0x08003fa9
 8003f94:	08003fb1 	.word	0x08003fb1
 8003f98:	08003fb9 	.word	0x08003fb9
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08003fc9 	.word	0x08003fc9
 8003fa4:	08003ff5 	.word	0x08003ff5
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fae:	e14a      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fb6:	e146      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003fb8:	2308      	movs	r3, #8
 8003fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fbe:	e142      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003fc0:	2310      	movs	r3, #16
 8003fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fc6:	e13e      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003fc8:	2320      	movs	r3, #32
 8003fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fce:	e13a      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003fd0:	cfff69f3 	.word	0xcfff69f3
 8003fd4:	58000c00 	.word	0x58000c00
 8003fd8:	11fff4ff 	.word	0x11fff4ff
 8003fdc:	40011000 	.word	0x40011000
 8003fe0:	58024400 	.word	0x58024400
 8003fe4:	40004400 	.word	0x40004400
 8003fe8:	40004800 	.word	0x40004800
 8003fec:	40004c00 	.word	0x40004c00
 8003ff0:	40005000 	.word	0x40005000
 8003ff4:	2340      	movs	r3, #64	; 0x40
 8003ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ffa:	e124      	b.n	8004246 <UART_SetConfig+0x5a2>
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004002:	e120      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4acc      	ldr	r2, [pc, #816]	; (800433c <UART_SetConfig+0x698>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d176      	bne.n	80040fc <UART_SetConfig+0x458>
 800400e:	4bcc      	ldr	r3, [pc, #816]	; (8004340 <UART_SetConfig+0x69c>)
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004016:	2b28      	cmp	r3, #40	; 0x28
 8004018:	d86c      	bhi.n	80040f4 <UART_SetConfig+0x450>
 800401a:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0x37c>)
 800401c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004020:	080040c5 	.word	0x080040c5
 8004024:	080040f5 	.word	0x080040f5
 8004028:	080040f5 	.word	0x080040f5
 800402c:	080040f5 	.word	0x080040f5
 8004030:	080040f5 	.word	0x080040f5
 8004034:	080040f5 	.word	0x080040f5
 8004038:	080040f5 	.word	0x080040f5
 800403c:	080040f5 	.word	0x080040f5
 8004040:	080040cd 	.word	0x080040cd
 8004044:	080040f5 	.word	0x080040f5
 8004048:	080040f5 	.word	0x080040f5
 800404c:	080040f5 	.word	0x080040f5
 8004050:	080040f5 	.word	0x080040f5
 8004054:	080040f5 	.word	0x080040f5
 8004058:	080040f5 	.word	0x080040f5
 800405c:	080040f5 	.word	0x080040f5
 8004060:	080040d5 	.word	0x080040d5
 8004064:	080040f5 	.word	0x080040f5
 8004068:	080040f5 	.word	0x080040f5
 800406c:	080040f5 	.word	0x080040f5
 8004070:	080040f5 	.word	0x080040f5
 8004074:	080040f5 	.word	0x080040f5
 8004078:	080040f5 	.word	0x080040f5
 800407c:	080040f5 	.word	0x080040f5
 8004080:	080040dd 	.word	0x080040dd
 8004084:	080040f5 	.word	0x080040f5
 8004088:	080040f5 	.word	0x080040f5
 800408c:	080040f5 	.word	0x080040f5
 8004090:	080040f5 	.word	0x080040f5
 8004094:	080040f5 	.word	0x080040f5
 8004098:	080040f5 	.word	0x080040f5
 800409c:	080040f5 	.word	0x080040f5
 80040a0:	080040e5 	.word	0x080040e5
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	080040f5 	.word	0x080040f5
 80040ac:	080040f5 	.word	0x080040f5
 80040b0:	080040f5 	.word	0x080040f5
 80040b4:	080040f5 	.word	0x080040f5
 80040b8:	080040f5 	.word	0x080040f5
 80040bc:	080040f5 	.word	0x080040f5
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ca:	e0bc      	b.n	8004246 <UART_SetConfig+0x5a2>
 80040cc:	2304      	movs	r3, #4
 80040ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040d2:	e0b8      	b.n	8004246 <UART_SetConfig+0x5a2>
 80040d4:	2308      	movs	r3, #8
 80040d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040da:	e0b4      	b.n	8004246 <UART_SetConfig+0x5a2>
 80040dc:	2310      	movs	r3, #16
 80040de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e2:	e0b0      	b.n	8004246 <UART_SetConfig+0x5a2>
 80040e4:	2320      	movs	r3, #32
 80040e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ea:	e0ac      	b.n	8004246 <UART_SetConfig+0x5a2>
 80040ec:	2340      	movs	r3, #64	; 0x40
 80040ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040f2:	e0a8      	b.n	8004246 <UART_SetConfig+0x5a2>
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fa:	e0a4      	b.n	8004246 <UART_SetConfig+0x5a2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a90      	ldr	r2, [pc, #576]	; (8004344 <UART_SetConfig+0x6a0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d130      	bne.n	8004168 <UART_SetConfig+0x4c4>
 8004106:	4b8e      	ldr	r3, [pc, #568]	; (8004340 <UART_SetConfig+0x69c>)
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	2b05      	cmp	r3, #5
 8004110:	d826      	bhi.n	8004160 <UART_SetConfig+0x4bc>
 8004112:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x474>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	08004131 	.word	0x08004131
 800411c:	08004139 	.word	0x08004139
 8004120:	08004141 	.word	0x08004141
 8004124:	08004149 	.word	0x08004149
 8004128:	08004151 	.word	0x08004151
 800412c:	08004159 	.word	0x08004159
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004136:	e086      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004138:	2304      	movs	r3, #4
 800413a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800413e:	e082      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004140:	2308      	movs	r3, #8
 8004142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004146:	e07e      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004148:	2310      	movs	r3, #16
 800414a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800414e:	e07a      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004150:	2320      	movs	r3, #32
 8004152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004156:	e076      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004158:	2340      	movs	r3, #64	; 0x40
 800415a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800415e:	e072      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004166:	e06e      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a76      	ldr	r2, [pc, #472]	; (8004348 <UART_SetConfig+0x6a4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d130      	bne.n	80041d4 <UART_SetConfig+0x530>
 8004172:	4b73      	ldr	r3, [pc, #460]	; (8004340 <UART_SetConfig+0x69c>)
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	2b05      	cmp	r3, #5
 800417c:	d826      	bhi.n	80041cc <UART_SetConfig+0x528>
 800417e:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <UART_SetConfig+0x4e0>)
 8004180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004184:	0800419d 	.word	0x0800419d
 8004188:	080041a5 	.word	0x080041a5
 800418c:	080041ad 	.word	0x080041ad
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041bd 	.word	0x080041bd
 8004198:	080041c5 	.word	0x080041c5
 800419c:	2300      	movs	r3, #0
 800419e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041a2:	e050      	b.n	8004246 <UART_SetConfig+0x5a2>
 80041a4:	2304      	movs	r3, #4
 80041a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041aa:	e04c      	b.n	8004246 <UART_SetConfig+0x5a2>
 80041ac:	2308      	movs	r3, #8
 80041ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041b2:	e048      	b.n	8004246 <UART_SetConfig+0x5a2>
 80041b4:	2310      	movs	r3, #16
 80041b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ba:	e044      	b.n	8004246 <UART_SetConfig+0x5a2>
 80041bc:	2320      	movs	r3, #32
 80041be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041c2:	e040      	b.n	8004246 <UART_SetConfig+0x5a2>
 80041c4:	2340      	movs	r3, #64	; 0x40
 80041c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ca:	e03c      	b.n	8004246 <UART_SetConfig+0x5a2>
 80041cc:	2380      	movs	r3, #128	; 0x80
 80041ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041d2:	e038      	b.n	8004246 <UART_SetConfig+0x5a2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a5c      	ldr	r2, [pc, #368]	; (800434c <UART_SetConfig+0x6a8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d130      	bne.n	8004240 <UART_SetConfig+0x59c>
 80041de:	4b58      	ldr	r3, [pc, #352]	; (8004340 <UART_SetConfig+0x69c>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	2b05      	cmp	r3, #5
 80041e8:	d826      	bhi.n	8004238 <UART_SetConfig+0x594>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <UART_SetConfig+0x54c>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004209 	.word	0x08004209
 80041f4:	08004211 	.word	0x08004211
 80041f8:	08004219 	.word	0x08004219
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004229 	.word	0x08004229
 8004204:	08004231 	.word	0x08004231
 8004208:	2302      	movs	r3, #2
 800420a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800420e:	e01a      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004210:	2304      	movs	r3, #4
 8004212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004216:	e016      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004218:	2308      	movs	r3, #8
 800421a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800421e:	e012      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004220:	2310      	movs	r3, #16
 8004222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004226:	e00e      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004228:	2320      	movs	r3, #32
 800422a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800422e:	e00a      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004230:	2340      	movs	r3, #64	; 0x40
 8004232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004236:	e006      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423e:	e002      	b.n	8004246 <UART_SetConfig+0x5a2>
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a40      	ldr	r2, [pc, #256]	; (800434c <UART_SetConfig+0x6a8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	f040 80ef 	bne.w	8004430 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004252:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004256:	2b20      	cmp	r3, #32
 8004258:	dc46      	bgt.n	80042e8 <UART_SetConfig+0x644>
 800425a:	2b02      	cmp	r3, #2
 800425c:	f2c0 8081 	blt.w	8004362 <UART_SetConfig+0x6be>
 8004260:	3b02      	subs	r3, #2
 8004262:	2b1e      	cmp	r3, #30
 8004264:	d87d      	bhi.n	8004362 <UART_SetConfig+0x6be>
 8004266:	a201      	add	r2, pc, #4	; (adr r2, 800426c <UART_SetConfig+0x5c8>)
 8004268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426c:	080042ef 	.word	0x080042ef
 8004270:	08004363 	.word	0x08004363
 8004274:	080042f7 	.word	0x080042f7
 8004278:	08004363 	.word	0x08004363
 800427c:	08004363 	.word	0x08004363
 8004280:	08004363 	.word	0x08004363
 8004284:	08004307 	.word	0x08004307
 8004288:	08004363 	.word	0x08004363
 800428c:	08004363 	.word	0x08004363
 8004290:	08004363 	.word	0x08004363
 8004294:	08004363 	.word	0x08004363
 8004298:	08004363 	.word	0x08004363
 800429c:	08004363 	.word	0x08004363
 80042a0:	08004363 	.word	0x08004363
 80042a4:	08004317 	.word	0x08004317
 80042a8:	08004363 	.word	0x08004363
 80042ac:	08004363 	.word	0x08004363
 80042b0:	08004363 	.word	0x08004363
 80042b4:	08004363 	.word	0x08004363
 80042b8:	08004363 	.word	0x08004363
 80042bc:	08004363 	.word	0x08004363
 80042c0:	08004363 	.word	0x08004363
 80042c4:	08004363 	.word	0x08004363
 80042c8:	08004363 	.word	0x08004363
 80042cc:	08004363 	.word	0x08004363
 80042d0:	08004363 	.word	0x08004363
 80042d4:	08004363 	.word	0x08004363
 80042d8:	08004363 	.word	0x08004363
 80042dc:	08004363 	.word	0x08004363
 80042e0:	08004363 	.word	0x08004363
 80042e4:	08004355 	.word	0x08004355
 80042e8:	2b40      	cmp	r3, #64	; 0x40
 80042ea:	d036      	beq.n	800435a <UART_SetConfig+0x6b6>
 80042ec:	e039      	b.n	8004362 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80042ee:	f7fe ffd1 	bl	8003294 <HAL_RCCEx_GetD3PCLK1Freq>
 80042f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80042f4:	e03b      	b.n	800436e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042f6:	f107 0314 	add.w	r3, r7, #20
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fe ffe0 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004304:	e033      	b.n	800436e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff f92c 	bl	8003568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004314:	e02b      	b.n	800436e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004316:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <UART_SetConfig+0x69c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0320 	and.w	r3, r3, #32
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <UART_SetConfig+0x69c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	08db      	lsrs	r3, r3, #3
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	4a08      	ldr	r2, [pc, #32]	; (8004350 <UART_SetConfig+0x6ac>)
 800432e:	fa22 f303 	lsr.w	r3, r2, r3
 8004332:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004334:	e01b      	b.n	800436e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8004336:	4b06      	ldr	r3, [pc, #24]	; (8004350 <UART_SetConfig+0x6ac>)
 8004338:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800433a:	e018      	b.n	800436e <UART_SetConfig+0x6ca>
 800433c:	40011400 	.word	0x40011400
 8004340:	58024400 	.word	0x58024400
 8004344:	40007800 	.word	0x40007800
 8004348:	40007c00 	.word	0x40007c00
 800434c:	58000c00 	.word	0x58000c00
 8004350:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004354:	4bc4      	ldr	r3, [pc, #784]	; (8004668 <UART_SetConfig+0x9c4>)
 8004356:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004358:	e009      	b.n	800436e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004360:	e005      	b.n	800436e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800436c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 81da 	beq.w	800472a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	4abc      	ldr	r2, [pc, #752]	; (800466c <UART_SetConfig+0x9c8>)
 800437c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004380:	461a      	mov	r2, r3
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004384:	fbb3 f3f2 	udiv	r3, r3, r2
 8004388:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4413      	add	r3, r2
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	429a      	cmp	r2, r3
 8004398:	d305      	bcc.n	80043a6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043a0:	6a3a      	ldr	r2, [r7, #32]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d903      	bls.n	80043ae <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80043ac:	e1bd      	b.n	800472a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	4618      	mov	r0, r3
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	4aac      	ldr	r2, [pc, #688]	; (800466c <UART_SetConfig+0x9c8>)
 80043bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	f7fb ff87 	bl	80002d8 <__aeabi_uldivmod>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	020b      	lsls	r3, r1, #8
 80043dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043e0:	0202      	lsls	r2, r0, #8
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	6849      	ldr	r1, [r1, #4]
 80043e6:	0849      	lsrs	r1, r1, #1
 80043e8:	4608      	mov	r0, r1
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	1814      	adds	r4, r2, r0
 80043f0:	eb43 0501 	adc.w	r5, r3, r1
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	4620      	mov	r0, r4
 8004400:	4629      	mov	r1, r5
 8004402:	f7fb ff69 	bl	80002d8 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4613      	mov	r3, r2
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004414:	d308      	bcc.n	8004428 <UART_SetConfig+0x784>
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800441c:	d204      	bcs.n	8004428 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004424:	60da      	str	r2, [r3, #12]
 8004426:	e180      	b.n	800472a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800442e:	e17c      	b.n	800472a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004438:	f040 80be 	bne.w	80045b8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800443c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004440:	2b20      	cmp	r3, #32
 8004442:	dc49      	bgt.n	80044d8 <UART_SetConfig+0x834>
 8004444:	2b00      	cmp	r3, #0
 8004446:	db7c      	blt.n	8004542 <UART_SetConfig+0x89e>
 8004448:	2b20      	cmp	r3, #32
 800444a:	d87a      	bhi.n	8004542 <UART_SetConfig+0x89e>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x7b0>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	080044df 	.word	0x080044df
 8004458:	080044e7 	.word	0x080044e7
 800445c:	08004543 	.word	0x08004543
 8004460:	08004543 	.word	0x08004543
 8004464:	080044ef 	.word	0x080044ef
 8004468:	08004543 	.word	0x08004543
 800446c:	08004543 	.word	0x08004543
 8004470:	08004543 	.word	0x08004543
 8004474:	080044ff 	.word	0x080044ff
 8004478:	08004543 	.word	0x08004543
 800447c:	08004543 	.word	0x08004543
 8004480:	08004543 	.word	0x08004543
 8004484:	08004543 	.word	0x08004543
 8004488:	08004543 	.word	0x08004543
 800448c:	08004543 	.word	0x08004543
 8004490:	08004543 	.word	0x08004543
 8004494:	0800450f 	.word	0x0800450f
 8004498:	08004543 	.word	0x08004543
 800449c:	08004543 	.word	0x08004543
 80044a0:	08004543 	.word	0x08004543
 80044a4:	08004543 	.word	0x08004543
 80044a8:	08004543 	.word	0x08004543
 80044ac:	08004543 	.word	0x08004543
 80044b0:	08004543 	.word	0x08004543
 80044b4:	08004543 	.word	0x08004543
 80044b8:	08004543 	.word	0x08004543
 80044bc:	08004543 	.word	0x08004543
 80044c0:	08004543 	.word	0x08004543
 80044c4:	08004543 	.word	0x08004543
 80044c8:	08004543 	.word	0x08004543
 80044cc:	08004543 	.word	0x08004543
 80044d0:	08004543 	.word	0x08004543
 80044d4:	08004535 	.word	0x08004535
 80044d8:	2b40      	cmp	r3, #64	; 0x40
 80044da:	d02e      	beq.n	800453a <UART_SetConfig+0x896>
 80044dc:	e031      	b.n	8004542 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044de:	f7fd ff6d 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80044e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80044e4:	e033      	b.n	800454e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044e6:	f7fd ff7f 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 80044ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80044ec:	e02f      	b.n	800454e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044ee:	f107 0314 	add.w	r3, r7, #20
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fee4 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044fc:	e027      	b.n	800454e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044fe:	f107 0308 	add.w	r3, r7, #8
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff f830 	bl	8003568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800450c:	e01f      	b.n	800454e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800450e:	4b58      	ldr	r3, [pc, #352]	; (8004670 <UART_SetConfig+0x9cc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800451a:	4b55      	ldr	r3, [pc, #340]	; (8004670 <UART_SetConfig+0x9cc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	08db      	lsrs	r3, r3, #3
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	4a53      	ldr	r2, [pc, #332]	; (8004674 <UART_SetConfig+0x9d0>)
 8004526:	fa22 f303 	lsr.w	r3, r2, r3
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800452c:	e00f      	b.n	800454e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800452e:	4b51      	ldr	r3, [pc, #324]	; (8004674 <UART_SetConfig+0x9d0>)
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004532:	e00c      	b.n	800454e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004534:	4b4c      	ldr	r3, [pc, #304]	; (8004668 <UART_SetConfig+0x9c4>)
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004538:	e009      	b.n	800454e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800453a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004540:	e005      	b.n	800454e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800454c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80ea 	beq.w	800472a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455a:	4a44      	ldr	r2, [pc, #272]	; (800466c <UART_SetConfig+0x9c8>)
 800455c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004560:	461a      	mov	r2, r3
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	fbb3 f3f2 	udiv	r3, r3, r2
 8004568:	005a      	lsls	r2, r3, #1
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	085b      	lsrs	r3, r3, #1
 8004570:	441a      	add	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	2b0f      	cmp	r3, #15
 8004580:	d916      	bls.n	80045b0 <UART_SetConfig+0x90c>
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004588:	d212      	bcs.n	80045b0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	b29b      	uxth	r3, r3
 800458e:	f023 030f 	bic.w	r3, r3, #15
 8004592:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	085b      	lsrs	r3, r3, #1
 8004598:	b29b      	uxth	r3, r3
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	b29a      	uxth	r2, r3
 80045a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045a2:	4313      	orrs	r3, r2
 80045a4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	e0bc      	b.n	800472a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80045b6:	e0b8      	b.n	800472a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045bc:	2b20      	cmp	r3, #32
 80045be:	dc4b      	bgt.n	8004658 <UART_SetConfig+0x9b4>
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f2c0 8087 	blt.w	80046d4 <UART_SetConfig+0xa30>
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	f200 8084 	bhi.w	80046d4 <UART_SetConfig+0xa30>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <UART_SetConfig+0x930>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	0800465f 	.word	0x0800465f
 80045d8:	08004679 	.word	0x08004679
 80045dc:	080046d5 	.word	0x080046d5
 80045e0:	080046d5 	.word	0x080046d5
 80045e4:	08004681 	.word	0x08004681
 80045e8:	080046d5 	.word	0x080046d5
 80045ec:	080046d5 	.word	0x080046d5
 80045f0:	080046d5 	.word	0x080046d5
 80045f4:	08004691 	.word	0x08004691
 80045f8:	080046d5 	.word	0x080046d5
 80045fc:	080046d5 	.word	0x080046d5
 8004600:	080046d5 	.word	0x080046d5
 8004604:	080046d5 	.word	0x080046d5
 8004608:	080046d5 	.word	0x080046d5
 800460c:	080046d5 	.word	0x080046d5
 8004610:	080046d5 	.word	0x080046d5
 8004614:	080046a1 	.word	0x080046a1
 8004618:	080046d5 	.word	0x080046d5
 800461c:	080046d5 	.word	0x080046d5
 8004620:	080046d5 	.word	0x080046d5
 8004624:	080046d5 	.word	0x080046d5
 8004628:	080046d5 	.word	0x080046d5
 800462c:	080046d5 	.word	0x080046d5
 8004630:	080046d5 	.word	0x080046d5
 8004634:	080046d5 	.word	0x080046d5
 8004638:	080046d5 	.word	0x080046d5
 800463c:	080046d5 	.word	0x080046d5
 8004640:	080046d5 	.word	0x080046d5
 8004644:	080046d5 	.word	0x080046d5
 8004648:	080046d5 	.word	0x080046d5
 800464c:	080046d5 	.word	0x080046d5
 8004650:	080046d5 	.word	0x080046d5
 8004654:	080046c7 	.word	0x080046c7
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d037      	beq.n	80046cc <UART_SetConfig+0xa28>
 800465c:	e03a      	b.n	80046d4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800465e:	f7fd fead 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8004662:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004664:	e03c      	b.n	80046e0 <UART_SetConfig+0xa3c>
 8004666:	bf00      	nop
 8004668:	003d0900 	.word	0x003d0900
 800466c:	08004d54 	.word	0x08004d54
 8004670:	58024400 	.word	0x58024400
 8004674:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004678:	f7fd feb6 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 800467c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800467e:	e02f      	b.n	80046e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe fe1b 	bl	80032c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800468e:	e027      	b.n	80046e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004690:	f107 0308 	add.w	r3, r7, #8
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe ff67 	bl	8003568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800469e:	e01f      	b.n	80046e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046a0:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <UART_SetConfig+0xab0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d009      	beq.n	80046c0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <UART_SetConfig+0xab0>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	08db      	lsrs	r3, r3, #3
 80046b2:	f003 0303 	and.w	r3, r3, #3
 80046b6:	4a28      	ldr	r2, [pc, #160]	; (8004758 <UART_SetConfig+0xab4>)
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046be:	e00f      	b.n	80046e0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <UART_SetConfig+0xab4>)
 80046c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046c4:	e00c      	b.n	80046e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80046c6:	4b25      	ldr	r3, [pc, #148]	; (800475c <UART_SetConfig+0xab8>)
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046ca:	e009      	b.n	80046e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046d2:	e005      	b.n	80046e0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80046de:	bf00      	nop
    }

    if (pclk != 0U)
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d021      	beq.n	800472a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	4a1d      	ldr	r2, [pc, #116]	; (8004760 <UART_SetConfig+0xabc>)
 80046ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046f0:	461a      	mov	r2, r3
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	441a      	add	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	2b0f      	cmp	r3, #15
 800470e:	d909      	bls.n	8004724 <UART_SetConfig+0xa80>
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004716:	d205      	bcs.n	8004724 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60da      	str	r2, [r3, #12]
 8004722:	e002      	b.n	800472a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004746:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800474a:	4618      	mov	r0, r3
 800474c:	3738      	adds	r7, #56	; 0x38
 800474e:	46bd      	mov	sp, r7
 8004750:	bdb0      	pop	{r4, r5, r7, pc}
 8004752:	bf00      	nop
 8004754:	58024400 	.word	0x58024400
 8004758:	03d09000 	.word	0x03d09000
 800475c:	003d0900 	.word	0x003d0900
 8004760:	08004d54 	.word	0x08004d54

08004764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00a      	beq.n	80047d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01a      	beq.n	800487a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004862:	d10a      	bne.n	800487a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	605a      	str	r2, [r3, #4]
  }
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048b8:	f7fc fa10 	bl	8000cdc <HAL_GetTick>
 80048bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d10e      	bne.n	80048ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f82f 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e025      	b.n	8004936 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d10e      	bne.n	8004916 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f819 	bl	800493e <UART_WaitOnFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e00f      	b.n	8004936 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b09c      	sub	sp, #112	; 0x70
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800494e:	e0a9      	b.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004956:	f000 80a5 	beq.w	8004aa4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495a:	f7fc f9bf 	bl	8000cdc <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004966:	429a      	cmp	r2, r3
 8004968:	d302      	bcc.n	8004970 <UART_WaitOnFlagUntilTimeout+0x32>
 800496a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800496c:	2b00      	cmp	r3, #0
 800496e:	d140      	bne.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800497e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004980:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004984:	667b      	str	r3, [r7, #100]	; 0x64
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800498e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004990:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004994:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800499c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e6      	bne.n	8004970 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	663b      	str	r3, [r7, #96]	; 0x60
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3308      	adds	r3, #8
 80049c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80049c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e5      	bne.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e069      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d051      	beq.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0e:	d149      	bne.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a22:	e853 3f00 	ldrex	r3, [r3]
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
 8004a3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a40:	e841 2300 	strex	r3, r2, [r1]
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1e6      	bne.n	8004a1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f023 0301 	bic.w	r3, r3, #1
 8004a62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	3308      	adds	r3, #8
 8004a6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a6c:	623a      	str	r2, [r7, #32]
 8004a6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	69f9      	ldr	r1, [r7, #28]
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e010      	b.n	8004ac6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69da      	ldr	r2, [r3, #28]
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2301      	moveq	r3, #1
 8004ab6:	2300      	movne	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	f43f af46 	beq.w	8004950 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3770      	adds	r7, #112	; 0x70
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b085      	sub	sp, #20
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e027      	b.n	8004b34 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2224      	movs	r2, #36	; 0x24
 8004af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d101      	bne.n	8004b58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b54:	2302      	movs	r3, #2
 8004b56:	e02d      	b.n	8004bb4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2224      	movs	r2, #36	; 0x24
 8004b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 f84f 	bl	8004c38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e02d      	b.n	8004c30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2224      	movs	r2, #36	; 0x24
 8004be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f811 	bl	8004c38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d108      	bne.n	8004c5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c58:	e031      	b.n	8004cbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c5e:	2310      	movs	r3, #16
 8004c60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	0e5b      	lsrs	r3, r3, #25
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	0f5b      	lsrs	r3, r3, #29
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c82:	7bbb      	ldrb	r3, [r7, #14]
 8004c84:	7b3a      	ldrb	r2, [r7, #12]
 8004c86:	4911      	ldr	r1, [pc, #68]	; (8004ccc <UARTEx_SetNbDataToProcess+0x94>)
 8004c88:	5c8a      	ldrb	r2, [r1, r2]
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c8e:	7b3a      	ldrb	r2, [r7, #12]
 8004c90:	490f      	ldr	r1, [pc, #60]	; (8004cd0 <UARTEx_SetNbDataToProcess+0x98>)
 8004c92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c94:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	7b7a      	ldrb	r2, [r7, #13]
 8004ca4:	4909      	ldr	r1, [pc, #36]	; (8004ccc <UARTEx_SetNbDataToProcess+0x94>)
 8004ca6:	5c8a      	ldrb	r2, [r1, r2]
 8004ca8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cac:	7b7a      	ldrb	r2, [r7, #13]
 8004cae:	4908      	ldr	r1, [pc, #32]	; (8004cd0 <UARTEx_SetNbDataToProcess+0x98>)
 8004cb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	08004d6c 	.word	0x08004d6c
 8004cd0:	08004d74 	.word	0x08004d74

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4d0d      	ldr	r5, [pc, #52]	; (8004d0c <__libc_init_array+0x38>)
 8004cd8:	4c0d      	ldr	r4, [pc, #52]	; (8004d10 <__libc_init_array+0x3c>)
 8004cda:	1b64      	subs	r4, r4, r5
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	2600      	movs	r6, #0
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	4d0b      	ldr	r5, [pc, #44]	; (8004d14 <__libc_init_array+0x40>)
 8004ce6:	4c0c      	ldr	r4, [pc, #48]	; (8004d18 <__libc_init_array+0x44>)
 8004ce8:	f000 f820 	bl	8004d2c <_init>
 8004cec:	1b64      	subs	r4, r4, r5
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08004d84 	.word	0x08004d84
 8004d10:	08004d84 	.word	0x08004d84
 8004d14:	08004d84 	.word	0x08004d84
 8004d18:	08004d88 	.word	0x08004d88

08004d1c <memset>:
 8004d1c:	4402      	add	r2, r0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d100      	bne.n	8004d26 <memset+0xa>
 8004d24:	4770      	bx	lr
 8004d26:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2a:	e7f9      	b.n	8004d20 <memset+0x4>

08004d2c <_init>:
 8004d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2e:	bf00      	nop
 8004d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d32:	bc08      	pop	{r3}
 8004d34:	469e      	mov	lr, r3
 8004d36:	4770      	bx	lr

08004d38 <_fini>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	bf00      	nop
 8004d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d3e:	bc08      	pop	{r3}
 8004d40:	469e      	mov	lr, r3
 8004d42:	4770      	bx	lr
